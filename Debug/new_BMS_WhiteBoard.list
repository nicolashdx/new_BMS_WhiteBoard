
new_BMS_WhiteBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009904  08009904  00019904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009910  08009910  00019910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  08009914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  08009978  00020064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  080099d8  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aa4  24000124  08009a38  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004bc8  08009a38  00024bc8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020152  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027a41  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004823  00000000  00000000  00047bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c70  00000000  00000000  0004c400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001629  00000000  00000000  0004e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003be9b  00000000  00000000  0004f699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024ae4  00000000  00000000  0008b534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001782f0  00000000  00000000  000b0018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007cf8  00000000  00000000  00228308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00230000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800985c 	.word	0x0800985c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800985c 	.word	0x0800985c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <BMS_Init>:
#include "defines.h"
#include "bms.h"
#include "ltc.h"


void BMS_Init(Master **BMS) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    *BMS = (Master*) calloc(1, sizeof(Master));
 80005e4:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80005e8:	2001      	movs	r0, #1
 80005ea:	f008 ff87 	bl	80094fc <calloc>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]


    LTC_config* config = (LTC_config*) calloc(1, sizeof(LTC_config));
 80005f6:	210c      	movs	r1, #12
 80005f8:	2001      	movs	r0, #1
 80005fa:	f008 ff7f 	bl	80094fc <calloc>
 80005fe:	4603      	mov	r3, r0
 8000600:	60bb      	str	r3, [r7, #8]

    config->command = (LTC_command*) calloc(1, sizeof(LTC_command));
 8000602:	2112      	movs	r1, #18
 8000604:	2001      	movs	r0, #1
 8000606:	f008 ff79 	bl	80094fc <calloc>
 800060a:	4603      	mov	r3, r0
 800060c:	461a      	mov	r2, r3
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	601a      	str	r2, [r3, #0]

    LTC_Init(config);
 8000612:	68b8      	ldr	r0, [r7, #8]
 8000614:	f000 f89e 	bl	8000754 <LTC_Init>


    for (uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000618:	2300      	movs	r3, #0
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	e016      	b.n	800064c <BMS_Init+0x70>
        (*BMS)->slaves[i].config = config;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	215c      	movs	r1, #92	; 0x5c
 8000626:	fb01 f303 	mul.w	r3, r1, r3
 800062a:	4413      	add	r3, r2
 800062c:	3360      	adds	r3, #96	; 0x60
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	601a      	str	r2, [r3, #0]
        (*BMS)->slaves[i].sensor.ADDR = i;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	215c      	movs	r1, #92	; 0x5c
 800063a:	fb01 f303 	mul.w	r3, r1, r3
 800063e:	4413      	add	r3, r2
 8000640:	3308      	adds	r3, #8
 8000642:	7bfa      	ldrb	r2, [r7, #15]
 8000644:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	3301      	adds	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b03      	cmp	r3, #3
 8000650:	d9e5      	bls.n	800061e <BMS_Init+0x42>
    }

    LTC_PEC_InitTable();
 8000652:	f000 f8b7 	bl	80007c4 <LTC_PEC_InitTable>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <ElectricalManagement>:


void ElectricalManagement(Master *BMS){
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
	LTC_SendBroadcastCommand(BMS->slaves[0].config, LTC_COMMAND_ADCV);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066a:	f44f 7118 	mov.w	r1, #608	; 0x260
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f8f3 	bl	800085a <LTC_SendBroadcastCommand>
		uint16_t temp_minV = UINT16_MAX;
 8000674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000678:	81fb      	strh	r3, [r7, #14]
		uint16_t temp_maxV = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	81bb      	strh	r3, [r7, #12]
		for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 800067e:	2300      	movs	r3, #0
 8000680:	72fb      	strb	r3, [r7, #11]
 8000682:	e035      	b.n	80006f0 <ElectricalManagement+0x92>
			LTC_Read(LTC_READ_CELL, &(BMS->slaves[i]));
 8000684:	7afb      	ldrb	r3, [r7, #11]
 8000686:	225c      	movs	r2, #92	; 0x5c
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	3308      	adds	r3, #8
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	4619      	mov	r1, r3
 8000694:	2001      	movs	r0, #1
 8000696:	f000 f8cf 	bl	8000838 <LTC_Read>
			if(BMS->slaves[i].sensor.V_MIN < temp_minV)
 800069a:	7afb      	ldrb	r3, [r7, #11]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	215c      	movs	r1, #92	; 0x5c
 80006a0:	fb01 f303 	mul.w	r3, r1, r3
 80006a4:	4413      	add	r3, r2
 80006a6:	335a      	adds	r3, #90	; 0x5a
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d908      	bls.n	80006c2 <ElectricalManagement+0x64>
				temp_minV = BMS->slaves[i].sensor.V_MIN;
 80006b0:	7afb      	ldrb	r3, [r7, #11]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	215c      	movs	r1, #92	; 0x5c
 80006b6:	fb01 f303 	mul.w	r3, r1, r3
 80006ba:	4413      	add	r3, r2
 80006bc:	335a      	adds	r3, #90	; 0x5a
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	81fb      	strh	r3, [r7, #14]
			if(BMS->slaves[i].sensor.V_MAX > temp_maxV)
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	215c      	movs	r1, #92	; 0x5c
 80006c8:	fb01 f303 	mul.w	r3, r1, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	3358      	adds	r3, #88	; 0x58
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	89ba      	ldrh	r2, [r7, #12]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d208      	bcs.n	80006ea <ElectricalManagement+0x8c>
				temp_maxV = BMS->slaves[i].sensor.V_MAX;
 80006d8:	7afb      	ldrb	r3, [r7, #11]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	215c      	movs	r1, #92	; 0x5c
 80006de:	fb01 f303 	mul.w	r3, r1, r3
 80006e2:	4413      	add	r3, r2
 80006e4:	3358      	adds	r3, #88	; 0x58
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	81bb      	strh	r3, [r7, #12]
		for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 80006ea:	7afb      	ldrb	r3, [r7, #11]
 80006ec:	3301      	adds	r3, #1
 80006ee:	72fb      	strb	r3, [r7, #11]
 80006f0:	7afb      	ldrb	r3, [r7, #11]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d9c6      	bls.n	8000684 <ElectricalManagement+0x26>
		}
		//BMS->maxCellVoltage = temp_maxV;
		BMS->maxCellVoltage++;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	801a      	strh	r2, [r3, #0]
		BMS->minCellVoltage = temp_minV;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	89fa      	ldrh	r2, [r7, #14]
 8000706:	805a      	strh	r2, [r3, #2]
		BMS->deltaVoltage = BMS->maxCellVoltage - BMS->minCellVoltage;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	881a      	ldrh	r2, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	885b      	ldrh	r3, [r3, #2]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	b29a      	uxth	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	809a      	strh	r2, [r3, #4]
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4a07      	ldr	r2, [pc, #28]	; (800074c <vApplicationGetIdleTaskMemory+0x2c>)
 8000730:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <vApplicationGetIdleTaskMemory+0x30>)
 8000736:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	24000140 	.word	0x24000140
 8000750:	240001e0 	.word	0x240001e0

08000754 <LTC_Init>:
#define BYTESWAP(word) ((word >> 8) + (word << 8))

extern SPI_HandleTypeDef hspi1;
static uint16_t pec_table[LTC_PEC_TABLE_LENGTH];

void LTC_Init(LTC_config *config) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	config->GPIO   = ALL_GPIOS_READ;
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	7913      	ldrb	r3, [r2, #4]
 8000760:	f043 033e 	orr.w	r3, r3, #62	; 0x3e
 8000764:	7113      	strb	r3, [r2, #4]
	config->REFON  = REFERENCE_SHUTS_DOWN_AFTER_CONVERSIONS;
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	7913      	ldrb	r3, [r2, #4]
 800076a:	f36f 1386 	bfc	r3, #6, #1
 800076e:	7113      	strb	r3, [r2, #4]
	config->SWTRD  = SOFTWARE_TIMER_ENABLE_PIN_LOW;
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7913      	ldrb	r3, [r2, #4]
 8000774:	f36f 13c7 	bfc	r3, #7, #1
 8000778:	7113      	strb	r3, [r2, #4]
	config->ADCOPT = SELECT_ADC_MODES_FAST;
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	7953      	ldrb	r3, [r2, #5]
 800077e:	f36f 0300 	bfc	r3, #0, #1
 8000782:	7153      	strb	r3, [r2, #5]
	config->VUV    = DEFULT_VOLTAGE;
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	88d3      	ldrh	r3, [r2, #6]
 8000788:	f36f 030b 	bfc	r3, #0, #12
 800078c:	80d3      	strh	r3, [r2, #6]
	config->VOV    = DEFULT_VOLTAGE;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	811a      	strh	r2, [r3, #8]
	config->DCTO   = DISCHARGE_DISABLE;
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	7a93      	ldrb	r3, [r2, #10]
 8000798:	f36f 0303 	bfc	r3, #0, #4
 800079c:	7293      	strb	r3, [r2, #10]
	config->command->MD  = MD_FILTRED;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80007a6:	809a      	strh	r2, [r3, #4]
	config->command->DCP = DCP_PERMITED;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2210      	movs	r2, #16
 80007ae:	80da      	strh	r2, [r3, #6]
	LTC_SendBroadcastCommand(config, LTC_COMMAND_WRCOMM);
 80007b0:	f240 7121 	movw	r1, #1825	; 0x721
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f850 	bl	800085a <LTC_SendBroadcastCommand>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <LTC_PEC_InitTable>:

void LTC_PEC_InitTable() {
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	e026      	b.n	800081e <LTC_PEC_InitTable+0x5a>
		remainder = i << 7;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	01db      	lsls	r3, r3, #7
 80007d6:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 80007d8:	2308      	movs	r3, #8
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	e014      	b.n	8000808 <LTC_PEC_InitTable+0x44>
			if(remainder & 0x4000) {
 80007de:	89fb      	ldrh	r3, [r7, #14]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d009      	beq.n	80007fc <LTC_PEC_InitTable+0x38>
				remainder = remainder << 1;
 80007e8:	89fb      	ldrh	r3, [r7, #14]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	81fb      	strh	r3, [r7, #14]
				remainder = remainder ^ 0x4599;
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 80007f4:	f083 0319 	eor.w	r3, r3, #25
 80007f8:	81fb      	strh	r3, [r7, #14]
 80007fa:	e002      	b.n	8000802 <LTC_PEC_InitTable+0x3e>
			}
			else
				remainder = remainder << 1;
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3b01      	subs	r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	dce7      	bgt.n	80007de <LTC_PEC_InitTable+0x1a>
		}
		pec_table[i] = remainder&0xFFFF;
 800080e:	4909      	ldr	r1, [pc, #36]	; (8000834 <LTC_PEC_InitTable+0x70>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	89fa      	ldrh	r2, [r7, #14]
 8000814:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	3301      	adds	r3, #1
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	2bff      	cmp	r3, #255	; 0xff
 8000822:	ddd5      	ble.n	80007d0 <LTC_PEC_InitTable+0xc>
	}
}
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	240003e0 	.word	0x240003e0

08000838 <LTC_Read>:
	do{
		LTC_SendAddressedCommand(slave, LTC_COMMAND_PLADC);
	}while(!slave->config->ADC_READY);
}

void LTC_Read(uint8_t LTC_READ, Slave *slave){
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
	slave->config->command->BROADCAST = false;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	709a      	strb	r2, [r3, #2]

}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <LTC_SendBroadcastCommand>:

void LTC_SendBroadcastCommand(LTC_config *config, uint16_t command_name) {
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	460b      	mov	r3, r1
 8000864:	807b      	strh	r3, [r7, #2]
	uint16_t tx_data[4] = {0, 0, 0, 0};
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
	uint16_t rx_data[4] = {0, 0, 0, 0};
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
	config->command->NAME = command_name;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	887a      	ldrh	r2, [r7, #2]
 8000880:	801a      	strh	r2, [r3, #0]
	LTC_Communication(config, tx_data, rx_data);
 8000882:	f107 0208 	add.w	r2, r7, #8
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	4619      	mov	r1, r3
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f812 	bl	80008b6 <LTC_Communication>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <LTC_StartTrasmission>:
	default:
		break;
	}
}

void LTC_StartTrasmission(){
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
	LTC_ChipSelect(RESET);
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 f82a 	bl	80008f8 <LTC_ChipSelect>
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <LTC_EndTramission>:

void LTC_EndTramission() {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	LTC_ChipSelect(SET);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 f823 	bl	80008f8 <LTC_ChipSelect>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <LTC_Communication>:

void LTC_Communication(LTC_config *config, uint16_t* tx_data, uint16_t* rx_data) {
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	60f8      	str	r0, [r7, #12]
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
	uint16_t command = LTC_MakeCommand(config->command);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f84d 	bl	8000966 <LTC_MakeCommand>
 80008cc:	4603      	mov	r3, r0
 80008ce:	82fb      	strh	r3, [r7, #22]
	LTC_WakeUp();
 80008d0:	f000 f83e 	bl	8000950 <LTC_WakeUp>
	LTC_StartTrasmission();
 80008d4:	f7ff ffe1 	bl	800089a <LTC_StartTrasmission>
	LTC_TransmitCommand(command);
 80008d8:	8afb      	ldrh	r3, [r7, #22]
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f914 	bl	8000b08 <LTC_TransmitCommand>
	LTC_TransmitReceive(command, tx_data, rx_data);
 80008e0:	8afb      	ldrh	r3, [r7, #22]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f926 	bl	8000b38 <LTC_TransmitReceive>
	LTC_EndTramission();
 80008ec:	f7ff ffdc 	bl	80008a8 <LTC_EndTramission>
}
 80008f0:	bf00      	nop
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <LTC_ChipSelect>:
	tx_data[0] = (slave->config->ADCOPT << 8) | (slave->config->SWTRD << 9) | (slave->config->REFON << 10) | (slave->config->GPIO << 11) | (slave->config->VUV);
	tx_data[1] = (slave->config->VUV >> 8) | (slave->config->VOV << 4);
	tx_data[2] |= ((slave->sensor.CELL_TO_DISCHARGE & 0xff) << 8) | ((slave->sensor.CELL_TO_DISCHARGE & 0xf00) >> 8) | ((slave->config->DCTO & 0xf) << 4);
}

void LTC_ChipSelect(uint8_t level) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin , level);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	461a      	mov	r2, r3
 8000906:	2120      	movs	r1, #32
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <LTC_ChipSelect+0x20>)
 800090a:	f001 ff85 	bl	8002818 <HAL_GPIO_WritePin>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	58020000 	.word	0x58020000

0800091c <LTC_SPI>:


uint16_t LTC_SPI(uint16_t Tx_data) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af02      	add	r7, sp, #8
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
	uint16_t Rx_data = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&hspi1,(uint8_t *) &Tx_data, (uint8_t *) &Rx_data, 1, 50);
 800092a:	f107 020e 	add.w	r2, r7, #14
 800092e:	1db9      	adds	r1, r7, #6
 8000930:	2332      	movs	r3, #50	; 0x32
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <LTC_SPI+0x30>)
 8000938:	f005 f894 	bl	8005a64 <HAL_SPI_TransmitReceive>
	return(BYTESWAP(Rx_data));
 800093c:	89fb      	ldrh	r3, [r7, #14]
 800093e:	ba5b      	rev16	r3, r3
 8000940:	b29b      	uxth	r3, r3
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	240006c8 	.word	0x240006c8

08000950 <LTC_WakeUp>:

void LTC_WakeUp() {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	LTC_StartTrasmission();
 8000954:	f7ff ffa1 	bl	800089a <LTC_StartTrasmission>
	LTC_SPI(0);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ffdf 	bl	800091c <LTC_SPI>
	LTC_EndTramission();
 800095e:	f7ff ffa3 	bl	80008a8 <LTC_EndTramission>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}

08000966 <LTC_MakeCommand>:

uint16_t LTC_MakeCommand(LTC_command *command) {
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	switch(command->NAME) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	f240 426f 	movw	r2, #1135	; 0x46f
 8000976:	4293      	cmp	r3, r2
 8000978:	d06d      	beq.n	8000a56 <LTC_MakeCommand+0xf0>
 800097a:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 800097e:	da75      	bge.n	8000a6c <LTC_MakeCommand+0x106>
 8000980:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 8000984:	d05c      	beq.n	8000a40 <LTC_MakeCommand+0xda>
 8000986:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 800098a:	dc6f      	bgt.n	8000a6c <LTC_MakeCommand+0x106>
 800098c:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8000990:	d04b      	beq.n	8000a2a <LTC_MakeCommand+0xc4>
 8000992:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8000996:	dc69      	bgt.n	8000a6c <LTC_MakeCommand+0x106>
 8000998:	f240 420f 	movw	r2, #1039	; 0x40f
 800099c:	4293      	cmp	r3, r2
 800099e:	d039      	beq.n	8000a14 <LTC_MakeCommand+0xae>
 80009a0:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80009a4:	da62      	bge.n	8000a6c <LTC_MakeCommand+0x106>
 80009a6:	f240 4207 	movw	r2, #1031	; 0x407
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d032      	beq.n	8000a14 <LTC_MakeCommand+0xae>
 80009ae:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 80009b2:	da5b      	bge.n	8000a6c <LTC_MakeCommand+0x106>
 80009b4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80009b8:	d00a      	beq.n	80009d0 <LTC_MakeCommand+0x6a>
 80009ba:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80009be:	dc55      	bgt.n	8000a6c <LTC_MakeCommand+0x106>
 80009c0:	f240 2207 	movw	r2, #519	; 0x207
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d025      	beq.n	8000a14 <LTC_MakeCommand+0xae>
 80009c8:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 80009cc:	d00f      	beq.n	80009ee <LTC_MakeCommand+0x88>
 80009ce:	e04d      	b.n	8000a6c <LTC_MakeCommand+0x106>
		case LTC_COMMAND_ADCV:
			return command->NAME | command->MD | command->DCP | command->CH;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	881a      	ldrh	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	889b      	ldrh	r3, [r3, #4]
 80009d8:	4313      	orrs	r3, r2
 80009da:	b29a      	uxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	88db      	ldrh	r3, [r3, #6]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	891b      	ldrh	r3, [r3, #8]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	e040      	b.n	8000a70 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADOW:
			return command->NAME | command->MD | command->PUP | command->DCP | command->CH;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	881a      	ldrh	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	889b      	ldrh	r3, [r3, #4]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	89db      	ldrh	r3, [r3, #14]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	88db      	ldrh	r3, [r3, #6]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	891b      	ldrh	r3, [r3, #8]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	e02d      	b.n	8000a70 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_CVST:
		case LTC_COMMAND_AXST:
		case LTC_COMMAND_STATST:
			return command->NAME | command->MD | command->ST;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	881a      	ldrh	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	889b      	ldrh	r3, [r3, #4]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	8a1b      	ldrh	r3, [r3, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	e022      	b.n	8000a70 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADAX	:
			return command->NAME | command->MD | command->CHG;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	881a      	ldrh	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	889b      	ldrh	r3, [r3, #4]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	895b      	ldrh	r3, [r3, #10]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	e017      	b.n	8000a70 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADSTAT	:
			return command->NAME | command->MD | command->CHST;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	881a      	ldrh	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	889b      	ldrh	r3, [r3, #4]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	899b      	ldrh	r3, [r3, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	e00c      	b.n	8000a70 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADCVAX	:
			return command->NAME | command->MD | command->CHG;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	881a      	ldrh	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	889b      	ldrh	r3, [r3, #4]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	895b      	ldrh	r3, [r3, #10]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	e001      	b.n	8000a70 <LTC_MakeCommand+0x10a>
			break;

		default:
			return command->NAME;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	881b      	ldrh	r3, [r3, #0]
			break;
	}
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <LTC_PEC>:

uint16_t LTC_PEC(uint16_t *data , uint8_t len) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b087      	sub	sp, #28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
	int32_t remainder, address;
	remainder = LTC_PEC_SEED;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	74fb      	strb	r3, [r7, #19]
 8000a90:	e02a      	b.n	8000ae8 <LTC_PEC+0x6c>
		address   = ((remainder >> 7) ^ ((data[i] >> 8) & 0xFF)) & 0xFF; //calculate PEC table address
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	11da      	asrs	r2, r3, #7
 8000a96:	7cfb      	ldrb	r3, [r7, #19]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	440b      	add	r3, r1
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4053      	eors	r3, r2
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	021b      	lsls	r3, r3, #8
 8000ab0:	4914      	ldr	r1, [pc, #80]	; (8000b04 <LTC_PEC+0x88>)
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000ab8:	4053      	eors	r3, r2
 8000aba:	617b      	str	r3, [r7, #20]
		address   = ((remainder >> 7) ^ (data[i] & 0xFF)) & 0xFF;    	 //calculate PEC table address
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	11da      	asrs	r2, r3, #7
 8000ac0:	7cfb      	ldrb	r3, [r7, #19]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	6879      	ldr	r1, [r7, #4]
 8000ac6:	440b      	add	r3, r1
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4053      	eors	r3, r2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	021b      	lsls	r3, r3, #8
 8000ad6:	490b      	ldr	r1, [pc, #44]	; (8000b04 <LTC_PEC+0x88>)
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000ade:	4053      	eors	r3, r2
 8000ae0:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 8000ae2:	7cfb      	ldrb	r3, [r7, #19]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	74fb      	strb	r3, [r7, #19]
 8000ae8:	7cfa      	ldrb	r2, [r7, #19]
 8000aea:	78fb      	ldrb	r3, [r7, #3]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d3d0      	bcc.n	8000a92 <LTC_PEC+0x16>
	}
	return (remainder * 2); //The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	b29b      	uxth	r3, r3
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	240003e0 	.word	0x240003e0

08000b08 <LTC_TransmitCommand>:

void LTC_TransmitCommand(uint16_t command) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80fb      	strh	r3, [r7, #6]
	uint16_t pec = LTC_PEC(&command, 1);
 8000b12:	1dbb      	adds	r3, r7, #6
 8000b14:	2101      	movs	r1, #1
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ffb0 	bl	8000a7c <LTC_PEC>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	81fb      	strh	r3, [r7, #14]
	LTC_SPI(command);
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fefa 	bl	800091c <LTC_SPI>
	LTC_SPI(pec);
 8000b28:	89fb      	ldrh	r3, [r7, #14]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fef6 	bl	800091c <LTC_SPI>
}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <LTC_TransmitReceive>:

void LTC_TransmitReceive(uint16_t command, uint16_t* tx_data, uint16_t* rx_data) {
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	81fb      	strh	r3, [r7, #14]
	if((command & 0x07FF) == LTC_COMMAND_WRCFGA) {
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d109      	bne.n	8000b64 <LTC_TransmitReceive+0x2c>
		uint16_t pec = LTC_PEC(tx_data, 3);
 8000b50:	2103      	movs	r1, #3
 8000b52:	68b8      	ldr	r0, [r7, #8]
 8000b54:	f7ff ff92 	bl	8000a7c <LTC_PEC>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	82bb      	strh	r3, [r7, #20]
		tx_data[3] = pec;
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3306      	adds	r3, #6
 8000b60:	8aba      	ldrh	r2, [r7, #20]
 8000b62:	801a      	strh	r2, [r3, #0]
	}
	if((tx_data[0] & 0x07FF) < LTC_COMMAND_ADCV) {
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b6c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000b70:	da16      	bge.n	8000ba0 <LTC_TransmitReceive+0x68>
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 8000b72:	2300      	movs	r3, #0
 8000b74:	75fb      	strb	r3, [r7, #23]
 8000b76:	e010      	b.n	8000b9a <LTC_TransmitReceive+0x62>
			rx_data[i] = LTC_SPI(tx_data[i]);
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	4413      	add	r3, r2
 8000b80:	8819      	ldrh	r1, [r3, #0]
 8000b82:	7dfb      	ldrb	r3, [r7, #23]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	18d4      	adds	r4, r2, r3
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	f7ff fec6 	bl	800091c <LTC_SPI>
 8000b90:	4603      	mov	r3, r0
 8000b92:	8023      	strh	r3, [r4, #0]
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 8000b94:	7dfb      	ldrb	r3, [r7, #23]
 8000b96:	3301      	adds	r3, #1
 8000b98:	75fb      	strb	r3, [r7, #23]
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d9eb      	bls.n	8000b78 <LTC_TransmitReceive+0x40>
		}
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	371c      	adds	r7, #28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd90      	pop	{r4, r7, pc}

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b090      	sub	sp, #64	; 0x40
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fecf 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f843 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f9e1 	bl	8000f7c <MX_GPIO_Init>
  MX_ETH_Init();
 8000bba:	f000 f8bf 	bl	8000d3c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000bbe:	f000 f95f 	bl	8000e80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bc2:	f000 f9a9 	bl	8000f18 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000bc6:	f000 f905 	bl	8000dd4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t cont = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	87fb      	strh	r3, [r7, #62]	; 0x3e

  Master* BMS;
  BMS_Init(&BMS);
 8000bce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fd02 	bl	80005dc <BMS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <main+0x84>)
 8000bda:	f107 041c 	add.w	r4, r7, #28
 8000bde:	461d      	mov	r5, r3
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), (void*) &cont);
 8000bec:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f007 fa26 	bl	8008048 <osThreadCreate>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <main+0x88>)
 8000c00:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <main+0x8c>)
 8000c04:	463c      	mov	r4, r7
 8000c06:	461d      	mov	r5, r3
 8000c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), (void*) BMS);
 8000c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c16:	463b      	mov	r3, r7
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f007 fa14 	bl	8008048 <osThreadCreate>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <main+0x90>)
 8000c24:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c26:	f007 fa08 	bl	800803a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <main+0x82>
 8000c2c:	08009880 	.word	0x08009880
 8000c30:	24000cc8 	.word	0x24000cc8
 8000c34:	080098a8 	.word	0x080098a8
 8000c38:	24000ccc 	.word	0x24000ccc

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b09c      	sub	sp, #112	; 0x70
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	224c      	movs	r2, #76	; 0x4c
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f008 fd20 	bl	8009690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2220      	movs	r2, #32
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f008 fd1a 	bl	8009690 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f001 ff3f 	bl	8002ae0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b33      	ldr	r3, [pc, #204]	; (8000d34 <SystemClock_Config+0xf8>)
 8000c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6a:	4a32      	ldr	r2, [pc, #200]	; (8000d34 <SystemClock_Config+0xf8>)
 8000c6c:	f023 0301 	bic.w	r3, r3, #1
 8000c70:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c72:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <SystemClock_Config+0xf8>)
 8000c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <SystemClock_Config+0xfc>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c84:	4a2c      	ldr	r2, [pc, #176]	; (8000d38 <SystemClock_Config+0xfc>)
 8000c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <SystemClock_Config+0xfc>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c98:	bf00      	nop
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <SystemClock_Config+0xfc>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ca6:	d1f8      	bne.n	8000c9a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000cc6:	2318      	movs	r3, #24
 8000cc8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 ff44 	bl	8002b74 <HAL_RCC_OscConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cf2:	f000 fa5f 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf6:	233f      	movs	r3, #63	; 0x3f
 8000cf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 fb84 	bl	8003428 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d26:	f000 fa45 	bl	80011b4 <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3770      	adds	r7, #112	; 0x70
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	58000400 	.word	0x58000400
 8000d38:	58024800 	.word	0x58024800

08000d3c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <MX_ETH_Init+0x80>)
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <MX_ETH_Init+0x84>)
 8000d44:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_ETH_Init+0x88>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_ETH_Init+0x88>)
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_ETH_Init+0x88>)
 8000d54:	22e1      	movs	r2, #225	; 0xe1
 8000d56:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_ETH_Init+0x88>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_ETH_Init+0x88>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_ETH_Init+0x88>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_ETH_Init+0x80>)
 8000d6c:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <MX_ETH_Init+0x88>)
 8000d6e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_ETH_Init+0x80>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_ETH_Init+0x80>)
 8000d78:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <MX_ETH_Init+0x8c>)
 8000d7a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_ETH_Init+0x80>)
 8000d7e:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <MX_ETH_Init+0x90>)
 8000d80:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_ETH_Init+0x80>)
 8000d84:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d88:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <MX_ETH_Init+0x80>)
 8000d8c:	f000 ff60 	bl	8001c50 <HAL_ETH_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d96:	f000 fa0d 	bl	80011b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d9a:	2238      	movs	r2, #56	; 0x38
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_ETH_Init+0x94>)
 8000da0:	f008 fc76 	bl	8009690 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_ETH_Init+0x94>)
 8000da6:	2221      	movs	r2, #33	; 0x21
 8000da8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_ETH_Init+0x94>)
 8000dac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000db0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_ETH_Init+0x94>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	24000618 	.word	0x24000618
 8000dc0:	40028000 	.word	0x40028000
 8000dc4:	24000cd0 	.word	0x24000cd0
 8000dc8:	240000c4 	.word	0x240000c4
 8000dcc:	24000064 	.word	0x24000064
 8000dd0:	240005e0 	.word	0x240005e0

08000dd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000dda:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <MX_SPI1_Init+0xa8>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000de0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000de6:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000dee:	2203      	movs	r2, #3
 8000df0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_SPI1_Init+0xa4>)
 8000e64:	f004 fcda 	bl	800581c <HAL_SPI_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000e6e:	f000 f9a1 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	240006c8 	.word	0x240006c8
 8000e7c:	40013000 	.word	0x40013000

08000e80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000e86:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <MX_USART3_UART_Init+0x94>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000eca:	f005 fcbb 	bl	8006844 <HAL_UART_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ed4:	f000 f96e 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000edc:	f006 fcc3 	bl	8007866 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ee6:	f000 f965 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000eee:	f006 fcf8 	bl	80078e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ef8:	f000 f95c 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000efe:	f006 fc79 	bl	80077f4 <HAL_UARTEx_DisableFifoMode>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f08:	f000 f954 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	24000750 	.word	0x24000750
 8000f14:	40004800 	.word	0x40004800

08000f18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f1e:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000f20:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f24:	2209      	movs	r2, #9
 8000f26:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f60:	f001 fc8d 	bl	800287e <HAL_PCD_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f6a:	f000 f923 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	240007e4 	.word	0x240007e4
 8000f78:	40080000 	.word	0x40080000

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	; 0x30
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	4b62      	ldr	r3, [pc, #392]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	4a60      	ldr	r2, [pc, #384]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa2:	4b5e      	ldr	r3, [pc, #376]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb0:	4b5a      	ldr	r3, [pc, #360]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	4a59      	ldr	r2, [pc, #356]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc0:	4b56      	ldr	r3, [pc, #344]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b53      	ldr	r3, [pc, #332]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a51      	ldr	r2, [pc, #324]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b4f      	ldr	r3, [pc, #316]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b4b      	ldr	r3, [pc, #300]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	4a4a      	ldr	r2, [pc, #296]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <MX_GPIO_Init+0x1a0>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	4b44      	ldr	r3, [pc, #272]	; (800111c <MX_GPIO_Init+0x1a0>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	4a42      	ldr	r2, [pc, #264]	; (800111c <MX_GPIO_Init+0x1a0>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101a:	4b40      	ldr	r3, [pc, #256]	; (800111c <MX_GPIO_Init+0x1a0>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001028:	4b3c      	ldr	r3, [pc, #240]	; (800111c <MX_GPIO_Init+0x1a0>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	4a3b      	ldr	r2, [pc, #236]	; (800111c <MX_GPIO_Init+0x1a0>)
 8001030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001038:	4b38      	ldr	r3, [pc, #224]	; (800111c <MX_GPIO_Init+0x1a0>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <MX_GPIO_Init+0x1a0>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	4a33      	ldr	r2, [pc, #204]	; (800111c <MX_GPIO_Init+0x1a0>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <MX_GPIO_Init+0x1a0>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105c:	f003 0310 	and.w	r3, r3, #16
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f244 0101 	movw	r1, #16385	; 0x4001
 800106a:	482d      	ldr	r0, [pc, #180]	; (8001120 <MX_GPIO_Init+0x1a4>)
 800106c:	f001 fbd4 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	482b      	ldr	r0, [pc, #172]	; (8001124 <MX_GPIO_Init+0x1a8>)
 8001078:	f001 fbce 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2102      	movs	r1, #2
 8001080:	4829      	ldr	r0, [pc, #164]	; (8001128 <MX_GPIO_Init+0x1ac>)
 8001082:	f001 fbc9 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	4824      	ldr	r0, [pc, #144]	; (800112c <MX_GPIO_Init+0x1b0>)
 800109c:	f001 fa0c 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80010a0:	f244 0301 	movw	r3, #16385	; 0x4001
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	4819      	ldr	r0, [pc, #100]	; (8001120 <MX_GPIO_Init+0x1a4>)
 80010ba:	f001 f9fd 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80010be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <MX_GPIO_Init+0x1a8>)
 80010d8:	f001 f9ee 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	480f      	ldr	r0, [pc, #60]	; (8001130 <MX_GPIO_Init+0x1b4>)
 80010f2:	f001 f9e1 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_GPIO_Init+0x1ac>)
 800110e:	f001 f9d3 	bl	80024b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	; 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	58024400 	.word	0x58024400
 8001120:	58020400 	.word	0x58020400
 8001124:	58020c00 	.word	0x58020c00
 8001128:	58021000 	.word	0x58021000
 800112c:	58020800 	.word	0x58020800
 8001130:	58021800 	.word	0x58021800

08001134 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t* cont = (uint16_t*) argument;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	(*cont)++;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	b29a      	uxth	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800114c:	2101      	movs	r1, #1
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <StartDefaultTask+0x3c>)
 8001150:	f001 fb7b 	bl	800284a <HAL_GPIO_TogglePin>
	if(*cont==65535){
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115c:	4293      	cmp	r3, r2
 800115e:	d102      	bne.n	8001166 <StartDefaultTask+0x32>
		*cont = 0;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	801a      	strh	r2, [r3, #0]
	}
    osDelay(1000);
 8001166:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116a:	f006 ffb9 	bl	80080e0 <osDelay>
	(*cont)++;
 800116e:	e7e7      	b.n	8001140 <StartDefaultTask+0xc>
 8001170:	58020400 	.word	0x58020400

08001174 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	Master* BMS = (Master*) argument;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  ElectricalManagement(BMS);
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff fa6c 	bl	800065e <ElectricalManagement>
	  osDelay(1000);
 8001186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800118a:	f006 ffa9 	bl	80080e0 <osDelay>
	  ElectricalManagement(BMS);
 800118e:	e7f7      	b.n	8001180 <StartTask02+0xc>

08001190 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011a2:	f000 fc11 	bl	80019c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40010000 	.word	0x40010000

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>
	...

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_MspInit+0x38>)
 80011c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_MspInit+0x38>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_MspInit+0x38>)
 80011d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	210f      	movs	r1, #15
 80011e8:	f06f 0001 	mvn.w	r0, #1
 80011ec:	f000 fd08 	bl	8001c00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58024400 	.word	0x58024400

080011fc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	; 0x38
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a59      	ldr	r2, [pc, #356]	; (8001380 <HAL_ETH_MspInit+0x184>)
 800121a:	4293      	cmp	r3, r2
 800121c:	f040 80ab 	bne.w	8001376 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001220:	4b58      	ldr	r3, [pc, #352]	; (8001384 <HAL_ETH_MspInit+0x188>)
 8001222:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001226:	4a57      	ldr	r2, [pc, #348]	; (8001384 <HAL_ETH_MspInit+0x188>)
 8001228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001230:	4b54      	ldr	r3, [pc, #336]	; (8001384 <HAL_ETH_MspInit+0x188>)
 8001232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800123e:	4b51      	ldr	r3, [pc, #324]	; (8001384 <HAL_ETH_MspInit+0x188>)
 8001240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001244:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_ETH_MspInit+0x188>)
 8001246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800124e:	4b4d      	ldr	r3, [pc, #308]	; (8001384 <HAL_ETH_MspInit+0x188>)
 8001250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800125c:	4b49      	ldr	r3, [pc, #292]	; (8001384 <HAL_ETH_MspInit+0x188>)
 800125e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001262:	4a48      	ldr	r2, [pc, #288]	; (8001384 <HAL_ETH_MspInit+0x188>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800126c:	4b45      	ldr	r3, [pc, #276]	; (8001384 <HAL_ETH_MspInit+0x188>)
 800126e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4b42      	ldr	r3, [pc, #264]	; (8001384 <HAL_ETH_MspInit+0x188>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	4a40      	ldr	r2, [pc, #256]	; (8001384 <HAL_ETH_MspInit+0x188>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128a:	4b3e      	ldr	r3, [pc, #248]	; (8001384 <HAL_ETH_MspInit+0x188>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <HAL_ETH_MspInit+0x188>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	4a39      	ldr	r2, [pc, #228]	; (8001384 <HAL_ETH_MspInit+0x188>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <HAL_ETH_MspInit+0x188>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <HAL_ETH_MspInit+0x188>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	4a31      	ldr	r2, [pc, #196]	; (8001384 <HAL_ETH_MspInit+0x188>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_ETH_MspInit+0x188>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_ETH_MspInit+0x188>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	4a2a      	ldr	r2, [pc, #168]	; (8001384 <HAL_ETH_MspInit+0x188>)
 80012dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_ETH_MspInit+0x188>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012f2:	2332      	movs	r3, #50	; 0x32
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001302:	230b      	movs	r3, #11
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	481e      	ldr	r0, [pc, #120]	; (8001388 <HAL_ETH_MspInit+0x18c>)
 800130e:	f001 f8d3 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001312:	2386      	movs	r3, #134	; 0x86
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001322:	230b      	movs	r3, #11
 8001324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	4817      	ldr	r0, [pc, #92]	; (800138c <HAL_ETH_MspInit+0x190>)
 800132e:	f001 f8c3 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001344:	230b      	movs	r3, #11
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4810      	ldr	r0, [pc, #64]	; (8001390 <HAL_ETH_MspInit+0x194>)
 8001350:	f001 f8b2 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001354:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001366:	230b      	movs	r3, #11
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <HAL_ETH_MspInit+0x198>)
 8001372:	f001 f8a1 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3738      	adds	r7, #56	; 0x38
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40028000 	.word	0x40028000
 8001384:	58024400 	.word	0x58024400
 8001388:	58020800 	.word	0x58020800
 800138c:	58020000 	.word	0x58020000
 8001390:	58020400 	.word	0x58020400
 8001394:	58021800 	.word	0x58021800

08001398 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0bc      	sub	sp, #240	; 0xf0
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	22c0      	movs	r2, #192	; 0xc0
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f008 f969 	bl	8009690 <memset>
  if(hspi->Instance==SPI1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a38      	ldr	r2, [pc, #224]	; (80014a4 <HAL_SPI_MspInit+0x10c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d168      	bne.n	800149a <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80013c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fbf1 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80013e8:	f7ff fee4 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ec:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <HAL_SPI_MspInit+0x110>)
 80013ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013f2:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <HAL_SPI_MspInit+0x110>)
 80013f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_SPI_MspInit+0x110>)
 80013fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_SPI_MspInit+0x110>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	4a25      	ldr	r2, [pc, #148]	; (80014a8 <HAL_SPI_MspInit+0x110>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <HAL_SPI_MspInit+0x110>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <HAL_SPI_MspInit+0x110>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142e:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <HAL_SPI_MspInit+0x110>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_SPI_MspInit+0x110>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001446:	2360      	movs	r3, #96	; 0x60
 8001448:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145e:	2305      	movs	r3, #5
 8001460:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001468:	4619      	mov	r1, r3
 800146a:	4810      	ldr	r0, [pc, #64]	; (80014ac <HAL_SPI_MspInit+0x114>)
 800146c:	f001 f824 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001488:	2305      	movs	r3, #5
 800148a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001492:	4619      	mov	r1, r3
 8001494:	4806      	ldr	r0, [pc, #24]	; (80014b0 <HAL_SPI_MspInit+0x118>)
 8001496:	f001 f80f 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	37f0      	adds	r7, #240	; 0xf0
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40013000 	.word	0x40013000
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020000 	.word	0x58020000
 80014b0:	58020c00 	.word	0x58020c00

080014b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0ba      	sub	sp, #232	; 0xe8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	22c0      	movs	r2, #192	; 0xc0
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f008 f8db 	bl	8009690 <memset>
  if(huart->Instance==USART3)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a27      	ldr	r2, [pc, #156]	; (800157c <HAL_UART_MspInit+0xc8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d146      	bne.n	8001572 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014e4:	f04f 0202 	mov.w	r2, #2
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fb62 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001506:	f7ff fe55 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_UART_MspInit+0xcc>)
 800150c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <HAL_UART_MspInit+0xcc>)
 8001512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001516:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_UART_MspInit+0xcc>)
 800151c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_UART_MspInit+0xcc>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_UART_MspInit+0xcc>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_UART_MspInit+0xcc>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001546:	f44f 7340 	mov.w	r3, #768	; 0x300
 800154a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001560:	2307      	movs	r3, #7
 8001562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001566:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <HAL_UART_MspInit+0xd0>)
 800156e:	f000 ffa3 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	37e8      	adds	r7, #232	; 0xe8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40004800 	.word	0x40004800
 8001580:	58024400 	.word	0x58024400
 8001584:	58020c00 	.word	0x58020c00

08001588 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0ba      	sub	sp, #232	; 0xe8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	22c0      	movs	r2, #192	; 0xc0
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f008 f871 	bl	8009690 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a30      	ldr	r2, [pc, #192]	; (8001674 <HAL_PCD_MspInit+0xec>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d159      	bne.n	800166c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80015c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 faf7 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80015dc:	f7ff fdea 	bl	80011b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80015e0:	f001 fab8 	bl	8002b54 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_PCD_MspInit+0xf0>)
 80015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ea:	4a23      	ldr	r2, [pc, #140]	; (8001678 <HAL_PCD_MspInit+0xf0>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_PCD_MspInit+0xf0>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001602:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800161c:	230a      	movs	r3, #10
 800161e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001626:	4619      	mov	r1, r3
 8001628:	4814      	ldr	r0, [pc, #80]	; (800167c <HAL_PCD_MspInit+0xf4>)
 800162a:	f000 ff45 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800162e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001646:	4619      	mov	r1, r3
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <HAL_PCD_MspInit+0xf4>)
 800164a:	f000 ff35 	bl	80024b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_PCD_MspInit+0xf0>)
 8001650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001654:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_PCD_MspInit+0xf0>)
 8001656:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800165a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_PCD_MspInit+0xf0>)
 8001660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800166c:	bf00      	nop
 800166e:	37e8      	adds	r7, #232	; 0xe8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40080000 	.word	0x40080000
 8001678:	58024400 	.word	0x58024400
 800167c:	58020000 	.word	0x58020000

08001680 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	; 0x38
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	d842      	bhi.n	8001714 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800168e:	2200      	movs	r2, #0
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	2019      	movs	r0, #25
 8001694:	f000 fab4 	bl	8001c00 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001698:	2019      	movs	r0, #25
 800169a:	f000 facb 	bl	8001c34 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800169e:	4a23      	ldr	r2, [pc, #140]	; (800172c <HAL_InitTick+0xac>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_InitTick+0xb0>)
 80016a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016aa:	4a21      	ldr	r2, [pc, #132]	; (8001730 <HAL_InitTick+0xb0>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_InitTick+0xb0>)
 80016b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016c2:	f107 020c 	add.w	r2, r7, #12
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fa37 	bl	8003b40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016d2:	f002 fa1f 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 80016d6:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <HAL_InitTick+0xb4>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9b      	lsrs	r3, r3, #18
 80016e2:	3b01      	subs	r3, #1
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_InitTick+0xb8>)
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <HAL_InitTick+0xbc>)
 80016ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0xb8>)
 80016ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016f4:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_InitTick+0xb8>)
 80016f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_InitTick+0xb8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_InitTick+0xb8>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001706:	480c      	ldr	r0, [pc, #48]	; (8001738 <HAL_InitTick+0xb8>)
 8001708:	f004 fdcf 	bl	80062aa <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d107      	bne.n	8001722 <HAL_InitTick+0xa2>
 8001712:	e001      	b.n	8001718 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e005      	b.n	8001724 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001718:	4807      	ldr	r0, [pc, #28]	; (8001738 <HAL_InitTick+0xb8>)
 800171a:	f004 fe27 	bl	800636c <HAL_TIM_Base_Start_IT>
 800171e:	4603      	mov	r3, r0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3738      	adds	r7, #56	; 0x38
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	24000008 	.word	0x24000008
 8001730:	58024400 	.word	0x58024400
 8001734:	431bde83 	.word	0x431bde83
 8001738:	24000cd8 	.word	0x24000cd8
 800173c:	40010000 	.word	0x40010000

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001744:	e7fe      	b.n	8001744 <NMI_Handler+0x4>

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler+0x4>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <UsageFault_Handler+0x4>

0800175e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <TIM1_UP_IRQHandler+0x10>)
 8001772:	f004 fe73 	bl	800645c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	24000cd8 	.word	0x24000cd8

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f007 ffdc 	bl	800976c <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	24080000 	.word	0x24080000
 80017e0:	00000400 	.word	0x00000400
 80017e4:	24000d24 	.word	0x24000d24
 80017e8:	24004bc8 	.word	0x24004bc8

080017ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017f0:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <SystemInit+0xe4>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a36      	ldr	r2, [pc, #216]	; (80018d0 <SystemInit+0xe4>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <SystemInit+0xe8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	2b06      	cmp	r3, #6
 800180a:	d807      	bhi.n	800181c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <SystemInit+0xe8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 030f 	bic.w	r3, r3, #15
 8001814:	4a2f      	ldr	r2, [pc, #188]	; (80018d4 <SystemInit+0xe8>)
 8001816:	f043 0307 	orr.w	r3, r3, #7
 800181a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <SystemInit+0xec>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a2d      	ldr	r2, [pc, #180]	; (80018d8 <SystemInit+0xec>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <SystemInit+0xec>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800182e:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <SystemInit+0xec>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4929      	ldr	r1, [pc, #164]	; (80018d8 <SystemInit+0xec>)
 8001834:	4b29      	ldr	r3, [pc, #164]	; (80018dc <SystemInit+0xf0>)
 8001836:	4013      	ands	r3, r2
 8001838:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <SystemInit+0xe8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <SystemInit+0xe8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 030f 	bic.w	r3, r3, #15
 800184e:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <SystemInit+0xe8>)
 8001850:	f043 0307 	orr.w	r3, r3, #7
 8001854:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <SystemInit+0xec>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <SystemInit+0xec>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <SystemInit+0xec>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <SystemInit+0xec>)
 800186a:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <SystemInit+0xf4>)
 800186c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <SystemInit+0xec>)
 8001870:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <SystemInit+0xf8>)
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <SystemInit+0xec>)
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <SystemInit+0xfc>)
 8001878:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <SystemInit+0xec>)
 800187c:	2200      	movs	r2, #0
 800187e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <SystemInit+0xec>)
 8001882:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <SystemInit+0xfc>)
 8001884:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <SystemInit+0xec>)
 8001888:	2200      	movs	r2, #0
 800188a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <SystemInit+0xec>)
 800188e:	4a16      	ldr	r2, [pc, #88]	; (80018e8 <SystemInit+0xfc>)
 8001890:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <SystemInit+0xec>)
 8001894:	2200      	movs	r2, #0
 8001896:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <SystemInit+0xec>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <SystemInit+0xec>)
 800189e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <SystemInit+0xec>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <SystemInit+0x100>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <SystemInit+0x104>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018b6:	d202      	bcs.n	80018be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <SystemInit+0x108>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <SystemInit+0x10c>)
 80018c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00
 80018d4:	52002000 	.word	0x52002000
 80018d8:	58024400 	.word	0x58024400
 80018dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80018e0:	02020200 	.word	0x02020200
 80018e4:	01ff0000 	.word	0x01ff0000
 80018e8:	01010280 	.word	0x01010280
 80018ec:	5c001000 	.word	0x5c001000
 80018f0:	ffff0000 	.word	0xffff0000
 80018f4:	51008108 	.word	0x51008108
 80018f8:	52004000 	.word	0x52004000

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001900:	f7ff ff74 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001906:	490d      	ldr	r1, [pc, #52]	; (800193c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800191c:	4c0a      	ldr	r4, [pc, #40]	; (8001948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192a:	f007 ff25 	bl	8009778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff f93b 	bl	8000ba8 <main>
  bx  lr
 8001932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001934:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001938:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800193c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001940:	08009914 	.word	0x08009914
  ldr r2, =_sbss
 8001944:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001948:	24004bc8 	.word	0x24004bc8

0800194c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC3_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001956:	2003      	movs	r0, #3
 8001958:	f000 f947 	bl	8001bea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800195c:	f001 ff1a 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_Init+0x68>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	4913      	ldr	r1, [pc, #76]	; (80019bc <HAL_Init+0x6c>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_Init+0x68>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_Init+0x6c>)
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_Init+0x70>)
 8001992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_Init+0x74>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199a:	200f      	movs	r0, #15
 800199c:	f7ff fe70 	bl	8001680 <HAL_InitTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e002      	b.n	80019b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019aa:	f7ff fc09 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	58024400 	.word	0x58024400
 80019bc:	080098cc 	.word	0x080098cc
 80019c0:	24000004 	.word	0x24000004
 80019c4:	24000000 	.word	0x24000000

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2400000c 	.word	0x2400000c
 80019ec:	24000d28 	.word	0x24000d28

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	24000d28 	.word	0x24000d28

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2400000c 	.word	0x2400000c

08001a50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetREVID+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0c1b      	lsrs	r3, r3, #16
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	5c001000 	.word	0x5c001000

08001a68 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a78:	4904      	ldr	r1, [pc, #16]	; (8001a8c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	58000400 	.word	0x58000400

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	05fa0000 	.word	0x05fa0000

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <__NVIC_EnableIRQ+0x38>)
 8001b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ff4c 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0e:	f7ff ff63 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	6978      	ldr	r0, [r7, #20]
 8001c1a:	f7ff ffb3 	bl	8001b84 <NVIC_EncodePriority>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff82 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff56 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0e3      	b.n	8001e2a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d106      	bne.n	8001c7a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2223      	movs	r2, #35	; 0x23
 8001c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fac1 	bl	80011fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	4b6e      	ldr	r3, [pc, #440]	; (8001e34 <HAL_ETH_Init+0x1e4>)
 8001c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c80:	4a6c      	ldr	r2, [pc, #432]	; (8001e34 <HAL_ETH_Init+0x1e4>)
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c8a:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <HAL_ETH_Init+0x1e4>)
 8001c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7a1b      	ldrb	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d103      	bne.n	8001ca8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff fee1 	bl	8001a68 <HAL_SYSCFG_ETHInterfaceSelect>
 8001ca6:	e003      	b.n	8001cb0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ca8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001cac:	f7ff fedc 	bl	8001a68 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001cb0:	4b61      	ldr	r3, [pc, #388]	; (8001e38 <HAL_ETH_Init+0x1e8>)
 8001cb2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ccc:	f7ff fe90 	bl	80019f0 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001cd2:	e011      	b.n	8001cf8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001cd4:	f7ff fe8c 	bl	80019f0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ce2:	d909      	bls.n	8001cf8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	22e0      	movs	r2, #224	; 0xe0
 8001cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e098      	b.n	8001e2a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1e4      	bne.n	8001cd4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f89e 	bl	8001e4c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001d10:	f001 feba 	bl	8003a88 <HAL_RCC_GetHCLKFreq>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a49      	ldr	r2, [pc, #292]	; (8001e3c <HAL_ETH_Init+0x1ec>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	0c9a      	lsrs	r2, r3, #18
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3a01      	subs	r2, #1
 8001d24:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fa81 	bl	8002230 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d36:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001d3a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d4a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	22e0      	movs	r2, #224	; 0xe0
 8001d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e05d      	b.n	8001e2a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d76:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_ETH_Init+0x1f0>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6952      	ldr	r2, [r2, #20]
 8001d82:	0051      	lsls	r1, r2, #1
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d8e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fae9 	bl	800236a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fb2f 	bl	80023fc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	3305      	adds	r3, #5
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	021a      	lsls	r2, r3, #8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	3303      	adds	r3, #3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	061a      	lsls	r2, r3, #24
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	3302      	adds	r3, #2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ddc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001dea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001dec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_ETH_Init+0x1f4>)
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_ETH_Init+0x1f8>)
 8001e12:	430b      	orrs	r3, r1
 8001e14:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2210      	movs	r2, #16
 8001e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	58024400 	.word	0x58024400
 8001e38:	58000400 	.word	0x58000400
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	ffff8001 	.word	0xffff8001
 8001e44:	0c020060 	.word	0x0c020060
 8001e48:	0c20c000 	.word	0x0c20c000

08001e4c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e66:	f001 fe0f 	bl	8003a88 <HAL_RCC_GetHCLKFreq>
 8001e6a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d804      	bhi.n	8001e7e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e022      	b.n	8001ec4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4a16      	ldr	r2, [pc, #88]	; (8001edc <HAL_ETH_SetMDIOClockRange+0x90>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d204      	bcs.n	8001e90 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e019      	b.n	8001ec4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d915      	bls.n	8001ec4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d804      	bhi.n	8001eaa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e00c      	b.n	8001ec4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d804      	bhi.n	8001ebc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e003      	b.n	8001ec4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	02160ebf 	.word	0x02160ebf
 8001edc:	03938700 	.word	0x03938700
 8001ee0:	05f5e0ff 	.word	0x05f5e0ff
 8001ee4:	08f0d17f 	.word	0x08f0d17f
 8001ee8:	0ee6b27f 	.word	0x0ee6b27f

08001eec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001efe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	791b      	ldrb	r3, [r3, #4]
 8001f04:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001f06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	7b1b      	ldrb	r3, [r3, #12]
 8001f0c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001f0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	7b5b      	ldrb	r3, [r3, #13]
 8001f14:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	7b9b      	ldrb	r3, [r3, #14]
 8001f1c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	7bdb      	ldrb	r3, [r3, #15]
 8001f24:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f26:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	7c12      	ldrb	r2, [r2, #16]
 8001f2c:	2a00      	cmp	r2, #0
 8001f2e:	d102      	bne.n	8001f36 <ETH_SetMACConfig+0x4a>
 8001f30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f34:	e000      	b.n	8001f38 <ETH_SetMACConfig+0x4c>
 8001f36:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001f38:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	7c52      	ldrb	r2, [r2, #17]
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	d102      	bne.n	8001f48 <ETH_SetMACConfig+0x5c>
 8001f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f46:	e000      	b.n	8001f4a <ETH_SetMACConfig+0x5e>
 8001f48:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001f4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	7c9b      	ldrb	r3, [r3, #18]
 8001f50:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001f52:	431a      	orrs	r2, r3
               macconf->Speed |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001f58:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001f5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	7f1b      	ldrb	r3, [r3, #28]
 8001f64:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001f66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	7f5b      	ldrb	r3, [r3, #29]
 8001f6c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001f6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	7f92      	ldrb	r2, [r2, #30]
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d102      	bne.n	8001f7e <ETH_SetMACConfig+0x92>
 8001f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f7c:	e000      	b.n	8001f80 <ETH_SetMACConfig+0x94>
 8001f7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001f80:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	7fdb      	ldrb	r3, [r3, #31]
 8001f86:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001f88:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d102      	bne.n	8001f9a <ETH_SetMACConfig+0xae>
 8001f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f98:	e000      	b.n	8001f9c <ETH_SetMACConfig+0xb0>
 8001f9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001f9c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001fa2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001faa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001fac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b56      	ldr	r3, [pc, #344]	; (8002118 <ETH_SetMACConfig+0x22c>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	68f9      	ldr	r1, [r7, #12]
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fd6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001fd8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fe0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001fe2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001fea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001fec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	d102      	bne.n	8001ffe <ETH_SetMACConfig+0x112>
 8001ff8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ffc:	e000      	b.n	8002000 <ETH_SetMACConfig+0x114>
 8001ffe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002000:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4b42      	ldr	r3, [pc, #264]	; (800211c <ETH_SetMACConfig+0x230>)
 8002012:	4013      	ands	r3, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	68f9      	ldr	r1, [r7, #12]
 800201a:	430b      	orrs	r3, r1
 800201c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002024:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <ETH_SetMACConfig+0x234>)
 8002036:	4013      	ands	r3, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	68f9      	ldr	r1, [r7, #12]
 800203e:	430b      	orrs	r3, r1
 8002040:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002048:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800204e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002056:	2a00      	cmp	r2, #0
 8002058:	d101      	bne.n	800205e <ETH_SetMACConfig+0x172>
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	e000      	b.n	8002060 <ETH_SetMACConfig+0x174>
 800205e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002060:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002066:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002072:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002076:	4013      	ands	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	68f9      	ldr	r1, [r7, #12]
 800207e:	430b      	orrs	r3, r1
 8002080:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002088:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002090:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	f023 0103 	bic.w	r1, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80020b6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80020d2:	2a00      	cmp	r2, #0
 80020d4:	d101      	bne.n	80020da <ETH_SetMACConfig+0x1ee>
 80020d6:	2240      	movs	r2, #64	; 0x40
 80020d8:	e000      	b.n	80020dc <ETH_SetMACConfig+0x1f0>
 80020da:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80020dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80020e4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80020e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80020ee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80020fc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	430a      	orrs	r2, r1
 8002108:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	00048083 	.word	0x00048083
 800211c:	c0f88000 	.word	0xc0f88000
 8002120:	fffffef0 	.word	0xfffffef0

08002124 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b38      	ldr	r3, [pc, #224]	; (800221c <ETH_SetDMAConfig+0xf8>)
 800213a:	4013      	ands	r3, r2
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	6811      	ldr	r1, [r2, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	430b      	orrs	r3, r1
 8002146:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800214a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	791b      	ldrb	r3, [r3, #4]
 8002150:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002156:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	7b1b      	ldrb	r3, [r3, #12]
 800215c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <ETH_SetDMAConfig+0xfc>)
 800216e:	4013      	ands	r3, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	430b      	orrs	r3, r1
 8002178:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800217c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	7b5b      	ldrb	r3, [r3, #13]
 8002182:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002188:	4313      	orrs	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002194:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <ETH_SetDMAConfig+0x100>)
 800219a:	4013      	ands	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	68f9      	ldr	r1, [r7, #12]
 80021a2:	430b      	orrs	r3, r1
 80021a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021a8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	7d1b      	ldrb	r3, [r3, #20]
 80021b4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80021b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	7f5b      	ldrb	r3, [r3, #29]
 80021bc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <ETH_SetDMAConfig+0x104>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	430b      	orrs	r3, r1
 80021da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021de:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	7f1b      	ldrb	r3, [r3, #28]
 80021e6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <ETH_SetDMAConfig+0x108>)
 80021fe:	4013      	ands	r3, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	430b      	orrs	r3, r1
 8002208:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800220c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	ffff87fd 	.word	0xffff87fd
 8002220:	ffff2ffe 	.word	0xffff2ffe
 8002224:	fffec000 	.word	0xfffec000
 8002228:	ffc0efef 	.word	0xffc0efef
 800222c:	7fc0ffff 	.word	0x7fc0ffff

08002230 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b0a4      	sub	sp, #144	; 0x90
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800223e:	2300      	movs	r3, #0
 8002240:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800225a:	2301      	movs	r3, #1
 800225c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002266:	2301      	movs	r3, #1
 8002268:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800226c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002270:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002278:	2300      	movs	r3, #0
 800227a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002288:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800228c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002294:	2300      	movs	r3, #0
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002298:	2301      	movs	r3, #1
 800229a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80022aa:	2300      	movs	r3, #0
 80022ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80022b2:	2300      	movs	r3, #0
 80022b4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80022c8:	2320      	movs	r3, #32
 80022ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80022da:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022e4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80022ec:	2302      	movs	r3, #2
 80022ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002304:	2301      	movs	r3, #1
 8002306:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800230a:	2300      	movs	r3, #0
 800230c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002318:	4619      	mov	r1, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fde6 	bl	8001eec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002320:	2301      	movs	r3, #1
 8002322:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002324:	2301      	movs	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800233a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800233e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002344:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002348:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002350:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fee1 	bl	8002124 <ETH_SetDMAConfig>
}
 8002362:	bf00      	nop
 8002364:	3790      	adds	r7, #144	; 0x90
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e01d      	b.n	80023b4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68d9      	ldr	r1, [r3, #12]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2200      	movs	r2, #0
 8002394:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	3206      	adds	r2, #6
 80023aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3301      	adds	r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d9de      	bls.n	8002378 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c8:	461a      	mov	r2, r3
 80023ca:	2303      	movs	r3, #3
 80023cc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e023      	b.n	8002452 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	3212      	adds	r2, #18
 8002448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3301      	adds	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d9d8      	bls.n	800240a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800247e:	461a      	mov	r2, r3
 8002480:	2303      	movs	r3, #3
 8002482:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002492:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80024aa:	bf00      	nop
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024c6:	4b89      	ldr	r3, [pc, #548]	; (80026ec <HAL_GPIO_Init+0x234>)
 80024c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024ca:	e194      	b.n	80027f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8186 	beq.w	80027f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d005      	beq.n	80024fc <HAL_GPIO_Init+0x44>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d130      	bne.n	800255e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002532:	2201      	movs	r2, #1
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f003 0201 	and.w	r2, r3, #1
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b03      	cmp	r3, #3
 8002568:	d017      	beq.n	800259a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d123      	bne.n	80025ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	69b9      	ldr	r1, [r7, #24]
 80025ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0203 	and.w	r2, r3, #3
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80e0 	beq.w	80027f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002630:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <HAL_GPIO_Init+0x238>)
 8002632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002636:	4a2e      	ldr	r2, [pc, #184]	; (80026f0 <HAL_GPIO_Init+0x238>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <HAL_GPIO_Init+0x238>)
 8002642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800264e:	4a29      	ldr	r2, [pc, #164]	; (80026f4 <HAL_GPIO_Init+0x23c>)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <HAL_GPIO_Init+0x240>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d052      	beq.n	8002720 <HAL_GPIO_Init+0x268>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1f      	ldr	r2, [pc, #124]	; (80026fc <HAL_GPIO_Init+0x244>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d031      	beq.n	80026e6 <HAL_GPIO_Init+0x22e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1e      	ldr	r2, [pc, #120]	; (8002700 <HAL_GPIO_Init+0x248>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02b      	beq.n	80026e2 <HAL_GPIO_Init+0x22a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <HAL_GPIO_Init+0x24c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d025      	beq.n	80026de <HAL_GPIO_Init+0x226>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <HAL_GPIO_Init+0x250>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d01f      	beq.n	80026da <HAL_GPIO_Init+0x222>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1b      	ldr	r2, [pc, #108]	; (800270c <HAL_GPIO_Init+0x254>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d019      	beq.n	80026d6 <HAL_GPIO_Init+0x21e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1a      	ldr	r2, [pc, #104]	; (8002710 <HAL_GPIO_Init+0x258>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_GPIO_Init+0x21a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_GPIO_Init+0x25c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00d      	beq.n	80026ce <HAL_GPIO_Init+0x216>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a18      	ldr	r2, [pc, #96]	; (8002718 <HAL_GPIO_Init+0x260>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x212>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a17      	ldr	r2, [pc, #92]	; (800271c <HAL_GPIO_Init+0x264>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_GPIO_Init+0x20e>
 80026c2:	2309      	movs	r3, #9
 80026c4:	e02d      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026c6:	230a      	movs	r3, #10
 80026c8:	e02b      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026ca:	2308      	movs	r3, #8
 80026cc:	e029      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026ce:	2307      	movs	r3, #7
 80026d0:	e027      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026d2:	2306      	movs	r3, #6
 80026d4:	e025      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026d6:	2305      	movs	r3, #5
 80026d8:	e023      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026da:	2304      	movs	r3, #4
 80026dc:	e021      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026de:	2303      	movs	r3, #3
 80026e0:	e01f      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e01d      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e01b      	b.n	8002722 <HAL_GPIO_Init+0x26a>
 80026ea:	bf00      	nop
 80026ec:	58000080 	.word	0x58000080
 80026f0:	58024400 	.word	0x58024400
 80026f4:	58000400 	.word	0x58000400
 80026f8:	58020000 	.word	0x58020000
 80026fc:	58020400 	.word	0x58020400
 8002700:	58020800 	.word	0x58020800
 8002704:	58020c00 	.word	0x58020c00
 8002708:	58021000 	.word	0x58021000
 800270c:	58021400 	.word	0x58021400
 8002710:	58021800 	.word	0x58021800
 8002714:	58021c00 	.word	0x58021c00
 8002718:	58022000 	.word	0x58022000
 800271c:	58022400 	.word	0x58022400
 8002720:	2300      	movs	r3, #0
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	f002 0203 	and.w	r2, r2, #3
 8002728:	0092      	lsls	r2, r2, #2
 800272a:	4093      	lsls	r3, r2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002732:	4938      	ldr	r1, [pc, #224]	; (8002814 <HAL_GPIO_Init+0x35c>)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	3302      	adds	r3, #2
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	f47f ae63 	bne.w	80024cc <HAL_GPIO_Init+0x14>
  }
}
 8002806:	bf00      	nop
 8002808:	bf00      	nop
 800280a:	3724      	adds	r7, #36	; 0x24
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	58000400 	.word	0x58000400

08002818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
 8002824:	4613      	mov	r3, r2
 8002826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002828:	787b      	ldrb	r3, [r7, #1]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	041a      	lsls	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	619a      	str	r2, [r3, #24]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800285c:	887a      	ldrh	r2, [r7, #2]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4013      	ands	r3, r2
 8002862:	041a      	lsls	r2, r3, #16
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43d9      	mvns	r1, r3
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	400b      	ands	r3, r1
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af02      	add	r7, sp, #8
 8002884:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0fe      	b.n	8002a8e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7fe fe6f 	bl	8001588 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2203      	movs	r2, #3
 80028ae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f005 f912 	bl	8007ae0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7c1a      	ldrb	r2, [r3, #16]
 80028c4:	f88d 2000 	strb.w	r2, [sp]
 80028c8:	3304      	adds	r3, #4
 80028ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028cc:	f005 f896 	bl	80079fc <USB_CoreInit>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e0d5      	b.n	8002a8e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f005 f90a 	bl	8007b02 <USB_SetCurrentMode>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0c6      	b.n	8002a8e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e04a      	b.n	800299c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	3315      	adds	r3, #21
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3314      	adds	r3, #20
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	b298      	uxth	r0, r3
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	332e      	adds	r3, #46	; 0x2e
 8002942:	4602      	mov	r2, r0
 8002944:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3318      	adds	r3, #24
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	331c      	adds	r3, #28
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3320      	adds	r3, #32
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3324      	adds	r3, #36	; 0x24
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	3301      	adds	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	791b      	ldrb	r3, [r3, #4]
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d3af      	bcc.n	8002906 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	e044      	b.n	8002a36 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f203 2355 	addw	r3, r3, #597	; 0x255
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	3301      	adds	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	791b      	ldrb	r3, [r3, #4]
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d3b5      	bcc.n	80029ac <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7c1a      	ldrb	r2, [r3, #16]
 8002a48:	f88d 2000 	strb.w	r2, [sp]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a50:	f005 f8a4 	bl	8007b9c <USB_DevInit>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e013      	b.n	8002a8e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7b1b      	ldrb	r3, [r3, #12]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d102      	bne.n	8002a82 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f80b 	bl	8002a98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f005 fa5f 	bl	8007f4a <USB_DevDisconnect>

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_PCDEx_ActivateLPM+0x44>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	10000003 	.word	0x10000003

08002ae0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d00a      	beq.n	8002b0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002af4:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d001      	beq.n	8002b06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e01f      	b.n	8002b46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e01d      	b.n	8002b46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f023 0207 	bic.w	r2, r3, #7
 8002b12:	490f      	ldr	r1, [pc, #60]	; (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b1a:	f7fe ff69 	bl	80019f0 <HAL_GetTick>
 8002b1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b20:	e009      	b.n	8002b36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b22:	f7fe ff65 	bl	80019f0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b30:	d901      	bls.n	8002b36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e007      	b.n	8002b46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b42:	d1ee      	bne.n	8002b22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	58024800 	.word	0x58024800

08002b54 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	58024800 	.word	0x58024800

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08c      	sub	sp, #48	; 0x30
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f000 bc48 	b.w	8003418 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8088 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b96:	4b99      	ldr	r3, [pc, #612]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ba0:	4b96      	ldr	r3, [pc, #600]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d007      	beq.n	8002bbc <HAL_RCC_OscConfig+0x48>
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	2b18      	cmp	r3, #24
 8002bb0:	d111      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x62>
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	4b8f      	ldr	r3, [pc, #572]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d06d      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x130>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d169      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f000 bc21 	b.w	8003418 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x7a>
 8002be0:	4b86      	ldr	r3, [pc, #536]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a85      	ldr	r2, [pc, #532]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e02e      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x9c>
 8002bf6:	4b81      	ldr	r3, [pc, #516]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a80      	ldr	r2, [pc, #512]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b7e      	ldr	r3, [pc, #504]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7d      	ldr	r2, [pc, #500]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0xc0>
 8002c1a:	4b78      	ldr	r3, [pc, #480]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a77      	ldr	r2, [pc, #476]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b75      	ldr	r3, [pc, #468]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a74      	ldr	r2, [pc, #464]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002c34:	4b71      	ldr	r3, [pc, #452]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a70      	ldr	r2, [pc, #448]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b6e      	ldr	r3, [pc, #440]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6d      	ldr	r2, [pc, #436]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fecc 	bl	80019f0 <HAL_GetTick>
 8002c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fec8 	bl	80019f0 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e3d4      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xe8>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe feb8 	bl	80019f0 <HAL_GetTick>
 8002c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe feb4 	bl	80019f0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e3c0      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c96:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x110>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80ca 	beq.w	8002e48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb4:	4b51      	ldr	r3, [pc, #324]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cbe:	4b4f      	ldr	r3, [pc, #316]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_RCC_OscConfig+0x166>
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2b18      	cmp	r3, #24
 8002cce:	d156      	bne.n	8002d7e <HAL_RCC_OscConfig+0x20a>
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d151      	bne.n	8002d7e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cda:	4b48      	ldr	r3, [pc, #288]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x17e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e392      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cf2:	4b42      	ldr	r3, [pc, #264]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 0219 	bic.w	r2, r3, #25
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	493f      	ldr	r1, [pc, #252]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe fe74 	bl	80019f0 <HAL_GetTick>
 8002d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fe70 	bl	80019f0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e37c      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1e:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2a:	f7fe fe91 	bl	8001a50 <HAL_GetREVID>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d817      	bhi.n	8002d68 <HAL_RCC_OscConfig+0x1f4>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d108      	bne.n	8002d52 <HAL_RCC_OscConfig+0x1de>
 8002d40:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d48:	4a2c      	ldr	r2, [pc, #176]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d50:	e07a      	b.n	8002e48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	031b      	lsls	r3, r3, #12
 8002d60:	4926      	ldr	r1, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d66:	e06f      	b.n	8002e48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	4921      	ldr	r1, [pc, #132]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7c:	e064      	b.n	8002e48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d047      	beq.n	8002e16 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 0219 	bic.w	r2, r3, #25
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	491a      	ldr	r1, [pc, #104]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fe2a 	bl	80019f0 <HAL_GetTick>
 8002d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe fe26 	bl	80019f0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e332      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbe:	f7fe fe47 	bl	8001a50 <HAL_GetREVID>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d819      	bhi.n	8002e00 <HAL_RCC_OscConfig+0x28c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d108      	bne.n	8002de6 <HAL_RCC_OscConfig+0x272>
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ddc:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de2:	6053      	str	r3, [r2, #4]
 8002de4:	e030      	b.n	8002e48 <HAL_RCC_OscConfig+0x2d4>
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	031b      	lsls	r3, r3, #12
 8002df4:	4901      	ldr	r1, [pc, #4]	; (8002dfc <HAL_RCC_OscConfig+0x288>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
 8002dfa:	e025      	b.n	8002e48 <HAL_RCC_OscConfig+0x2d4>
 8002dfc:	58024400 	.word	0x58024400
 8002e00:	4b9a      	ldr	r3, [pc, #616]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	4997      	ldr	r1, [pc, #604]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
 8002e14:	e018      	b.n	8002e48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e16:	4b95      	ldr	r3, [pc, #596]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a94      	ldr	r2, [pc, #592]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe fde5 	bl	80019f0 <HAL_GetTick>
 8002e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7fe fde1 	bl	80019f0 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e2ed      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e3c:	4b8b      	ldr	r3, [pc, #556]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a9 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e56:	4b85      	ldr	r3, [pc, #532]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e60:	4b82      	ldr	r3, [pc, #520]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d007      	beq.n	8002e7c <HAL_RCC_OscConfig+0x308>
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b18      	cmp	r3, #24
 8002e70:	d13a      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x374>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d135      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e7c:	4b7b      	ldr	r3, [pc, #492]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_OscConfig+0x320>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	2b80      	cmp	r3, #128	; 0x80
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e2c1      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e94:	f7fe fddc 	bl	8001a50 <HAL_GetREVID>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d817      	bhi.n	8002ed2 <HAL_RCC_OscConfig+0x35e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d108      	bne.n	8002ebc <HAL_RCC_OscConfig+0x348>
 8002eaa:	4b70      	ldr	r3, [pc, #448]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002eb2:	4a6e      	ldr	r2, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eb8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eba:	e075      	b.n	8002fa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ebc:	4b6b      	ldr	r3, [pc, #428]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	069b      	lsls	r3, r3, #26
 8002eca:	4968      	ldr	r1, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ed0:	e06a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ed2:	4b66      	ldr	r3, [pc, #408]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	061b      	lsls	r3, r3, #24
 8002ee0:	4962      	ldr	r1, [pc, #392]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ee6:	e05f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d042      	beq.n	8002f76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ef0:	4b5e      	ldr	r3, [pc, #376]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a5d      	ldr	r2, [pc, #372]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fd78 	bl	80019f0 <HAL_GetTick>
 8002f00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f04:	f7fe fd74 	bl	80019f0 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e280      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f16:	4b55      	ldr	r3, [pc, #340]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f22:	f7fe fd95 	bl	8001a50 <HAL_GetREVID>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d817      	bhi.n	8002f60 <HAL_RCC_OscConfig+0x3ec>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d108      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3d6>
 8002f38:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f40:	4a4a      	ldr	r2, [pc, #296]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002f42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f46:	6053      	str	r3, [r2, #4]
 8002f48:	e02e      	b.n	8002fa8 <HAL_RCC_OscConfig+0x434>
 8002f4a:	4b48      	ldr	r3, [pc, #288]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	069b      	lsls	r3, r3, #26
 8002f58:	4944      	ldr	r1, [pc, #272]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
 8002f5e:	e023      	b.n	8002fa8 <HAL_RCC_OscConfig+0x434>
 8002f60:	4b42      	ldr	r3, [pc, #264]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	493f      	ldr	r1, [pc, #252]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60cb      	str	r3, [r1, #12]
 8002f74:	e018      	b.n	8002fa8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a3c      	ldr	r2, [pc, #240]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe fd35 	bl	80019f0 <HAL_GetTick>
 8002f86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fd31 	bl	80019f0 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e23d      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f9c:	4b33      	ldr	r3, [pc, #204]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d036      	beq.n	8003022 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d019      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbc:	4b2b      	ldr	r3, [pc, #172]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc0:	4a2a      	ldr	r2, [pc, #168]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe fd12 	bl	80019f0 <HAL_GetTick>
 8002fcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fd0e 	bl	80019f0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e21a      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x45c>
 8002fee:	e018      	b.n	8003022 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff4:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7fe fcf8 	bl	80019f0 <HAL_GetTick>
 8003000:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003004:	f7fe fcf4 	bl	80019f0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e200      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8003018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d039      	beq.n	80030a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01c      	beq.n	8003070 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a0c      	ldr	r2, [pc, #48]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 800303c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003040:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003042:	f7fe fcd5 	bl	80019f0 <HAL_GetTick>
 8003046:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800304a:	f7fe fcd1 	bl	80019f0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e1dd      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x4d6>
 8003068:	e01b      	b.n	80030a2 <HAL_RCC_OscConfig+0x52e>
 800306a:	bf00      	nop
 800306c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003070:	4b9b      	ldr	r3, [pc, #620]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a9a      	ldr	r2, [pc, #616]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800307a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800307c:	f7fe fcb8 	bl	80019f0 <HAL_GetTick>
 8003080:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003084:	f7fe fcb4 	bl	80019f0 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e1c0      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003096:	4b92      	ldr	r3, [pc, #584]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8081 	beq.w	80031b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030b0:	4b8c      	ldr	r3, [pc, #560]	; (80032e4 <HAL_RCC_OscConfig+0x770>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a8b      	ldr	r2, [pc, #556]	; (80032e4 <HAL_RCC_OscConfig+0x770>)
 80030b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030bc:	f7fe fc98 	bl	80019f0 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c4:	f7fe fc94 	bl	80019f0 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	; 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1a0      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d6:	4b83      	ldr	r3, [pc, #524]	; (80032e4 <HAL_RCC_OscConfig+0x770>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d106      	bne.n	80030f8 <HAL_RCC_OscConfig+0x584>
 80030ea:	4b7d      	ldr	r3, [pc, #500]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	4a7c      	ldr	r2, [pc, #496]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
 80030f6:	e02d      	b.n	8003154 <HAL_RCC_OscConfig+0x5e0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10c      	bne.n	800311a <HAL_RCC_OscConfig+0x5a6>
 8003100:	4b77      	ldr	r3, [pc, #476]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a76      	ldr	r2, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	4b74      	ldr	r3, [pc, #464]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a73      	ldr	r2, [pc, #460]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003112:	f023 0304 	bic.w	r3, r3, #4
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
 8003118:	e01c      	b.n	8003154 <HAL_RCC_OscConfig+0x5e0>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x5c8>
 8003122:	4b6f      	ldr	r3, [pc, #444]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4a6e      	ldr	r2, [pc, #440]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	6713      	str	r3, [r2, #112]	; 0x70
 800312e:	4b6c      	ldr	r3, [pc, #432]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a6b      	ldr	r2, [pc, #428]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0x5e0>
 800313c:	4b68      	ldr	r3, [pc, #416]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a67      	ldr	r2, [pc, #412]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
 8003148:	4b65      	ldr	r3, [pc, #404]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a64      	ldr	r2, [pc, #400]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 800314e:	f023 0304 	bic.w	r3, r3, #4
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d015      	beq.n	8003188 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fc48 	bl	80019f0 <HAL_GetTick>
 8003160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003162:	e00a      	b.n	800317a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7fe fc44 	bl	80019f0 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e14e      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800317a:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0ee      	beq.n	8003164 <HAL_RCC_OscConfig+0x5f0>
 8003186:	e014      	b.n	80031b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe fc32 	bl	80019f0 <HAL_GetTick>
 800318c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fe fc2e 	bl	80019f0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e138      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031a6:	4b4e      	ldr	r3, [pc, #312]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ee      	bne.n	8003190 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 812d 	beq.w	8003416 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031bc:	4b48      	ldr	r3, [pc, #288]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031c4:	2b18      	cmp	r3, #24
 80031c6:	f000 80bd 	beq.w	8003344 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	f040 809e 	bne.w	8003310 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d4:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a41      	ldr	r2, [pc, #260]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80031da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fc06 	bl	80019f0 <HAL_GetTick>
 80031e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fc02 	bl	80019f0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e10e      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031fa:	4b39      	ldr	r3, [pc, #228]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003206:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320a:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <HAL_RCC_OscConfig+0x774>)
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003216:	0112      	lsls	r2, r2, #4
 8003218:	430a      	orrs	r2, r1
 800321a:	4931      	ldr	r1, [pc, #196]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 800321c:	4313      	orrs	r3, r2
 800321e:	628b      	str	r3, [r1, #40]	; 0x28
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	3b01      	subs	r3, #1
 8003226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	3b01      	subs	r3, #1
 8003230:	025b      	lsls	r3, r3, #9
 8003232:	b29b      	uxth	r3, r3
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	3b01      	subs	r3, #1
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003248:	3b01      	subs	r3, #1
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003250:	4923      	ldr	r1, [pc, #140]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003256:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003262:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003266:	4b21      	ldr	r3, [pc, #132]	; (80032ec <HAL_RCC_OscConfig+0x778>)
 8003268:	4013      	ands	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800326e:	00d2      	lsls	r2, r2, #3
 8003270:	491b      	ldr	r1, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003272:	4313      	orrs	r3, r2
 8003274:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f023 020c 	bic.w	r2, r3, #12
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4917      	ldr	r1, [pc, #92]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003288:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	f023 0202 	bic.w	r2, r3, #2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	4912      	ldr	r1, [pc, #72]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_RCC_OscConfig+0x76c>)
 80032d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fe fb8b 	bl	80019f0 <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032dc:	e011      	b.n	8003302 <HAL_RCC_OscConfig+0x78e>
 80032de:	bf00      	nop
 80032e0:	58024400 	.word	0x58024400
 80032e4:	58024800 	.word	0x58024800
 80032e8:	fffffc0c 	.word	0xfffffc0c
 80032ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fe fb7e 	bl	80019f0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e08a      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x77c>
 800330e:	e082      	b.n	8003416 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b43      	ldr	r3, [pc, #268]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a42      	ldr	r2, [pc, #264]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 8003316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe fb68 	bl	80019f0 <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe fb64 	bl	80019f0 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e070      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003336:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x7b0>
 8003342:	e068      	b.n	8003416 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003344:	4b36      	ldr	r3, [pc, #216]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800334a:	4b35      	ldr	r3, [pc, #212]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	2b01      	cmp	r3, #1
 8003356:	d031      	beq.n	80033bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f003 0203 	and.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d12a      	bne.n	80033bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d122      	bne.n	80033bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d11a      	bne.n	80033bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	0a5b      	lsrs	r3, r3, #9
 800338a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d111      	bne.n	80033bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	0c1b      	lsrs	r3, r3, #16
 800339c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d108      	bne.n	80033bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	0e1b      	lsrs	r3, r3, #24
 80033ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e02b      	b.n	8003418 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033c0:	4b17      	ldr	r3, [pc, #92]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	08db      	lsrs	r3, r3, #3
 80033c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d01f      	beq.n	8003416 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	4a11      	ldr	r2, [pc, #68]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033e2:	f7fe fb05 	bl	80019f0 <HAL_GetTick>
 80033e6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033e8:	bf00      	nop
 80033ea:	f7fe fb01 	bl	80019f0 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d0f9      	beq.n	80033ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 80033f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_RCC_OscConfig+0x8b0>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003402:	00d2      	lsls	r2, r2, #3
 8003404:	4906      	ldr	r1, [pc, #24]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 8003406:	4313      	orrs	r3, r2
 8003408:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	4a04      	ldr	r2, [pc, #16]	; (8003420 <HAL_RCC_OscConfig+0x8ac>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3730      	adds	r7, #48	; 0x30
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	58024400 	.word	0x58024400
 8003424:	ffff0007 	.word	0xffff0007

08003428 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e19c      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b8a      	ldr	r3, [pc, #552]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d910      	bls.n	800346c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b87      	ldr	r3, [pc, #540]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 020f 	bic.w	r2, r3, #15
 8003452:	4985      	ldr	r1, [pc, #532]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b83      	ldr	r3, [pc, #524]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e184      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d010      	beq.n	800349a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	4b7b      	ldr	r3, [pc, #492]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003484:	429a      	cmp	r2, r3
 8003486:	d908      	bls.n	800349a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003488:	4b78      	ldr	r3, [pc, #480]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	4975      	ldr	r1, [pc, #468]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003496:	4313      	orrs	r3, r2
 8003498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d010      	beq.n	80034c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	4b70      	ldr	r3, [pc, #448]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d908      	bls.n	80034c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034b6:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	496a      	ldr	r1, [pc, #424]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d010      	beq.n	80034f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699a      	ldr	r2, [r3, #24]
 80034d8:	4b64      	ldr	r3, [pc, #400]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d908      	bls.n	80034f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034e4:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	495e      	ldr	r1, [pc, #376]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d010      	beq.n	8003524 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69da      	ldr	r2, [r3, #28]
 8003506:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800350e:	429a      	cmp	r2, r3
 8003510:	d908      	bls.n	8003524 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003512:	4b56      	ldr	r3, [pc, #344]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	4953      	ldr	r1, [pc, #332]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003520:	4313      	orrs	r3, r2
 8003522:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	4b4d      	ldr	r3, [pc, #308]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	429a      	cmp	r2, r3
 800353e:	d908      	bls.n	8003552 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003540:	4b4a      	ldr	r3, [pc, #296]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f023 020f 	bic.w	r2, r3, #15
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4947      	ldr	r1, [pc, #284]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800354e:	4313      	orrs	r3, r2
 8003550:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d055      	beq.n	800360a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800355e:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4940      	ldr	r1, [pc, #256]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800356c:	4313      	orrs	r3, r2
 800356e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d107      	bne.n	8003588 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003578:	4b3c      	ldr	r3, [pc, #240]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d121      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0f6      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003590:	4b36      	ldr	r3, [pc, #216]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d115      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0ea      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035a8:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0de      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035b8:	4b2c      	ldr	r3, [pc, #176]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0d6      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f023 0207 	bic.w	r2, r3, #7
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4925      	ldr	r1, [pc, #148]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035da:	f7fe fa09 	bl	80019f0 <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e2:	f7fe fa05 	bl	80019f0 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0be      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	429a      	cmp	r2, r3
 8003608:	d1eb      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d010      	beq.n	8003638 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	4b14      	ldr	r3, [pc, #80]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	429a      	cmp	r2, r3
 8003624:	d208      	bcs.n	8003638 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f023 020f 	bic.w	r2, r3, #15
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	490e      	ldr	r1, [pc, #56]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003634:	4313      	orrs	r3, r2
 8003636:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d214      	bcs.n	8003670 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 020f 	bic.w	r2, r3, #15
 800364e:	4906      	ldr	r1, [pc, #24]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e086      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
 8003668:	52002000 	.word	0x52002000
 800366c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	4b3f      	ldr	r3, [pc, #252]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003688:	429a      	cmp	r2, r3
 800368a:	d208      	bcs.n	800369e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800368c:	4b3c      	ldr	r3, [pc, #240]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	4939      	ldr	r1, [pc, #228]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 800369a:	4313      	orrs	r3, r2
 800369c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	4b34      	ldr	r3, [pc, #208]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d208      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	492e      	ldr	r1, [pc, #184]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	4b28      	ldr	r3, [pc, #160]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d208      	bcs.n	80036fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	4922      	ldr	r1, [pc, #136]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d010      	beq.n	8003728 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003712:	429a      	cmp	r2, r3
 8003714:	d208      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003716:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4917      	ldr	r1, [pc, #92]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 8003724:	4313      	orrs	r3, r2
 8003726:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003728:	f000 f834 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	4912      	ldr	r1, [pc, #72]	; (8003784 <HAL_RCC_ClockConfig+0x35c>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
 8003744:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <HAL_RCC_ClockConfig+0x35c>)
 8003750:	5cd3      	ldrb	r3, [r2, r3]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
 800375c:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <HAL_RCC_ClockConfig+0x360>)
 800375e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <HAL_RCC_ClockConfig+0x364>)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_RCC_ClockConfig+0x368>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd ff88 	bl	8001680 <HAL_InitTick>
 8003770:	4603      	mov	r3, r0
 8003772:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	58024400 	.word	0x58024400
 8003784:	080098cc 	.word	0x080098cc
 8003788:	24000004 	.word	0x24000004
 800378c:	24000000 	.word	0x24000000
 8003790:	24000008 	.word	0x24000008

08003794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800379a:	4bb3      	ldr	r3, [pc, #716]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037a2:	2b18      	cmp	r3, #24
 80037a4:	f200 8155 	bhi.w	8003a52 <HAL_RCC_GetSysClockFreq+0x2be>
 80037a8:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	08003815 	.word	0x08003815
 80037b4:	08003a53 	.word	0x08003a53
 80037b8:	08003a53 	.word	0x08003a53
 80037bc:	08003a53 	.word	0x08003a53
 80037c0:	08003a53 	.word	0x08003a53
 80037c4:	08003a53 	.word	0x08003a53
 80037c8:	08003a53 	.word	0x08003a53
 80037cc:	08003a53 	.word	0x08003a53
 80037d0:	0800383b 	.word	0x0800383b
 80037d4:	08003a53 	.word	0x08003a53
 80037d8:	08003a53 	.word	0x08003a53
 80037dc:	08003a53 	.word	0x08003a53
 80037e0:	08003a53 	.word	0x08003a53
 80037e4:	08003a53 	.word	0x08003a53
 80037e8:	08003a53 	.word	0x08003a53
 80037ec:	08003a53 	.word	0x08003a53
 80037f0:	08003841 	.word	0x08003841
 80037f4:	08003a53 	.word	0x08003a53
 80037f8:	08003a53 	.word	0x08003a53
 80037fc:	08003a53 	.word	0x08003a53
 8003800:	08003a53 	.word	0x08003a53
 8003804:	08003a53 	.word	0x08003a53
 8003808:	08003a53 	.word	0x08003a53
 800380c:	08003a53 	.word	0x08003a53
 8003810:	08003847 	.word	0x08003847
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003814:	4b94      	ldr	r3, [pc, #592]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003820:	4b91      	ldr	r3, [pc, #580]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	08db      	lsrs	r3, r3, #3
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	4a90      	ldr	r2, [pc, #576]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
 8003830:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003832:	e111      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003834:	4b8d      	ldr	r3, [pc, #564]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003836:	61bb      	str	r3, [r7, #24]
      break;
 8003838:	e10e      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800383a:	4b8d      	ldr	r3, [pc, #564]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800383c:	61bb      	str	r3, [r7, #24]
      break;
 800383e:	e10b      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003840:	4b8c      	ldr	r3, [pc, #560]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003842:	61bb      	str	r3, [r7, #24]
      break;
 8003844:	e108      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003846:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003850:	4b85      	ldr	r3, [pc, #532]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800385a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800385c:	4b82      	ldr	r3, [pc, #520]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003866:	4b80      	ldr	r3, [pc, #512]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386a:	08db      	lsrs	r3, r3, #3
 800386c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80e1 	beq.w	8003a4c <HAL_RCC_GetSysClockFreq+0x2b8>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2b02      	cmp	r3, #2
 800388e:	f000 8083 	beq.w	8003998 <HAL_RCC_GetSysClockFreq+0x204>
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b02      	cmp	r3, #2
 8003896:	f200 80a1 	bhi.w	80039dc <HAL_RCC_GetSysClockFreq+0x248>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x114>
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d056      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038a6:	e099      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038a8:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d02d      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038b4:	4b6c      	ldr	r3, [pc, #432]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	08db      	lsrs	r3, r3, #3
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	4a6b      	ldr	r2, [pc, #428]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
 80038c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	ee07 3a90 	vmov	s15, r3
 80038cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038de:	4b62      	ldr	r3, [pc, #392]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80038f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003a78 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800390e:	e087      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003a7c <HAL_RCC_GetSysClockFreq+0x2e8>
 800391e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003922:	4b51      	ldr	r3, [pc, #324]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003932:	ed97 6a02 	vldr	s12, [r7, #8]
 8003936:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003a78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800393a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800393e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800394a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003952:	e065      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003a80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003966:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396e:	ee07 3a90 	vmov	s15, r3
 8003972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003976:	ed97 6a02 	vldr	s12, [r7, #8]
 800397a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003a78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800397e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800398a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800398e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003992:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003996:	e043      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003a84 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039aa:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80039be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003a78 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039da:	e021      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003a80 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ee:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003a78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	0a5b      	lsrs	r3, r3, #9
 8003a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a44:	ee17 3a90 	vmov	r3, s15
 8003a48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a4a:	e005      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
      break;
 8003a50:	e002      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a52:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a54:	61bb      	str	r3, [r7, #24]
      break;
 8003a56:	bf00      	nop
  }

  return sysclockfreq;
 8003a58:	69bb      	ldr	r3, [r7, #24]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3724      	adds	r7, #36	; 0x24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	58024400 	.word	0x58024400
 8003a6c:	03d09000 	.word	0x03d09000
 8003a70:	003d0900 	.word	0x003d0900
 8003a74:	007a1200 	.word	0x007a1200
 8003a78:	46000000 	.word	0x46000000
 8003a7c:	4c742400 	.word	0x4c742400
 8003a80:	4a742400 	.word	0x4a742400
 8003a84:	4af42400 	.word	0x4af42400

08003a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a8e:	f7ff fe81 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8003a92:	4602      	mov	r2, r0
 8003a94:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	0a1b      	lsrs	r3, r3, #8
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	490f      	ldr	r1, [pc, #60]	; (8003adc <HAL_RCC_GetHCLKFreq+0x54>)
 8003aa0:	5ccb      	ldrb	r3, [r1, r3]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aaa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	4a09      	ldr	r2, [pc, #36]	; (8003adc <HAL_RCC_GetHCLKFreq+0x54>)
 8003ab6:	5cd3      	ldrb	r3, [r2, r3]
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac2:	4a07      	ldr	r2, [pc, #28]	; (8003ae0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ac4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ac6:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	58024400 	.word	0x58024400
 8003adc:	080098cc 	.word	0x080098cc
 8003ae0:	24000004 	.word	0x24000004
 8003ae4:	24000000 	.word	0x24000000

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003aec:	f7ff ffcc 	bl	8003a88 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4904      	ldr	r1, [pc, #16]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	080098cc 	.word	0x080098cc

08003b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b18:	f7ff ffb6 	bl	8003a88 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4904      	ldr	r1, [pc, #16]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	080098cc 	.word	0x080098cc

08003b40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	223f      	movs	r2, #63	; 0x3f
 8003b4e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <HAL_RCC_GetClockConfig+0x7c>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f003 0207 	and.w	r2, r3, #7
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003b5c:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <HAL_RCC_GetClockConfig+0x7c>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003b68:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <HAL_RCC_GetClockConfig+0x7c>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 020f 	and.w	r2, r3, #15
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_RCC_GetClockConfig+0x7c>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003b80:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <HAL_RCC_GetClockConfig+0x7c>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_GetClockConfig+0x7c>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <HAL_RCC_GetClockConfig+0x7c>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_RCC_GetClockConfig+0x80>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 020f 	and.w	r2, r3, #15
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	601a      	str	r2, [r3, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	52002000 	.word	0x52002000

08003bc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc8:	b0ca      	sub	sp, #296	; 0x128
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003be8:	2500      	movs	r5, #0
 8003bea:	ea54 0305 	orrs.w	r3, r4, r5
 8003bee:	d049      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bfa:	d02f      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003bfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c00:	d828      	bhi.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c06:	d01a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c0c:	d822      	bhi.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c16:	d007      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c18:	e01c      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c1a:	4bb8      	ldr	r3, [pc, #736]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	4ab7      	ldr	r2, [pc, #732]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c26:	e01a      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 fc8f 	bl	8005554 <RCCEx_PLL2_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c3c:	e00f      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c42:	3328      	adds	r3, #40	; 0x28
 8003c44:	2102      	movs	r1, #2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 fd36 	bl	80056b8 <RCCEx_PLL3_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c52:	e004      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c5a:	e000      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c66:	4ba5      	ldr	r3, [pc, #660]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c74:	4aa1      	ldr	r2, [pc, #644]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c76:	430b      	orrs	r3, r1
 8003c78:	6513      	str	r3, [r2, #80]	; 0x50
 8003c7a:	e003      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003c90:	f04f 0900 	mov.w	r9, #0
 8003c94:	ea58 0309 	orrs.w	r3, r8, r9
 8003c98:	d047      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d82a      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ca4:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cc1 	.word	0x08003cc1
 8003cb0:	08003ccf 	.word	0x08003ccf
 8003cb4:	08003ce5 	.word	0x08003ce5
 8003cb8:	08003d03 	.word	0x08003d03
 8003cbc:	08003d03 	.word	0x08003d03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc0:	4b8e      	ldr	r3, [pc, #568]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	4a8d      	ldr	r2, [pc, #564]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ccc:	e01a      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fc3c 	bl	8005554 <RCCEx_PLL2_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ce2:	e00f      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce8:	3328      	adds	r3, #40	; 0x28
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 fce3 	bl	80056b8 <RCCEx_PLL3_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cf8:	e004      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d00:	e000      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d0c:	4b7b      	ldr	r3, [pc, #492]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d10:	f023 0107 	bic.w	r1, r3, #7
 8003d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	4a78      	ldr	r2, [pc, #480]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6513      	str	r3, [r2, #80]	; 0x50
 8003d20:	e003      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d32:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003d36:	f04f 0b00 	mov.w	fp, #0
 8003d3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d3e:	d04c      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4a:	d030      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d50:	d829      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d52:	2bc0      	cmp	r3, #192	; 0xc0
 8003d54:	d02d      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d56:	2bc0      	cmp	r3, #192	; 0xc0
 8003d58:	d825      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d5a:	2b80      	cmp	r3, #128	; 0x80
 8003d5c:	d018      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	d821      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d007      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d6a:	e01c      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6c:	4b63      	ldr	r3, [pc, #396]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	4a62      	ldr	r2, [pc, #392]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d78:	e01c      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7e:	3308      	adds	r3, #8
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 fbe6 	bl	8005554 <RCCEx_PLL2_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d8e:	e011      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d94:	3328      	adds	r3, #40	; 0x28
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f001 fc8d 	bl	80056b8 <RCCEx_PLL3_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dac:	e002      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003dbc:	4b4f      	ldr	r3, [pc, #316]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	4a4c      	ldr	r2, [pc, #304]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6513      	str	r3, [r2, #80]	; 0x50
 8003dd0:	e003      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003de6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003dea:	2300      	movs	r3, #0
 8003dec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003df0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003df4:	460b      	mov	r3, r1
 8003df6:	4313      	orrs	r3, r2
 8003df8:	d053      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e06:	d035      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003e08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e0c:	d82e      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e12:	d031      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003e14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e18:	d828      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e1e:	d01a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e24:	d822      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e2e:	d007      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003e30:	e01c      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e32:	4b32      	ldr	r3, [pc, #200]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	4a31      	ldr	r2, [pc, #196]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e3e:	e01c      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e44:	3308      	adds	r3, #8
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 fb83 	bl	8005554 <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e54:	e011      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5a:	3328      	adds	r3, #40	; 0x28
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 fc2a 	bl	80056b8 <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e6a:	e006      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e72:	e002      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e74:	bf00      	nop
 8003e76:	e000      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e92:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6593      	str	r3, [r2, #88]	; 0x58
 8003e98:	e003      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003eae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003eb8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	d056      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003eca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ece:	d038      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ed4:	d831      	bhi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ed6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003eda:	d034      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003edc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ee0:	d82b      	bhi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee6:	d01d      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003ee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eec:	d825      	bhi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d006      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ef2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ef8:	e01f      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003efa:	bf00      	nop
 8003efc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f00:	4ba2      	ldr	r3, [pc, #648]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	4aa1      	ldr	r2, [pc, #644]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f0c:	e01c      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f12:	3308      	adds	r3, #8
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 fb1c 	bl	8005554 <RCCEx_PLL2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f22:	e011      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f28:	3328      	adds	r3, #40	; 0x28
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 fbc3 	bl	80056b8 <RCCEx_PLL3_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f40:	e002      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f50:	4b8e      	ldr	r3, [pc, #568]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f60:	4a8a      	ldr	r2, [pc, #552]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6593      	str	r3, [r2, #88]	; 0x58
 8003f66:	e003      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f80:	2300      	movs	r3, #0
 8003f82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003f86:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	d03a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f96:	2b30      	cmp	r3, #48	; 0x30
 8003f98:	d01f      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f9a:	2b30      	cmp	r3, #48	; 0x30
 8003f9c:	d819      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d00c      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d815      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d019      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d111      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fae:	4b77      	ldr	r3, [pc, #476]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4a76      	ldr	r2, [pc, #472]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003fba:	e011      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 fac5 	bl	8005554 <RCCEx_PLL2_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003fd0:	e006      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fd8:	e002      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003fda:	bf00      	nop
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fe8:	4b68      	ldr	r3, [pc, #416]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	4a65      	ldr	r2, [pc, #404]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ffc:	e003      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004012:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004016:	2300      	movs	r3, #0
 8004018:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800401c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004020:	460b      	mov	r3, r1
 8004022:	4313      	orrs	r3, r2
 8004024:	d051      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004030:	d035      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004036:	d82e      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004038:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800403c:	d031      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800403e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004042:	d828      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004048:	d01a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800404a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404e:	d822      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004058:	d007      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800405a:	e01c      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405c:	4b4b      	ldr	r3, [pc, #300]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4a4a      	ldr	r2, [pc, #296]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004068:	e01c      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406e:	3308      	adds	r3, #8
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f001 fa6e 	bl	8005554 <RCCEx_PLL2_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800407e:	e011      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004084:	3328      	adds	r3, #40	; 0x28
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fb15 	bl	80056b8 <RCCEx_PLL3_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004094:	e006      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800409c:	e002      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80040a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040ac:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ba:	4a34      	ldr	r2, [pc, #208]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040bc:	430b      	orrs	r3, r1
 80040be:	6513      	str	r3, [r2, #80]	; 0x50
 80040c0:	e003      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80040d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80040e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80040e4:	460b      	mov	r3, r1
 80040e6:	4313      	orrs	r3, r2
 80040e8:	d056      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f4:	d033      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80040f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fa:	d82c      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004100:	d02f      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004102:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004106:	d826      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004108:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800410c:	d02b      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800410e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004112:	d820      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004118:	d012      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800411a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800411e:	d81a      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d022      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004128:	d115      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412e:	3308      	adds	r3, #8
 8004130:	2101      	movs	r1, #1
 8004132:	4618      	mov	r0, r3
 8004134:	f001 fa0e 	bl	8005554 <RCCEx_PLL2_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800413e:	e015      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004144:	3328      	adds	r3, #40	; 0x28
 8004146:	2101      	movs	r1, #1
 8004148:	4618      	mov	r0, r3
 800414a:	f001 fab5 	bl	80056b8 <RCCEx_PLL3_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004154:	e00a      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800415e:	bf00      	nop
 8004160:	e004      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800416a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10d      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004178:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004182:	4a02      	ldr	r2, [pc, #8]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004184:	430b      	orrs	r3, r1
 8004186:	6513      	str	r3, [r2, #80]	; 0x50
 8004188:	e006      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800418a:	bf00      	nop
 800418c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80041a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4313      	orrs	r3, r2
 80041b6:	d055      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c4:	d033      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80041c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ca:	d82c      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d02f      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d826      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041dc:	d02b      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80041de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041e2:	d820      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e8:	d012      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80041ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ee:	d81a      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d022      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80041f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041f8:	d115      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fe:	3308      	adds	r3, #8
 8004200:	2101      	movs	r1, #1
 8004202:	4618      	mov	r0, r3
 8004204:	f001 f9a6 	bl	8005554 <RCCEx_PLL2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800420e:	e015      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004214:	3328      	adds	r3, #40	; 0x28
 8004216:	2101      	movs	r1, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f001 fa4d 	bl	80056b8 <RCCEx_PLL3_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004224:	e00a      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800422c:	e006      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800422e:	bf00      	nop
 8004230:	e004      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004232:	bf00      	nop
 8004234:	e002      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800423a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004244:	4ba3      	ldr	r3, [pc, #652]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004250:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004254:	4a9f      	ldr	r2, [pc, #636]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004256:	430b      	orrs	r3, r1
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
 800425a:	e003      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004260:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004270:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800427a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800427e:	460b      	mov	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	d037      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800428e:	d00e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004294:	d816      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004296:	2b00      	cmp	r3, #0
 8004298:	d018      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800429a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800429e:	d111      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a0:	4b8c      	ldr	r3, [pc, #560]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	4a8b      	ldr	r2, [pc, #556]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042ac:	e00f      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b2:	3308      	adds	r3, #8
 80042b4:	2101      	movs	r1, #1
 80042b6:	4618      	mov	r0, r3
 80042b8:	f001 f94c 	bl	8005554 <RCCEx_PLL2_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042c2:	e004      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80042cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10a      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042d6:	4b7f      	ldr	r3, [pc, #508]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042da:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	4a7b      	ldr	r2, [pc, #492]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e6:	430b      	orrs	r3, r1
 80042e8:	6513      	str	r3, [r2, #80]	; 0x50
 80042ea:	e003      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800430a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d039      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431a:	2b03      	cmp	r3, #3
 800431c:	d81c      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800431e:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	08004361 	.word	0x08004361
 8004328:	08004335 	.word	0x08004335
 800432c:	08004343 	.word	0x08004343
 8004330:	08004361 	.word	0x08004361
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004334:	4b67      	ldr	r3, [pc, #412]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	4a66      	ldr	r2, [pc, #408]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800433a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800433e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004340:	e00f      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004346:	3308      	adds	r3, #8
 8004348:	2102      	movs	r1, #2
 800434a:	4618      	mov	r0, r3
 800434c:	f001 f902 	bl	8005554 <RCCEx_PLL2_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004356:	e004      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800435e:	e000      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800436a:	4b5a      	ldr	r3, [pc, #360]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800436c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436e:	f023 0103 	bic.w	r1, r3, #3
 8004372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004378:	4a56      	ldr	r2, [pc, #344]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800437a:	430b      	orrs	r3, r1
 800437c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800437e:	e003      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004398:	2300      	movs	r3, #0
 800439a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800439e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80043a2:	460b      	mov	r3, r1
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f000 809f 	beq.w	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043aa:	4b4b      	ldr	r3, [pc, #300]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a4a      	ldr	r2, [pc, #296]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043b6:	f7fd fb1b 	bl	80019f0 <HAL_GetTick>
 80043ba:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043be:	e00b      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c0:	f7fd fb16 	bl	80019f0 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b64      	cmp	r3, #100	; 0x64
 80043ce:	d903      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043d6:	e005      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043d8:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ed      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80043e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d179      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043ec:	4b39      	ldr	r3, [pc, #228]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043f8:	4053      	eors	r3, r2
 80043fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d015      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004402:	4b34      	ldr	r3, [pc, #208]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800440e:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	4a30      	ldr	r2, [pc, #192]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800441a:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	4a2d      	ldr	r2, [pc, #180]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004424:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004426:	4a2b      	ldr	r2, [pc, #172]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004428:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800442c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443a:	d118      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd fad8 	bl	80019f0 <HAL_GetTick>
 8004440:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004444:	e00d      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004446:	f7fd fad3 	bl	80019f0 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004450:	1ad2      	subs	r2, r2, r3
 8004452:	f241 3388 	movw	r3, #5000	; 0x1388
 8004456:	429a      	cmp	r2, r3
 8004458:	d903      	bls.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004460:	e005      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004462:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0eb      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800446e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004472:	2b00      	cmp	r3, #0
 8004474:	d129      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800447e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004486:	d10e      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004488:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004494:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004498:	091a      	lsrs	r2, r3, #4
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800449c:	4013      	ands	r3, r2
 800449e:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044a0:	430b      	orrs	r3, r1
 80044a2:	6113      	str	r3, [r2, #16]
 80044a4:	e005      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	4a0a      	ldr	r2, [pc, #40]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044b0:	6113      	str	r3, [r2, #16]
 80044b2:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c2:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6713      	str	r3, [r2, #112]	; 0x70
 80044c8:	e00e      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80044d2:	e009      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80044d4:	58024400 	.word	0x58024400
 80044d8:	58024800 	.word	0x58024800
 80044dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	f002 0301 	and.w	r3, r2, #1
 80044f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044f8:	2300      	movs	r3, #0
 80044fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004502:	460b      	mov	r3, r1
 8004504:	4313      	orrs	r3, r2
 8004506:	f000 8089 	beq.w	800461c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004510:	2b28      	cmp	r3, #40	; 0x28
 8004512:	d86b      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	080045f5 	.word	0x080045f5
 8004520:	080045ed 	.word	0x080045ed
 8004524:	080045ed 	.word	0x080045ed
 8004528:	080045ed 	.word	0x080045ed
 800452c:	080045ed 	.word	0x080045ed
 8004530:	080045ed 	.word	0x080045ed
 8004534:	080045ed 	.word	0x080045ed
 8004538:	080045ed 	.word	0x080045ed
 800453c:	080045c1 	.word	0x080045c1
 8004540:	080045ed 	.word	0x080045ed
 8004544:	080045ed 	.word	0x080045ed
 8004548:	080045ed 	.word	0x080045ed
 800454c:	080045ed 	.word	0x080045ed
 8004550:	080045ed 	.word	0x080045ed
 8004554:	080045ed 	.word	0x080045ed
 8004558:	080045ed 	.word	0x080045ed
 800455c:	080045d7 	.word	0x080045d7
 8004560:	080045ed 	.word	0x080045ed
 8004564:	080045ed 	.word	0x080045ed
 8004568:	080045ed 	.word	0x080045ed
 800456c:	080045ed 	.word	0x080045ed
 8004570:	080045ed 	.word	0x080045ed
 8004574:	080045ed 	.word	0x080045ed
 8004578:	080045ed 	.word	0x080045ed
 800457c:	080045f5 	.word	0x080045f5
 8004580:	080045ed 	.word	0x080045ed
 8004584:	080045ed 	.word	0x080045ed
 8004588:	080045ed 	.word	0x080045ed
 800458c:	080045ed 	.word	0x080045ed
 8004590:	080045ed 	.word	0x080045ed
 8004594:	080045ed 	.word	0x080045ed
 8004598:	080045ed 	.word	0x080045ed
 800459c:	080045f5 	.word	0x080045f5
 80045a0:	080045ed 	.word	0x080045ed
 80045a4:	080045ed 	.word	0x080045ed
 80045a8:	080045ed 	.word	0x080045ed
 80045ac:	080045ed 	.word	0x080045ed
 80045b0:	080045ed 	.word	0x080045ed
 80045b4:	080045ed 	.word	0x080045ed
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	080045f5 	.word	0x080045f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c4:	3308      	adds	r3, #8
 80045c6:	2101      	movs	r1, #1
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 ffc3 	bl	8005554 <RCCEx_PLL2_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045d4:	e00f      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045da:	3328      	adds	r3, #40	; 0x28
 80045dc:	2101      	movs	r1, #1
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 f86a 	bl	80056b8 <RCCEx_PLL3_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045ea:	e004      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045f2:	e000      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80045f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045fe:	4bbf      	ldr	r3, [pc, #764]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460c:	4abb      	ldr	r2, [pc, #748]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800460e:	430b      	orrs	r3, r1
 8004610:	6553      	str	r3, [r2, #84]	; 0x54
 8004612:	e003      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004614:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004618:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f002 0302 	and.w	r3, r2, #2
 8004628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800462c:	2300      	movs	r3, #0
 800462e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004632:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004636:	460b      	mov	r3, r1
 8004638:	4313      	orrs	r3, r2
 800463a:	d041      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004642:	2b05      	cmp	r3, #5
 8004644:	d824      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004646:	a201      	add	r2, pc, #4	; (adr r2, 800464c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464c:	08004699 	.word	0x08004699
 8004650:	08004665 	.word	0x08004665
 8004654:	0800467b 	.word	0x0800467b
 8004658:	08004699 	.word	0x08004699
 800465c:	08004699 	.word	0x08004699
 8004660:	08004699 	.word	0x08004699
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004668:	3308      	adds	r3, #8
 800466a:	2101      	movs	r1, #1
 800466c:	4618      	mov	r0, r3
 800466e:	f000 ff71 	bl	8005554 <RCCEx_PLL2_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004678:	e00f      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467e:	3328      	adds	r3, #40	; 0x28
 8004680:	2101      	movs	r1, #1
 8004682:	4618      	mov	r0, r3
 8004684:	f001 f818 	bl	80056b8 <RCCEx_PLL3_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800468e:	e004      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004696:	e000      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800469a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046a2:	4b96      	ldr	r3, [pc, #600]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	f023 0107 	bic.w	r1, r3, #7
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b0:	4a92      	ldr	r2, [pc, #584]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6553      	str	r3, [r2, #84]	; 0x54
 80046b6:	e003      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f002 0304 	and.w	r3, r2, #4
 80046cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80046da:	460b      	mov	r3, r1
 80046dc:	4313      	orrs	r3, r2
 80046de:	d044      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e8:	2b05      	cmp	r3, #5
 80046ea:	d825      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004741 	.word	0x08004741
 80046f8:	0800470d 	.word	0x0800470d
 80046fc:	08004723 	.word	0x08004723
 8004700:	08004741 	.word	0x08004741
 8004704:	08004741 	.word	0x08004741
 8004708:	08004741 	.word	0x08004741
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004710:	3308      	adds	r3, #8
 8004712:	2101      	movs	r1, #1
 8004714:	4618      	mov	r0, r3
 8004716:	f000 ff1d 	bl	8005554 <RCCEx_PLL2_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004720:	e00f      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004726:	3328      	adds	r3, #40	; 0x28
 8004728:	2101      	movs	r1, #1
 800472a:	4618      	mov	r0, r3
 800472c:	f000 ffc4 	bl	80056b8 <RCCEx_PLL3_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004736:	e004      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800473e:	e000      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10b      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800474a:	4b6c      	ldr	r3, [pc, #432]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	f023 0107 	bic.w	r1, r3, #7
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475a:	4a68      	ldr	r2, [pc, #416]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800475c:	430b      	orrs	r3, r1
 800475e:	6593      	str	r3, [r2, #88]	; 0x58
 8004760:	e003      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004766:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f002 0320 	and.w	r3, r2, #32
 8004776:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800477a:	2300      	movs	r3, #0
 800477c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004784:	460b      	mov	r3, r1
 8004786:	4313      	orrs	r3, r2
 8004788:	d055      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004796:	d033      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800479c:	d82c      	bhi.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800479e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a2:	d02f      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d826      	bhi.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047ae:	d02b      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80047b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047b4:	d820      	bhi.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ba:	d012      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80047bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047c0:	d81a      	bhi.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d022      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80047c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ca:	d115      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d0:	3308      	adds	r3, #8
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 febd 	bl	8005554 <RCCEx_PLL2_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047e0:	e015      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e6:	3328      	adds	r3, #40	; 0x28
 80047e8:	2102      	movs	r1, #2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 ff64 	bl	80056b8 <RCCEx_PLL3_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047f6:	e00a      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047fe:	e006      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004800:	bf00      	nop
 8004802:	e004      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004804:	bf00      	nop
 8004806:	e002      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004808:	bf00      	nop
 800480a:	e000      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800480c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800480e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10b      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004816:	4b39      	ldr	r3, [pc, #228]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	4a35      	ldr	r2, [pc, #212]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004828:	430b      	orrs	r3, r1
 800482a:	6553      	str	r3, [r2, #84]	; 0x54
 800482c:	e003      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004846:	2300      	movs	r3, #0
 8004848:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800484c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004850:	460b      	mov	r3, r1
 8004852:	4313      	orrs	r3, r2
 8004854:	d058      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800485e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004862:	d033      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004864:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004868:	d82c      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486e:	d02f      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004874:	d826      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800487a:	d02b      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800487c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004880:	d820      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004886:	d012      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488c:	d81a      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d022      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004896:	d115      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489c:	3308      	adds	r3, #8
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fe57 	bl	8005554 <RCCEx_PLL2_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048ac:	e015      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b2:	3328      	adds	r3, #40	; 0x28
 80048b4:	2102      	movs	r1, #2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fefe 	bl	80056b8 <RCCEx_PLL3_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048c2:	e00a      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048ca:	e006      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048cc:	bf00      	nop
 80048ce:	e004      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048d0:	bf00      	nop
 80048d2:	e002      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048d4:	bf00      	nop
 80048d6:	e000      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10e      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048e2:	4b06      	ldr	r3, [pc, #24]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048f2:	4a02      	ldr	r2, [pc, #8]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6593      	str	r3, [r2, #88]	; 0x58
 80048f8:	e006      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80048fa:	bf00      	nop
 80048fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004918:	2300      	movs	r3, #0
 800491a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800491e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004922:	460b      	mov	r3, r1
 8004924:	4313      	orrs	r3, r2
 8004926:	d055      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004930:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004934:	d033      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004936:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800493a:	d82c      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800493c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004940:	d02f      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004946:	d826      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004948:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800494c:	d02b      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800494e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004952:	d820      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004958:	d012      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800495a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800495e:	d81a      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d022      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004968:	d115      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800496a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496e:	3308      	adds	r3, #8
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fdee 	bl	8005554 <RCCEx_PLL2_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800497e:	e015      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004984:	3328      	adds	r3, #40	; 0x28
 8004986:	2102      	movs	r1, #2
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fe95 	bl	80056b8 <RCCEx_PLL3_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004994:	e00a      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800499c:	e006      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800499e:	bf00      	nop
 80049a0:	e004      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049a2:	bf00      	nop
 80049a4:	e002      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049a6:	bf00      	nop
 80049a8:	e000      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10b      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049b4:	4ba1      	ldr	r3, [pc, #644]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049c4:	4a9d      	ldr	r2, [pc, #628]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049c6:	430b      	orrs	r3, r1
 80049c8:	6593      	str	r3, [r2, #88]	; 0x58
 80049ca:	e003      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f002 0308 	and.w	r3, r2, #8
 80049e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049e4:	2300      	movs	r3, #0
 80049e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80049ee:	460b      	mov	r3, r1
 80049f0:	4313      	orrs	r3, r2
 80049f2:	d01e      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a06:	3328      	adds	r3, #40	; 0x28
 8004a08:	2102      	movs	r1, #2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fe54 	bl	80056b8 <RCCEx_PLL3_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a1c:	4b87      	ldr	r3, [pc, #540]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2c:	4a83      	ldr	r2, [pc, #524]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	f002 0310 	and.w	r3, r2, #16
 8004a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a42:	2300      	movs	r3, #0
 8004a44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	d01e      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a5e:	d10c      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a64:	3328      	adds	r3, #40	; 0x28
 8004a66:	2102      	movs	r1, #2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fe25 	bl	80056b8 <RCCEx_PLL3_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a7a:	4b70      	ldr	r3, [pc, #448]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a8a:	4a6c      	ldr	r2, [pc, #432]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aa6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4313      	orrs	r3, r2
 8004aae:	d03e      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004abc:	d022      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ac2:	d81b      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004acc:	d00b      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004ace:	e015      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fd3b 	bl	8005554 <RCCEx_PLL2_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ae4:	e00f      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aea:	3328      	adds	r3, #40	; 0x28
 8004aec:	2102      	movs	r1, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fde2 	bl	80056b8 <RCCEx_PLL3_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004afa:	e004      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b02:	e000      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b0e:	4b4b      	ldr	r3, [pc, #300]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b12:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b1e:	4a47      	ldr	r2, [pc, #284]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6593      	str	r3, [r2, #88]	; 0x58
 8004b24:	e003      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004b3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d03b      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b56:	d01f      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b5c:	d818      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b62:	d003      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b68:	d007      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b6a:	e011      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b6c:	4b33      	ldr	r3, [pc, #204]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4a32      	ldr	r2, [pc, #200]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b78:	e00f      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7e:	3328      	adds	r3, #40	; 0x28
 8004b80:	2101      	movs	r1, #1
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fd98 	bl	80056b8 <RCCEx_PLL3_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b8e:	e004      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b96:	e000      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10b      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ba2:	4b26      	ldr	r3, [pc, #152]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6553      	str	r3, [r2, #84]	; 0x54
 8004bb8:	e003      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004bce:	673b      	str	r3, [r7, #112]	; 0x70
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	677b      	str	r3, [r7, #116]	; 0x74
 8004bd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	d034      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bec:	d007      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004bee:	e011      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf0:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	4a11      	ldr	r2, [pc, #68]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bfc:	e00e      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c02:	3308      	adds	r3, #8
 8004c04:	2102      	movs	r1, #2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fca4 	bl	8005554 <RCCEx_PLL2_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c12:	e003      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10d      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c32:	4a02      	ldr	r2, [pc, #8]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c34:	430b      	orrs	r3, r1
 8004c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c38:	e006      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004c3a:	bf00      	nop
 8004c3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004c54:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c56:	2300      	movs	r3, #0
 8004c58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4313      	orrs	r3, r2
 8004c62:	d00c      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c68:	3328      	adds	r3, #40	; 0x28
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fd23 	bl	80056b8 <RCCEx_PLL3_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	667b      	str	r3, [r7, #100]	; 0x64
 8004c90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004c94:	460b      	mov	r3, r1
 8004c96:	4313      	orrs	r3, r2
 8004c98:	d038      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca6:	d018      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cac:	d811      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb2:	d014      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb8:	d80b      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d011      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc2:	d106      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc4:	4bc3      	ldr	r3, [pc, #780]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	4ac2      	ldr	r2, [pc, #776]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cd8:	e004      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cda:	bf00      	nop
 8004cdc:	e002      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cde:	bf00      	nop
 8004ce0:	e000      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cec:	4bb9      	ldr	r3, [pc, #740]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cfc:	4ab5      	ldr	r2, [pc, #724]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	6553      	str	r3, [r2, #84]	; 0x54
 8004d02:	e003      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004d18:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004d22:	460b      	mov	r3, r1
 8004d24:	4313      	orrs	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d28:	4baa      	ldr	r3, [pc, #680]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d36:	4aa7      	ldr	r2, [pc, #668]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004d48:	653b      	str	r3, [r7, #80]	; 0x50
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	657b      	str	r3, [r7, #84]	; 0x54
 8004d4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004d52:	460b      	mov	r3, r1
 8004d54:	4313      	orrs	r3, r2
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d58:	4b9e      	ldr	r3, [pc, #632]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d68:	4a9a      	ldr	r2, [pc, #616]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004d84:	460b      	mov	r3, r1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d8a:	4b92      	ldr	r3, [pc, #584]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d98:	4a8e      	ldr	r2, [pc, #568]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40
 8004dac:	2300      	movs	r3, #0
 8004dae:	647b      	str	r3, [r7, #68]	; 0x44
 8004db0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004db4:	460b      	mov	r3, r1
 8004db6:	4313      	orrs	r3, r2
 8004db8:	d00e      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dba:	4b86      	ldr	r3, [pc, #536]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	4a85      	ldr	r2, [pc, #532]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dc4:	6113      	str	r3, [r2, #16]
 8004dc6:	4b83      	ldr	r3, [pc, #524]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dc8:	6919      	ldr	r1, [r3, #16]
 8004dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004dd2:	4a80      	ldr	r2, [pc, #512]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004de4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004de6:	2300      	movs	r3, #0
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004dee:	460b      	mov	r3, r1
 8004df0:	4313      	orrs	r3, r2
 8004df2:	d009      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004df4:	4b77      	ldr	r3, [pc, #476]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	4a74      	ldr	r2, [pc, #464]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e04:	430b      	orrs	r3, r1
 8004e06:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004e14:	633b      	str	r3, [r7, #48]	; 0x30
 8004e16:	2300      	movs	r3, #0
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4313      	orrs	r3, r2
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e24:	4b6b      	ldr	r3, [pc, #428]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e28:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e34:	4a67      	ldr	r2, [pc, #412]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e36:	430b      	orrs	r3, r1
 8004e38:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	2100      	movs	r1, #0
 8004e44:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004e50:	460b      	mov	r3, r1
 8004e52:	4313      	orrs	r3, r2
 8004e54:	d011      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fb78 	bl	8005554 <RCCEx_PLL2_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	2100      	movs	r1, #0
 8004e84:	6239      	str	r1, [r7, #32]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e90:	460b      	mov	r3, r1
 8004e92:	4313      	orrs	r3, r2
 8004e94:	d011      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fb58 	bl	8005554 <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	61b9      	str	r1, [r7, #24]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	d011      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eda:	3308      	adds	r3, #8
 8004edc:	2102      	movs	r1, #2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fb38 	bl	8005554 <RCCEx_PLL2_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	2100      	movs	r1, #0
 8004f04:	6139      	str	r1, [r7, #16]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f10:	460b      	mov	r3, r1
 8004f12:	4313      	orrs	r3, r2
 8004f14:	d011      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1a:	3328      	adds	r3, #40	; 0x28
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fbca 	bl	80056b8 <RCCEx_PLL3_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	2100      	movs	r1, #0
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f50:	460b      	mov	r3, r1
 8004f52:	4313      	orrs	r3, r2
 8004f54:	d011      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5a:	3328      	adds	r3, #40	; 0x28
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fbaa 	bl	80056b8 <RCCEx_PLL3_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	2100      	movs	r1, #0
 8004f84:	6039      	str	r1, [r7, #0]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f90:	460b      	mov	r3, r1
 8004f92:	4313      	orrs	r3, r2
 8004f94:	d011      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9a:	3328      	adds	r3, #40	; 0x28
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fb8a 	bl	80056b8 <RCCEx_PLL3_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004fba:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e000      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd4:	58024400 	.word	0x58024400

08004fd8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004fdc:	f7fe fd54 	bl	8003a88 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4904      	ldr	r1, [pc, #16]	; (8005000 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	58024400 	.word	0x58024400
 8005000:	080098cc 	.word	0x080098cc

08005004 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005004:	b480      	push	{r7}
 8005006:	b089      	sub	sp, #36	; 0x24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800500c:	4ba1      	ldr	r3, [pc, #644]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005016:	4b9f      	ldr	r3, [pc, #636]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	0b1b      	lsrs	r3, r3, #12
 800501c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005020:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005022:	4b9c      	ldr	r3, [pc, #624]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800502e:	4b99      	ldr	r3, [pc, #612]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	08db      	lsrs	r3, r3, #3
 8005034:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	fb02 f303 	mul.w	r3, r2, r3
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005046:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8111 	beq.w	8005274 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b02      	cmp	r3, #2
 8005056:	f000 8083 	beq.w	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b02      	cmp	r3, #2
 800505e:	f200 80a1 	bhi.w	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d056      	beq.n	800511c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800506e:	e099      	b.n	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005070:	4b88      	ldr	r3, [pc, #544]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d02d      	beq.n	80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800507c:	4b85      	ldr	r3, [pc, #532]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	08db      	lsrs	r3, r3, #3
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	4a84      	ldr	r2, [pc, #528]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
 800508c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	ee07 3a90 	vmov	s15, r3
 8005094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a6:	4b7b      	ldr	r3, [pc, #492]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800529c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050d6:	e087      	b.n	80051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ea:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800529c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511a:	e065      	b.n	80051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800512a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512e:	4b59      	ldr	r3, [pc, #356]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005142:	eddf 5a56 	vldr	s11, [pc, #344]	; 800529c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800515e:	e043      	b.n	80051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800516e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005172:	4b48      	ldr	r3, [pc, #288]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005182:	ed97 6a03 	vldr	s12, [r7, #12]
 8005186:	eddf 5a45 	vldr	s11, [pc, #276]	; 800529c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800518a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051a2:	e021      	b.n	80051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b6:	4b37      	ldr	r3, [pc, #220]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800529c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80051e8:	4b2a      	ldr	r3, [pc, #168]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	0a5b      	lsrs	r3, r3, #9
 80051ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005202:	edd7 6a07 	vldr	s13, [r7, #28]
 8005206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800520e:	ee17 2a90 	vmov	r2, s15
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005216:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	0c1b      	lsrs	r3, r3, #16
 800521c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005220:	ee07 3a90 	vmov	s15, r3
 8005224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800522c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005230:	edd7 6a07 	vldr	s13, [r7, #28]
 8005234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800523c:	ee17 2a90 	vmov	r2, s15
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005244:	4b13      	ldr	r3, [pc, #76]	; (8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	0e1b      	lsrs	r3, r3, #24
 800524a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800525a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800525e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800526a:	ee17 2a90 	vmov	r2, s15
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005272:	e008      	b.n	8005286 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	609a      	str	r2, [r3, #8]
}
 8005286:	bf00      	nop
 8005288:	3724      	adds	r7, #36	; 0x24
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	58024400 	.word	0x58024400
 8005298:	03d09000 	.word	0x03d09000
 800529c:	46000000 	.word	0x46000000
 80052a0:	4c742400 	.word	0x4c742400
 80052a4:	4a742400 	.word	0x4a742400
 80052a8:	4af42400 	.word	0x4af42400

080052ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b089      	sub	sp, #36	; 0x24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052b4:	4ba1      	ldr	r3, [pc, #644]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052be:	4b9f      	ldr	r3, [pc, #636]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	0d1b      	lsrs	r3, r3, #20
 80052c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052ca:	4b9c      	ldr	r3, [pc, #624]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	0a1b      	lsrs	r3, r3, #8
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80052d6:	4b99      	ldr	r3, [pc, #612]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	08db      	lsrs	r3, r3, #3
 80052dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8111 	beq.w	800551c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	f000 8083 	beq.w	8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b02      	cmp	r3, #2
 8005306:	f200 80a1 	bhi.w	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d056      	beq.n	80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005316:	e099      	b.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005318:	4b88      	ldr	r3, [pc, #544]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02d      	beq.n	8005380 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005324:	4b85      	ldr	r3, [pc, #532]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	08db      	lsrs	r3, r3, #3
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	4a84      	ldr	r2, [pc, #528]	; (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
 8005334:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b7b      	ldr	r3, [pc, #492]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005362:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800537e:	e087      	b.n	8005490 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005392:	4b6a      	ldr	r3, [pc, #424]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053c2:	e065      	b.n	8005490 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800554c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d6:	4b59      	ldr	r3, [pc, #356]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005406:	e043      	b.n	8005490 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541a:	4b48      	ldr	r3, [pc, #288]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542a:	ed97 6a03 	vldr	s12, [r7, #12]
 800542e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800544a:	e021      	b.n	8005490 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005456:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800554c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800545a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545e:	4b37      	ldr	r3, [pc, #220]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005472:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800548e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005490:	4b2a      	ldr	r3, [pc, #168]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	0a5b      	lsrs	r3, r3, #9
 8005496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054b6:	ee17 2a90 	vmov	r2, s15
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054be:	4b1f      	ldr	r3, [pc, #124]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	0c1b      	lsrs	r3, r3, #16
 80054c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c8:	ee07 3a90 	vmov	s15, r3
 80054cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e4:	ee17 2a90 	vmov	r2, s15
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80054ec:	4b13      	ldr	r3, [pc, #76]	; (800553c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	0e1b      	lsrs	r3, r3, #24
 80054f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005502:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005506:	edd7 6a07 	vldr	s13, [r7, #28]
 800550a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800550e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005512:	ee17 2a90 	vmov	r2, s15
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800551a:	e008      	b.n	800552e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
}
 800552e:	bf00      	nop
 8005530:	3724      	adds	r7, #36	; 0x24
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	58024400 	.word	0x58024400
 8005540:	03d09000 	.word	0x03d09000
 8005544:	46000000 	.word	0x46000000
 8005548:	4c742400 	.word	0x4c742400
 800554c:	4a742400 	.word	0x4a742400
 8005550:	4af42400 	.word	0x4af42400

08005554 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005562:	4b53      	ldr	r3, [pc, #332]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b03      	cmp	r3, #3
 800556c:	d101      	bne.n	8005572 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e099      	b.n	80056a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005572:	4b4f      	ldr	r3, [pc, #316]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a4e      	ldr	r2, [pc, #312]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005578:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800557c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800557e:	f7fc fa37 	bl	80019f0 <HAL_GetTick>
 8005582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005584:	e008      	b.n	8005598 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005586:	f7fc fa33 	bl	80019f0 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e086      	b.n	80056a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005598:	4b45      	ldr	r3, [pc, #276]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1f0      	bne.n	8005586 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055a4:	4b42      	ldr	r3, [pc, #264]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	031b      	lsls	r3, r3, #12
 80055b2:	493f      	ldr	r1, [pc, #252]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	628b      	str	r3, [r1, #40]	; 0x28
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	3b01      	subs	r3, #1
 80055be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	025b      	lsls	r3, r3, #9
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	061b      	lsls	r3, r3, #24
 80055e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055e8:	4931      	ldr	r1, [pc, #196]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055ee:	4b30      	ldr	r3, [pc, #192]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	492d      	ldr	r1, [pc, #180]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005600:	4b2b      	ldr	r3, [pc, #172]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	f023 0220 	bic.w	r2, r3, #32
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	4928      	ldr	r1, [pc, #160]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 800560e:	4313      	orrs	r3, r2
 8005610:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005612:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005618:	f023 0310 	bic.w	r3, r3, #16
 800561c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800561e:	4b24      	ldr	r3, [pc, #144]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005622:	4b24      	ldr	r3, [pc, #144]	; (80056b4 <RCCEx_PLL2_Config+0x160>)
 8005624:	4013      	ands	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	69d2      	ldr	r2, [r2, #28]
 800562a:	00d2      	lsls	r2, r2, #3
 800562c:	4920      	ldr	r1, [pc, #128]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 800562e:	4313      	orrs	r3, r2
 8005630:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005632:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	4a1e      	ldr	r2, [pc, #120]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005638:	f043 0310 	orr.w	r3, r3, #16
 800563c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005644:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	4a19      	ldr	r2, [pc, #100]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 800564a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800564e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005650:	e00f      	b.n	8005672 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d106      	bne.n	8005666 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005658:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 800565e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005662:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005664:	e005      	b.n	8005672 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	4a11      	ldr	r2, [pc, #68]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 800566c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005670:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005672:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a0e      	ldr	r2, [pc, #56]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 8005678:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800567c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800567e:	f7fc f9b7 	bl	80019f0 <HAL_GetTick>
 8005682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005684:	e008      	b.n	8005698 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005686:	f7fc f9b3 	bl	80019f0 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e006      	b.n	80056a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <RCCEx_PLL2_Config+0x15c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	58024400 	.word	0x58024400
 80056b4:	ffff0007 	.word	0xffff0007

080056b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056c6:	4b53      	ldr	r3, [pc, #332]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d101      	bne.n	80056d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e099      	b.n	800580a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056d6:	4b4f      	ldr	r3, [pc, #316]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a4e      	ldr	r2, [pc, #312]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80056dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e2:	f7fc f985 	bl	80019f0 <HAL_GetTick>
 80056e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056e8:	e008      	b.n	80056fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056ea:	f7fc f981 	bl	80019f0 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e086      	b.n	800580a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056fc:	4b45      	ldr	r3, [pc, #276]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f0      	bne.n	80056ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005708:	4b42      	ldr	r3, [pc, #264]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	051b      	lsls	r3, r3, #20
 8005716:	493f      	ldr	r1, [pc, #252]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 8005718:	4313      	orrs	r3, r2
 800571a:	628b      	str	r3, [r1, #40]	; 0x28
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	3b01      	subs	r3, #1
 8005722:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	3b01      	subs	r3, #1
 800572c:	025b      	lsls	r3, r3, #9
 800572e:	b29b      	uxth	r3, r3
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	3b01      	subs	r3, #1
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	3b01      	subs	r3, #1
 8005746:	061b      	lsls	r3, r3, #24
 8005748:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800574c:	4931      	ldr	r1, [pc, #196]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 800574e:	4313      	orrs	r3, r2
 8005750:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005752:	4b30      	ldr	r3, [pc, #192]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	492d      	ldr	r1, [pc, #180]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 8005760:	4313      	orrs	r3, r2
 8005762:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005764:	4b2b      	ldr	r3, [pc, #172]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	4928      	ldr	r1, [pc, #160]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005776:	4b27      	ldr	r3, [pc, #156]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	4a26      	ldr	r2, [pc, #152]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 800577c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005780:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005782:	4b24      	ldr	r3, [pc, #144]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 8005784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <RCCEx_PLL3_Config+0x160>)
 8005788:	4013      	ands	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	69d2      	ldr	r2, [r2, #28]
 800578e:	00d2      	lsls	r2, r2, #3
 8005790:	4920      	ldr	r1, [pc, #128]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 8005792:	4313      	orrs	r3, r2
 8005794:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005796:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 800579c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057a8:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80057ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057b4:	e00f      	b.n	80057d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d106      	bne.n	80057ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057bc:	4b15      	ldr	r3, [pc, #84]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4a14      	ldr	r2, [pc, #80]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80057c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057c8:	e005      	b.n	80057d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	4a11      	ldr	r2, [pc, #68]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80057d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057d6:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80057dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e2:	f7fc f905 	bl	80019f0 <HAL_GetTick>
 80057e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057e8:	e008      	b.n	80057fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057ea:	f7fc f901 	bl	80019f0 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e006      	b.n	800580a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057fc:	4b05      	ldr	r3, [pc, #20]	; (8005814 <RCCEx_PLL3_Config+0x15c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0f0      	beq.n	80057ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	58024400 	.word	0x58024400
 8005818:	ffff0007 	.word	0xffff0007

0800581c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e10f      	b.n	8005a4e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a87      	ldr	r2, [pc, #540]	; (8005a58 <HAL_SPI_Init+0x23c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00f      	beq.n	800585e <HAL_SPI_Init+0x42>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a86      	ldr	r2, [pc, #536]	; (8005a5c <HAL_SPI_Init+0x240>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00a      	beq.n	800585e <HAL_SPI_Init+0x42>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a84      	ldr	r2, [pc, #528]	; (8005a60 <HAL_SPI_Init+0x244>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d005      	beq.n	800585e <HAL_SPI_Init+0x42>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b0f      	cmp	r3, #15
 8005858:	d901      	bls.n	800585e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e0f7      	b.n	8005a4e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fd08 	bl	8006274 <SPI_GetPacketSize>
 8005864:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a7b      	ldr	r2, [pc, #492]	; (8005a58 <HAL_SPI_Init+0x23c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00c      	beq.n	800588a <HAL_SPI_Init+0x6e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a79      	ldr	r2, [pc, #484]	; (8005a5c <HAL_SPI_Init+0x240>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <HAL_SPI_Init+0x6e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a78      	ldr	r2, [pc, #480]	; (8005a60 <HAL_SPI_Init+0x244>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d002      	beq.n	800588a <HAL_SPI_Init+0x6e>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b08      	cmp	r3, #8
 8005888:	d811      	bhi.n	80058ae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800588e:	4a72      	ldr	r2, [pc, #456]	; (8005a58 <HAL_SPI_Init+0x23c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d009      	beq.n	80058a8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a70      	ldr	r2, [pc, #448]	; (8005a5c <HAL_SPI_Init+0x240>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_SPI_Init+0x8c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a6f      	ldr	r2, [pc, #444]	; (8005a60 <HAL_SPI_Init+0x244>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d104      	bne.n	80058b2 <HAL_SPI_Init+0x96>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d901      	bls.n	80058b2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e0cd      	b.n	8005a4e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fb fd66 	bl	8001398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80058ee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058f8:	d119      	bne.n	800592e <HAL_SPI_Init+0x112>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005902:	d103      	bne.n	800590c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10c      	bne.n	800592e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800591c:	d107      	bne.n	800592e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800592c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00f      	beq.n	800595a <HAL_SPI_Init+0x13e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b06      	cmp	r3, #6
 8005940:	d90b      	bls.n	800595a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	e007      	b.n	800596a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005968:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69da      	ldr	r2, [r3, #28]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	431a      	orrs	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597c:	ea42 0103 	orr.w	r1, r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ca:	ea42 0103 	orr.w	r1, r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d113      	bne.n	8005a0a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a08:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	40013000 	.word	0x40013000
 8005a5c:	40003800 	.word	0x40003800
 8005a60:	40003c00 	.word	0x40003c00

08005a64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	; 0x38
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3320      	adds	r3, #32
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3330      	adds	r3, #48	; 0x30
 8005a80:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a8e:	f7fb ffaf 	bl	80019f0 <HAL_GetTick>
 8005a92:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005a94:	887b      	ldrh	r3, [r7, #2]
 8005a96:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8005a98:	887b      	ldrh	r3, [r7, #2]
 8005a9a:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d001      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e310      	b.n	80060ce <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x5a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x5a>
 8005ab8:	887b      	ldrh	r3, [r7, #2]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e305      	b.n	80060ce <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_SPI_TransmitReceive+0x6c>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e2fe      	b.n	80060ce <HAL_SPI_TransmitReceive+0x66a>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2205      	movs	r2, #5
 8005adc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	887a      	ldrh	r2, [r7, #2]
 8005af2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	887a      	ldrh	r2, [r7, #2]
 8005afa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	887a      	ldrh	r2, [r7, #2]
 8005b08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	887a      	ldrh	r2, [r7, #2]
 8005b10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8005b2e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a70      	ldr	r2, [pc, #448]	; (8005cf8 <HAL_SPI_TransmitReceive+0x294>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d009      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0xea>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a6f      	ldr	r2, [pc, #444]	; (8005cfc <HAL_SPI_TransmitReceive+0x298>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d004      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0xea>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a6d      	ldr	r2, [pc, #436]	; (8005d00 <HAL_SPI_TransmitReceive+0x29c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d102      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005b4e:	2310      	movs	r3, #16
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b52:	e001      	b.n	8005b58 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005b54:	2308      	movs	r3, #8
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	4b69      	ldr	r3, [pc, #420]	; (8005d04 <HAL_SPI_TransmitReceive+0x2a0>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	8879      	ldrh	r1, [r7, #2]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b84:	d107      	bne.n	8005b96 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	2b0f      	cmp	r3, #15
 8005b9c:	f240 80a2 	bls.w	8005ce4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	089b      	lsrs	r3, r3, #2
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ba6:	e094      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d120      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x194>
 8005bb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01d      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005bbc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005bbe:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d217      	bcs.n	8005bf8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd8:	1d1a      	adds	r2, r3, #4
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bf6:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005c00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d065      	beq.n	8005cd2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d118      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c1e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c42:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c44:	e045      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005c46:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c48:	8bfb      	ldrh	r3, [r7, #30]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d21d      	bcs.n	8005c8a <HAL_SPI_TransmitReceive+0x226>
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d018      	beq.n	8005c8a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c62:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c68:	1d1a      	adds	r2, r3, #4
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c86:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c88:	e023      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c8a:	f7fb feb1 	bl	80019f0 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d803      	bhi.n	8005ca2 <HAL_SPI_TransmitReceive+0x23e>
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d102      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x244>
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d114      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 fa15 	bl	80060d8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e1fd      	b.n	80060ce <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005cd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f47f af67 	bne.w	8005ba8 <HAL_SPI_TransmitReceive+0x144>
 8005cda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f47f af63 	bne.w	8005ba8 <HAL_SPI_TransmitReceive+0x144>
 8005ce2:	e1ce      	b.n	8006082 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	2b07      	cmp	r3, #7
 8005cea:	f240 81c2 	bls.w	8006072 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005cf4:	e0c9      	b.n	8005e8a <HAL_SPI_TransmitReceive+0x426>
 8005cf6:	bf00      	nop
 8005cf8:	40013000 	.word	0x40013000
 8005cfc:	40003800 	.word	0x40003800
 8005d00:	40003c00 	.word	0x40003c00
 8005d04:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d11f      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x2f2>
 8005d16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01c      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005d1c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005d1e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d216      	bcs.n	8005d56 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2c:	881a      	ldrh	r2, [r3, #0]
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d36:	1c9a      	adds	r2, r3, #2
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d54:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8092 	beq.w	8005e8a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d118      	bne.n	8005da6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d78:	6a3a      	ldr	r2, [r7, #32]
 8005d7a:	8812      	ldrh	r2, [r2, #0]
 8005d7c:	b292      	uxth	r2, r2
 8005d7e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d84:	1c9a      	adds	r2, r3, #2
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005da2:	853b      	strh	r3, [r7, #40]	; 0x28
 8005da4:	e071      	b.n	8005e8a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005da6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005da8:	8bfb      	ldrh	r3, [r7, #30]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d228      	bcs.n	8005e00 <HAL_SPI_TransmitReceive+0x39c>
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d023      	beq.n	8005e00 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dbc:	6a3a      	ldr	r2, [r7, #32]
 8005dbe:	8812      	ldrh	r2, [r2, #0]
 8005dc0:	b292      	uxth	r2, r2
 8005dc2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dc8:	1c9a      	adds	r2, r3, #2
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd2:	6a3a      	ldr	r2, [r7, #32]
 8005dd4:	8812      	ldrh	r2, [r2, #0]
 8005dd6:	b292      	uxth	r2, r2
 8005dd8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dde:	1c9a      	adds	r2, r3, #2
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3b02      	subs	r3, #2
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005dfc:	853b      	strh	r3, [r7, #40]	; 0x28
 8005dfe:	e044      	b.n	8005e8a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005e00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d11d      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x3de>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d018      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e14:	6a3a      	ldr	r2, [r7, #32]
 8005e16:	8812      	ldrh	r2, [r2, #0]
 8005e18:	b292      	uxth	r2, r2
 8005e1a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e20:	1c9a      	adds	r2, r3, #2
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e3e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e40:	e023      	b.n	8005e8a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e42:	f7fb fdd5 	bl	80019f0 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d803      	bhi.n	8005e5a <HAL_SPI_TransmitReceive+0x3f6>
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d102      	bne.n	8005e60 <HAL_SPI_TransmitReceive+0x3fc>
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d114      	bne.n	8005e8a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f939 	bl	80060d8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e121      	b.n	80060ce <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f47f af3b 	bne.w	8005d08 <HAL_SPI_TransmitReceive+0x2a4>
 8005e92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f47f af37 	bne.w	8005d08 <HAL_SPI_TransmitReceive+0x2a4>
 8005e9a:	e0f2      	b.n	8006082 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d121      	bne.n	8005eee <HAL_SPI_TransmitReceive+0x48a>
 8005eaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01e      	beq.n	8005eee <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005eb0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005eb2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d218      	bcs.n	8005eee <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3320      	adds	r3, #32
 8005ec6:	7812      	ldrb	r2, [r2, #0]
 8005ec8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005eec:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005ef6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80ba 	beq.w	8006072 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d11b      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f40:	853b      	strh	r3, [r7, #40]	; 0x28
 8005f42:	e096      	b.n	8006072 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005f44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005f46:	8bfb      	ldrh	r3, [r7, #30]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d24a      	bcs.n	8005fe2 <HAL_SPI_TransmitReceive+0x57e>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d045      	beq.n	8005fe2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f62:	7812      	ldrb	r2, [r2, #0]
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f7e:	7812      	ldrb	r2, [r2, #0]
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f9a:	7812      	ldrb	r2, [r2, #0]
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb6:	7812      	ldrb	r2, [r2, #0]
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b04      	subs	r3, #4
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fde:	853b      	strh	r3, [r7, #40]	; 0x28
 8005fe0:	e047      	b.n	8006072 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005fe2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d820      	bhi.n	800602a <HAL_SPI_TransmitReceive+0x5c6>
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01b      	beq.n	800602a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ffe:	7812      	ldrb	r2, [r2, #0]
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006026:	853b      	strh	r3, [r7, #40]	; 0x28
 8006028:	e023      	b.n	8006072 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800602a:	f7fb fce1 	bl	80019f0 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006036:	429a      	cmp	r2, r3
 8006038:	d803      	bhi.n	8006042 <HAL_SPI_TransmitReceive+0x5de>
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d102      	bne.n	8006048 <HAL_SPI_TransmitReceive+0x5e4>
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	2b00      	cmp	r3, #0
 8006046:	d114      	bne.n	8006072 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f845 	bl	80060d8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006054:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e02d      	b.n	80060ce <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006072:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006074:	2b00      	cmp	r3, #0
 8006076:	f47f af11 	bne.w	8005e9c <HAL_SPI_TransmitReceive+0x438>
 800607a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800607c:	2b00      	cmp	r3, #0
 800607e:	f47f af0d 	bne.w	8005e9c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	2200      	movs	r2, #0
 800608a:	2108      	movs	r1, #8
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f8c3 	bl	8006218 <SPI_WaitOnFlagUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800609e:	f043 0220 	orr.w	r2, r3, #32
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f815 	bl	80060d8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e000      	b.n	80060ce <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80060cc:	2300      	movs	r3, #0
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3730      	adds	r7, #48	; 0x30
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop

080060d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0208 	orr.w	r2, r2, #8
 80060f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0210 	orr.w	r2, r2, #16
 8006106:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0201 	bic.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6919      	ldr	r1, [r3, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b3c      	ldr	r3, [pc, #240]	; (8006214 <SPI_CloseTransfer+0x13c>)
 8006124:	400b      	ands	r3, r1
 8006126:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006136:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b04      	cmp	r3, #4
 8006142:	d014      	beq.n	800616e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00f      	beq.n	800616e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006154:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	699a      	ldr	r2, [r3, #24]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0220 	orr.w	r2, r2, #32
 800616c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b03      	cmp	r3, #3
 8006178:	d014      	beq.n	80061a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00f      	beq.n	80061a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800618a:	f043 0204 	orr.w	r2, r3, #4
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00f      	beq.n	80061ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b4:	f043 0201 	orr.w	r2, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699a      	ldr	r2, [r3, #24]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00f      	beq.n	80061f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061de:	f043 0208 	orr.w	r2, r3, #8
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	fffffc90 	.word	0xfffffc90

08006218 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	4613      	mov	r3, r2
 8006226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006228:	e010      	b.n	800624c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800622a:	f7fb fbe1 	bl	80019f0 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d803      	bhi.n	8006242 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006240:	d102      	bne.n	8006248 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e00f      	b.n	800626c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4013      	ands	r3, r2
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	bf0c      	ite	eq
 800625c:	2301      	moveq	r3, #1
 800625e:	2300      	movne	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	429a      	cmp	r2, r3
 8006268:	d0df      	beq.n	800622a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	3307      	adds	r3, #7
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	fb02 f303 	mul.w	r3, r2, r3
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b082      	sub	sp, #8
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e049      	b.n	8006350 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f841 	bl	8006358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2202      	movs	r2, #2
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4619      	mov	r1, r3
 80062e8:	4610      	mov	r0, r2
 80062ea:	f000 f9e7 	bl	80066bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d001      	beq.n	8006384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e054      	b.n	800642e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a26      	ldr	r2, [pc, #152]	; (800643c <HAL_TIM_Base_Start_IT+0xd0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d022      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0x80>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ae:	d01d      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0x80>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a22      	ldr	r2, [pc, #136]	; (8006440 <HAL_TIM_Base_Start_IT+0xd4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d018      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0x80>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a21      	ldr	r2, [pc, #132]	; (8006444 <HAL_TIM_Base_Start_IT+0xd8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d013      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0x80>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1f      	ldr	r2, [pc, #124]	; (8006448 <HAL_TIM_Base_Start_IT+0xdc>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00e      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0x80>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1e      	ldr	r2, [pc, #120]	; (800644c <HAL_TIM_Base_Start_IT+0xe0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d009      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0x80>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1c      	ldr	r2, [pc, #112]	; (8006450 <HAL_TIM_Base_Start_IT+0xe4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d004      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0x80>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1b      	ldr	r2, [pc, #108]	; (8006454 <HAL_TIM_Base_Start_IT+0xe8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d115      	bne.n	8006418 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	4b19      	ldr	r3, [pc, #100]	; (8006458 <HAL_TIM_Base_Start_IT+0xec>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b06      	cmp	r3, #6
 80063fc:	d015      	beq.n	800642a <HAL_TIM_Base_Start_IT+0xbe>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006404:	d011      	beq.n	800642a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0201 	orr.w	r2, r2, #1
 8006414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006416:	e008      	b.n	800642a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	e000      	b.n	800642c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40010000 	.word	0x40010000
 8006440:	40000400 	.word	0x40000400
 8006444:	40000800 	.word	0x40000800
 8006448:	40000c00 	.word	0x40000c00
 800644c:	40010400 	.word	0x40010400
 8006450:	40001800 	.word	0x40001800
 8006454:	40014000 	.word	0x40014000
 8006458:	00010007 	.word	0x00010007

0800645c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d020      	beq.n	80064c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01b      	beq.n	80064c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0202 	mvn.w	r2, #2
 8006490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f8e9 	bl	800667e <HAL_TIM_IC_CaptureCallback>
 80064ac:	e005      	b.n	80064ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f8db 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f8ec 	bl	8006692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d020      	beq.n	800650c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01b      	beq.n	800650c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0204 	mvn.w	r2, #4
 80064dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f8c3 	bl	800667e <HAL_TIM_IC_CaptureCallback>
 80064f8:	e005      	b.n	8006506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8b5 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f8c6 	bl	8006692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d020      	beq.n	8006558 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01b      	beq.n	8006558 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0208 	mvn.w	r2, #8
 8006528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2204      	movs	r2, #4
 800652e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f89d 	bl	800667e <HAL_TIM_IC_CaptureCallback>
 8006544:	e005      	b.n	8006552 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f88f 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f8a0 	bl	8006692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 0310 	and.w	r3, r3, #16
 800655e:	2b00      	cmp	r3, #0
 8006560:	d020      	beq.n	80065a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01b      	beq.n	80065a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0210 	mvn.w	r2, #16
 8006574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2208      	movs	r2, #8
 800657a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f877 	bl	800667e <HAL_TIM_IC_CaptureCallback>
 8006590:	e005      	b.n	800659e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f869 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f87a 	bl	8006692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00c      	beq.n	80065c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0201 	mvn.w	r2, #1
 80065c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fa fde4 	bl	8001190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d104      	bne.n	80065dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00c      	beq.n	80065f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80065ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f913 	bl	800681c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00c      	beq.n	800661a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006606:	2b00      	cmp	r3, #0
 8006608:	d007      	beq.n	800661a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f90b 	bl	8006830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00c      	beq.n	800663e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f834 	bl	80066a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00c      	beq.n	8006662 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f06f 0220 	mvn.w	r2, #32
 800665a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f8d3 	bl	8006808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a46      	ldr	r2, [pc, #280]	; (80067e8 <TIM_Base_SetConfig+0x12c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d013      	beq.n	80066fc <TIM_Base_SetConfig+0x40>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066da:	d00f      	beq.n	80066fc <TIM_Base_SetConfig+0x40>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a43      	ldr	r2, [pc, #268]	; (80067ec <TIM_Base_SetConfig+0x130>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00b      	beq.n	80066fc <TIM_Base_SetConfig+0x40>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a42      	ldr	r2, [pc, #264]	; (80067f0 <TIM_Base_SetConfig+0x134>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d007      	beq.n	80066fc <TIM_Base_SetConfig+0x40>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a41      	ldr	r2, [pc, #260]	; (80067f4 <TIM_Base_SetConfig+0x138>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_Base_SetConfig+0x40>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a40      	ldr	r2, [pc, #256]	; (80067f8 <TIM_Base_SetConfig+0x13c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d108      	bne.n	800670e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a35      	ldr	r2, [pc, #212]	; (80067e8 <TIM_Base_SetConfig+0x12c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d01f      	beq.n	8006756 <TIM_Base_SetConfig+0x9a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671c:	d01b      	beq.n	8006756 <TIM_Base_SetConfig+0x9a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a32      	ldr	r2, [pc, #200]	; (80067ec <TIM_Base_SetConfig+0x130>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d017      	beq.n	8006756 <TIM_Base_SetConfig+0x9a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a31      	ldr	r2, [pc, #196]	; (80067f0 <TIM_Base_SetConfig+0x134>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d013      	beq.n	8006756 <TIM_Base_SetConfig+0x9a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a30      	ldr	r2, [pc, #192]	; (80067f4 <TIM_Base_SetConfig+0x138>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00f      	beq.n	8006756 <TIM_Base_SetConfig+0x9a>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a2f      	ldr	r2, [pc, #188]	; (80067f8 <TIM_Base_SetConfig+0x13c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_Base_SetConfig+0x9a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a2e      	ldr	r2, [pc, #184]	; (80067fc <TIM_Base_SetConfig+0x140>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d007      	beq.n	8006756 <TIM_Base_SetConfig+0x9a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a2d      	ldr	r2, [pc, #180]	; (8006800 <TIM_Base_SetConfig+0x144>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_Base_SetConfig+0x9a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a2c      	ldr	r2, [pc, #176]	; (8006804 <TIM_Base_SetConfig+0x148>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d108      	bne.n	8006768 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a16      	ldr	r2, [pc, #88]	; (80067e8 <TIM_Base_SetConfig+0x12c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00f      	beq.n	80067b4 <TIM_Base_SetConfig+0xf8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <TIM_Base_SetConfig+0x13c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00b      	beq.n	80067b4 <TIM_Base_SetConfig+0xf8>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a17      	ldr	r2, [pc, #92]	; (80067fc <TIM_Base_SetConfig+0x140>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d007      	beq.n	80067b4 <TIM_Base_SetConfig+0xf8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a16      	ldr	r2, [pc, #88]	; (8006800 <TIM_Base_SetConfig+0x144>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_Base_SetConfig+0xf8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a15      	ldr	r2, [pc, #84]	; (8006804 <TIM_Base_SetConfig+0x148>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d103      	bne.n	80067bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	691a      	ldr	r2, [r3, #16]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d105      	bne.n	80067da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f023 0201 	bic.w	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	611a      	str	r2, [r3, #16]
  }
}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40000400 	.word	0x40000400
 80067f0:	40000800 	.word	0x40000800
 80067f4:	40000c00 	.word	0x40000c00
 80067f8:	40010400 	.word	0x40010400
 80067fc:	40014000 	.word	0x40014000
 8006800:	40014400 	.word	0x40014400
 8006804:	40014800 	.word	0x40014800

08006808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e042      	b.n	80068dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fa fe23 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2224      	movs	r2, #36	; 0x24
 8006872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fd90 	bl	80073b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f825 	bl	80068e4 <UART_SetConfig>
 800689a:	4603      	mov	r3, r0
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e01b      	b.n	80068dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fe0f 	bl	80074f8 <UART_CheckIdleState>
 80068da:	4603      	mov	r3, r0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068e8:	b092      	sub	sp, #72	; 0x48
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	431a      	orrs	r2, r3
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	431a      	orrs	r2, r3
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	4313      	orrs	r3, r2
 800690a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4bbe      	ldr	r3, [pc, #760]	; (8006c0c <UART_SetConfig+0x328>)
 8006914:	4013      	ands	r3, r2
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	6812      	ldr	r2, [r2, #0]
 800691a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800691c:	430b      	orrs	r3, r1
 800691e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4ab3      	ldr	r2, [pc, #716]	; (8006c10 <UART_SetConfig+0x32c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d004      	beq.n	8006950 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800694c:	4313      	orrs	r3, r2
 800694e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	4baf      	ldr	r3, [pc, #700]	; (8006c14 <UART_SetConfig+0x330>)
 8006958:	4013      	ands	r3, r2
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006960:	430b      	orrs	r3, r1
 8006962:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	f023 010f 	bic.w	r1, r3, #15
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4aa6      	ldr	r2, [pc, #664]	; (8006c18 <UART_SetConfig+0x334>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d177      	bne.n	8006a74 <UART_SetConfig+0x190>
 8006984:	4ba5      	ldr	r3, [pc, #660]	; (8006c1c <UART_SetConfig+0x338>)
 8006986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006988:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800698c:	2b28      	cmp	r3, #40	; 0x28
 800698e:	d86d      	bhi.n	8006a6c <UART_SetConfig+0x188>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <UART_SetConfig+0xb4>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	08006a3d 	.word	0x08006a3d
 800699c:	08006a6d 	.word	0x08006a6d
 80069a0:	08006a6d 	.word	0x08006a6d
 80069a4:	08006a6d 	.word	0x08006a6d
 80069a8:	08006a6d 	.word	0x08006a6d
 80069ac:	08006a6d 	.word	0x08006a6d
 80069b0:	08006a6d 	.word	0x08006a6d
 80069b4:	08006a6d 	.word	0x08006a6d
 80069b8:	08006a45 	.word	0x08006a45
 80069bc:	08006a6d 	.word	0x08006a6d
 80069c0:	08006a6d 	.word	0x08006a6d
 80069c4:	08006a6d 	.word	0x08006a6d
 80069c8:	08006a6d 	.word	0x08006a6d
 80069cc:	08006a6d 	.word	0x08006a6d
 80069d0:	08006a6d 	.word	0x08006a6d
 80069d4:	08006a6d 	.word	0x08006a6d
 80069d8:	08006a4d 	.word	0x08006a4d
 80069dc:	08006a6d 	.word	0x08006a6d
 80069e0:	08006a6d 	.word	0x08006a6d
 80069e4:	08006a6d 	.word	0x08006a6d
 80069e8:	08006a6d 	.word	0x08006a6d
 80069ec:	08006a6d 	.word	0x08006a6d
 80069f0:	08006a6d 	.word	0x08006a6d
 80069f4:	08006a6d 	.word	0x08006a6d
 80069f8:	08006a55 	.word	0x08006a55
 80069fc:	08006a6d 	.word	0x08006a6d
 8006a00:	08006a6d 	.word	0x08006a6d
 8006a04:	08006a6d 	.word	0x08006a6d
 8006a08:	08006a6d 	.word	0x08006a6d
 8006a0c:	08006a6d 	.word	0x08006a6d
 8006a10:	08006a6d 	.word	0x08006a6d
 8006a14:	08006a6d 	.word	0x08006a6d
 8006a18:	08006a5d 	.word	0x08006a5d
 8006a1c:	08006a6d 	.word	0x08006a6d
 8006a20:	08006a6d 	.word	0x08006a6d
 8006a24:	08006a6d 	.word	0x08006a6d
 8006a28:	08006a6d 	.word	0x08006a6d
 8006a2c:	08006a6d 	.word	0x08006a6d
 8006a30:	08006a6d 	.word	0x08006a6d
 8006a34:	08006a6d 	.word	0x08006a6d
 8006a38:	08006a65 	.word	0x08006a65
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a42:	e222      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006a44:	2304      	movs	r3, #4
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4a:	e21e      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a52:	e21a      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006a54:	2310      	movs	r3, #16
 8006a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a5a:	e216      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006a5c:	2320      	movs	r3, #32
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a62:	e212      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006a64:	2340      	movs	r3, #64	; 0x40
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a6a:	e20e      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006a6c:	2380      	movs	r3, #128	; 0x80
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a72:	e20a      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a69      	ldr	r2, [pc, #420]	; (8006c20 <UART_SetConfig+0x33c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d130      	bne.n	8006ae0 <UART_SetConfig+0x1fc>
 8006a7e:	4b67      	ldr	r3, [pc, #412]	; (8006c1c <UART_SetConfig+0x338>)
 8006a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	d826      	bhi.n	8006ad8 <UART_SetConfig+0x1f4>
 8006a8a:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <UART_SetConfig+0x1ac>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006aa9 	.word	0x08006aa9
 8006a94:	08006ab1 	.word	0x08006ab1
 8006a98:	08006ab9 	.word	0x08006ab9
 8006a9c:	08006ac1 	.word	0x08006ac1
 8006aa0:	08006ac9 	.word	0x08006ac9
 8006aa4:	08006ad1 	.word	0x08006ad1
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aae:	e1ec      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab6:	e1e8      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006ab8:	2308      	movs	r3, #8
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006abe:	e1e4      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac6:	e1e0      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006ac8:	2320      	movs	r3, #32
 8006aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ace:	e1dc      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006ad0:	2340      	movs	r3, #64	; 0x40
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad6:	e1d8      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006ad8:	2380      	movs	r3, #128	; 0x80
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ade:	e1d4      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a4f      	ldr	r2, [pc, #316]	; (8006c24 <UART_SetConfig+0x340>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d130      	bne.n	8006b4c <UART_SetConfig+0x268>
 8006aea:	4b4c      	ldr	r3, [pc, #304]	; (8006c1c <UART_SetConfig+0x338>)
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	d826      	bhi.n	8006b44 <UART_SetConfig+0x260>
 8006af6:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <UART_SetConfig+0x218>)
 8006af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afc:	08006b15 	.word	0x08006b15
 8006b00:	08006b1d 	.word	0x08006b1d
 8006b04:	08006b25 	.word	0x08006b25
 8006b08:	08006b2d 	.word	0x08006b2d
 8006b0c:	08006b35 	.word	0x08006b35
 8006b10:	08006b3d 	.word	0x08006b3d
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e1b6      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b22:	e1b2      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006b24:	2308      	movs	r3, #8
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2a:	e1ae      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006b2c:	2310      	movs	r3, #16
 8006b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b32:	e1aa      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006b34:	2320      	movs	r3, #32
 8006b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b3a:	e1a6      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006b3c:	2340      	movs	r3, #64	; 0x40
 8006b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b42:	e1a2      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006b44:	2380      	movs	r3, #128	; 0x80
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b4a:	e19e      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a35      	ldr	r2, [pc, #212]	; (8006c28 <UART_SetConfig+0x344>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d130      	bne.n	8006bb8 <UART_SetConfig+0x2d4>
 8006b56:	4b31      	ldr	r3, [pc, #196]	; (8006c1c <UART_SetConfig+0x338>)
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	2b05      	cmp	r3, #5
 8006b60:	d826      	bhi.n	8006bb0 <UART_SetConfig+0x2cc>
 8006b62:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <UART_SetConfig+0x284>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006b81 	.word	0x08006b81
 8006b6c:	08006b89 	.word	0x08006b89
 8006b70:	08006b91 	.word	0x08006b91
 8006b74:	08006b99 	.word	0x08006b99
 8006b78:	08006ba1 	.word	0x08006ba1
 8006b7c:	08006ba9 	.word	0x08006ba9
 8006b80:	2300      	movs	r3, #0
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b86:	e180      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006b88:	2304      	movs	r3, #4
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8e:	e17c      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006b90:	2308      	movs	r3, #8
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b96:	e178      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006b98:	2310      	movs	r3, #16
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b9e:	e174      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006ba0:	2320      	movs	r3, #32
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ba6:	e170      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006ba8:	2340      	movs	r3, #64	; 0x40
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bae:	e16c      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bb6:	e168      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1b      	ldr	r2, [pc, #108]	; (8006c2c <UART_SetConfig+0x348>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d142      	bne.n	8006c48 <UART_SetConfig+0x364>
 8006bc2:	4b16      	ldr	r3, [pc, #88]	; (8006c1c <UART_SetConfig+0x338>)
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	d838      	bhi.n	8006c40 <UART_SetConfig+0x35c>
 8006bce:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <UART_SetConfig+0x2f0>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006bed 	.word	0x08006bed
 8006bd8:	08006bf5 	.word	0x08006bf5
 8006bdc:	08006bfd 	.word	0x08006bfd
 8006be0:	08006c05 	.word	0x08006c05
 8006be4:	08006c31 	.word	0x08006c31
 8006be8:	08006c39 	.word	0x08006c39
 8006bec:	2300      	movs	r3, #0
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf2:	e14a      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e146      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c02:	e142      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006c04:	2310      	movs	r3, #16
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0a:	e13e      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006c0c:	cfff69f3 	.word	0xcfff69f3
 8006c10:	58000c00 	.word	0x58000c00
 8006c14:	11fff4ff 	.word	0x11fff4ff
 8006c18:	40011000 	.word	0x40011000
 8006c1c:	58024400 	.word	0x58024400
 8006c20:	40004400 	.word	0x40004400
 8006c24:	40004800 	.word	0x40004800
 8006c28:	40004c00 	.word	0x40004c00
 8006c2c:	40005000 	.word	0x40005000
 8006c30:	2320      	movs	r3, #32
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c36:	e128      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006c38:	2340      	movs	r3, #64	; 0x40
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3e:	e124      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c46:	e120      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4acb      	ldr	r2, [pc, #812]	; (8006f7c <UART_SetConfig+0x698>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d176      	bne.n	8006d40 <UART_SetConfig+0x45c>
 8006c52:	4bcb      	ldr	r3, [pc, #812]	; (8006f80 <UART_SetConfig+0x69c>)
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c5a:	2b28      	cmp	r3, #40	; 0x28
 8006c5c:	d86c      	bhi.n	8006d38 <UART_SetConfig+0x454>
 8006c5e:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <UART_SetConfig+0x380>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006d09 	.word	0x08006d09
 8006c68:	08006d39 	.word	0x08006d39
 8006c6c:	08006d39 	.word	0x08006d39
 8006c70:	08006d39 	.word	0x08006d39
 8006c74:	08006d39 	.word	0x08006d39
 8006c78:	08006d39 	.word	0x08006d39
 8006c7c:	08006d39 	.word	0x08006d39
 8006c80:	08006d39 	.word	0x08006d39
 8006c84:	08006d11 	.word	0x08006d11
 8006c88:	08006d39 	.word	0x08006d39
 8006c8c:	08006d39 	.word	0x08006d39
 8006c90:	08006d39 	.word	0x08006d39
 8006c94:	08006d39 	.word	0x08006d39
 8006c98:	08006d39 	.word	0x08006d39
 8006c9c:	08006d39 	.word	0x08006d39
 8006ca0:	08006d39 	.word	0x08006d39
 8006ca4:	08006d19 	.word	0x08006d19
 8006ca8:	08006d39 	.word	0x08006d39
 8006cac:	08006d39 	.word	0x08006d39
 8006cb0:	08006d39 	.word	0x08006d39
 8006cb4:	08006d39 	.word	0x08006d39
 8006cb8:	08006d39 	.word	0x08006d39
 8006cbc:	08006d39 	.word	0x08006d39
 8006cc0:	08006d39 	.word	0x08006d39
 8006cc4:	08006d21 	.word	0x08006d21
 8006cc8:	08006d39 	.word	0x08006d39
 8006ccc:	08006d39 	.word	0x08006d39
 8006cd0:	08006d39 	.word	0x08006d39
 8006cd4:	08006d39 	.word	0x08006d39
 8006cd8:	08006d39 	.word	0x08006d39
 8006cdc:	08006d39 	.word	0x08006d39
 8006ce0:	08006d39 	.word	0x08006d39
 8006ce4:	08006d29 	.word	0x08006d29
 8006ce8:	08006d39 	.word	0x08006d39
 8006cec:	08006d39 	.word	0x08006d39
 8006cf0:	08006d39 	.word	0x08006d39
 8006cf4:	08006d39 	.word	0x08006d39
 8006cf8:	08006d39 	.word	0x08006d39
 8006cfc:	08006d39 	.word	0x08006d39
 8006d00:	08006d39 	.word	0x08006d39
 8006d04:	08006d31 	.word	0x08006d31
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0e:	e0bc      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d10:	2304      	movs	r3, #4
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d16:	e0b8      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d18:	2308      	movs	r3, #8
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1e:	e0b4      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d20:	2310      	movs	r3, #16
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d26:	e0b0      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d28:	2320      	movs	r3, #32
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2e:	e0ac      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d30:	2340      	movs	r3, #64	; 0x40
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d36:	e0a8      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d38:	2380      	movs	r3, #128	; 0x80
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d3e:	e0a4      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a8f      	ldr	r2, [pc, #572]	; (8006f84 <UART_SetConfig+0x6a0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d130      	bne.n	8006dac <UART_SetConfig+0x4c8>
 8006d4a:	4b8d      	ldr	r3, [pc, #564]	; (8006f80 <UART_SetConfig+0x69c>)
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	2b05      	cmp	r3, #5
 8006d54:	d826      	bhi.n	8006da4 <UART_SetConfig+0x4c0>
 8006d56:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <UART_SetConfig+0x478>)
 8006d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5c:	08006d75 	.word	0x08006d75
 8006d60:	08006d7d 	.word	0x08006d7d
 8006d64:	08006d85 	.word	0x08006d85
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	2300      	movs	r3, #0
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7a:	e086      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d82:	e082      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d84:	2308      	movs	r3, #8
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8a:	e07e      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d92:	e07a      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d94:	2320      	movs	r3, #32
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d9a:	e076      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006d9c:	2340      	movs	r3, #64	; 0x40
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da2:	e072      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006da4:	2380      	movs	r3, #128	; 0x80
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006daa:	e06e      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a75      	ldr	r2, [pc, #468]	; (8006f88 <UART_SetConfig+0x6a4>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d130      	bne.n	8006e18 <UART_SetConfig+0x534>
 8006db6:	4b72      	ldr	r3, [pc, #456]	; (8006f80 <UART_SetConfig+0x69c>)
 8006db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d826      	bhi.n	8006e10 <UART_SetConfig+0x52c>
 8006dc2:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <UART_SetConfig+0x4e4>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006de1 	.word	0x08006de1
 8006dcc:	08006de9 	.word	0x08006de9
 8006dd0:	08006df1 	.word	0x08006df1
 8006dd4:	08006df9 	.word	0x08006df9
 8006dd8:	08006e01 	.word	0x08006e01
 8006ddc:	08006e09 	.word	0x08006e09
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de6:	e050      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006de8:	2304      	movs	r3, #4
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dee:	e04c      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006df0:	2308      	movs	r3, #8
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df6:	e048      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfe:	e044      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006e00:	2320      	movs	r3, #32
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e06:	e040      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006e08:	2340      	movs	r3, #64	; 0x40
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0e:	e03c      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e16:	e038      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a5b      	ldr	r2, [pc, #364]	; (8006f8c <UART_SetConfig+0x6a8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d130      	bne.n	8006e84 <UART_SetConfig+0x5a0>
 8006e22:	4b57      	ldr	r3, [pc, #348]	; (8006f80 <UART_SetConfig+0x69c>)
 8006e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	d826      	bhi.n	8006e7c <UART_SetConfig+0x598>
 8006e2e:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x550>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e4d 	.word	0x08006e4d
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	08006e5d 	.word	0x08006e5d
 8006e40:	08006e65 	.word	0x08006e65
 8006e44:	08006e6d 	.word	0x08006e6d
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e01a      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006e54:	2304      	movs	r3, #4
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e016      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e012      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e00e      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006e6c:	2320      	movs	r3, #32
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e00a      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006e74:	2340      	movs	r3, #64	; 0x40
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7a:	e006      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006e7c:	2380      	movs	r3, #128	; 0x80
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e82:	e002      	b.n	8006e8a <UART_SetConfig+0x5a6>
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a3f      	ldr	r2, [pc, #252]	; (8006f8c <UART_SetConfig+0x6a8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	f040 80f8 	bne.w	8007086 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	dc46      	bgt.n	8006f2c <UART_SetConfig+0x648>
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	f2c0 8082 	blt.w	8006fa8 <UART_SetConfig+0x6c4>
 8006ea4:	3b02      	subs	r3, #2
 8006ea6:	2b1e      	cmp	r3, #30
 8006ea8:	d87e      	bhi.n	8006fa8 <UART_SetConfig+0x6c4>
 8006eaa:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <UART_SetConfig+0x5cc>)
 8006eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb0:	08006f33 	.word	0x08006f33
 8006eb4:	08006fa9 	.word	0x08006fa9
 8006eb8:	08006f3b 	.word	0x08006f3b
 8006ebc:	08006fa9 	.word	0x08006fa9
 8006ec0:	08006fa9 	.word	0x08006fa9
 8006ec4:	08006fa9 	.word	0x08006fa9
 8006ec8:	08006f4b 	.word	0x08006f4b
 8006ecc:	08006fa9 	.word	0x08006fa9
 8006ed0:	08006fa9 	.word	0x08006fa9
 8006ed4:	08006fa9 	.word	0x08006fa9
 8006ed8:	08006fa9 	.word	0x08006fa9
 8006edc:	08006fa9 	.word	0x08006fa9
 8006ee0:	08006fa9 	.word	0x08006fa9
 8006ee4:	08006fa9 	.word	0x08006fa9
 8006ee8:	08006f5b 	.word	0x08006f5b
 8006eec:	08006fa9 	.word	0x08006fa9
 8006ef0:	08006fa9 	.word	0x08006fa9
 8006ef4:	08006fa9 	.word	0x08006fa9
 8006ef8:	08006fa9 	.word	0x08006fa9
 8006efc:	08006fa9 	.word	0x08006fa9
 8006f00:	08006fa9 	.word	0x08006fa9
 8006f04:	08006fa9 	.word	0x08006fa9
 8006f08:	08006fa9 	.word	0x08006fa9
 8006f0c:	08006fa9 	.word	0x08006fa9
 8006f10:	08006fa9 	.word	0x08006fa9
 8006f14:	08006fa9 	.word	0x08006fa9
 8006f18:	08006fa9 	.word	0x08006fa9
 8006f1c:	08006fa9 	.word	0x08006fa9
 8006f20:	08006fa9 	.word	0x08006fa9
 8006f24:	08006fa9 	.word	0x08006fa9
 8006f28:	08006f9b 	.word	0x08006f9b
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d037      	beq.n	8006fa0 <UART_SetConfig+0x6bc>
 8006f30:	e03a      	b.n	8006fa8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006f32:	f7fe f851 	bl	8004fd8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f38:	e03c      	b.n	8006fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe f860 	bl	8005004 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f48:	e034      	b.n	8006fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f4a:	f107 0318 	add.w	r3, r7, #24
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe f9ac 	bl	80052ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f58:	e02c      	b.n	8006fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f5a:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <UART_SetConfig+0x69c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d016      	beq.n	8006f94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f66:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <UART_SetConfig+0x69c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	08db      	lsrs	r3, r3, #3
 8006f6c:	f003 0303 	and.w	r3, r3, #3
 8006f70:	4a07      	ldr	r2, [pc, #28]	; (8006f90 <UART_SetConfig+0x6ac>)
 8006f72:	fa22 f303 	lsr.w	r3, r2, r3
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f78:	e01c      	b.n	8006fb4 <UART_SetConfig+0x6d0>
 8006f7a:	bf00      	nop
 8006f7c:	40011400 	.word	0x40011400
 8006f80:	58024400 	.word	0x58024400
 8006f84:	40007800 	.word	0x40007800
 8006f88:	40007c00 	.word	0x40007c00
 8006f8c:	58000c00 	.word	0x58000c00
 8006f90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006f94:	4b9d      	ldr	r3, [pc, #628]	; (800720c <UART_SetConfig+0x928>)
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f98:	e00c      	b.n	8006fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f9a:	4b9d      	ldr	r3, [pc, #628]	; (8007210 <UART_SetConfig+0x92c>)
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f9e:	e009      	b.n	8006fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa6:	e005      	b.n	8006fb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006fb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 81de 	beq.w	8007378 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	4a94      	ldr	r2, [pc, #592]	; (8007214 <UART_SetConfig+0x930>)
 8006fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	4413      	add	r3, r2
 8006fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d305      	bcc.n	8006fec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d903      	bls.n	8006ff4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006ff2:	e1c1      	b.n	8007378 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	60bb      	str	r3, [r7, #8]
 8006ffa:	60fa      	str	r2, [r7, #12]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	4a84      	ldr	r2, [pc, #528]	; (8007214 <UART_SetConfig+0x930>)
 8007002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007006:	b29b      	uxth	r3, r3
 8007008:	2200      	movs	r2, #0
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	607a      	str	r2, [r7, #4]
 800700e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007016:	f7f9 f963 	bl	80002e0 <__aeabi_uldivmod>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4610      	mov	r0, r2
 8007020:	4619      	mov	r1, r3
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	020b      	lsls	r3, r1, #8
 800702c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007030:	0202      	lsls	r2, r0, #8
 8007032:	6979      	ldr	r1, [r7, #20]
 8007034:	6849      	ldr	r1, [r1, #4]
 8007036:	0849      	lsrs	r1, r1, #1
 8007038:	2000      	movs	r0, #0
 800703a:	460c      	mov	r4, r1
 800703c:	4605      	mov	r5, r0
 800703e:	eb12 0804 	adds.w	r8, r2, r4
 8007042:	eb43 0905 	adc.w	r9, r3, r5
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	469a      	mov	sl, r3
 800704e:	4693      	mov	fp, r2
 8007050:	4652      	mov	r2, sl
 8007052:	465b      	mov	r3, fp
 8007054:	4640      	mov	r0, r8
 8007056:	4649      	mov	r1, r9
 8007058:	f7f9 f942 	bl	80002e0 <__aeabi_uldivmod>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4613      	mov	r3, r2
 8007062:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800706a:	d308      	bcc.n	800707e <UART_SetConfig+0x79a>
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007072:	d204      	bcs.n	800707e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800707a:	60da      	str	r2, [r3, #12]
 800707c:	e17c      	b.n	8007378 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007084:	e178      	b.n	8007378 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800708e:	f040 80c5 	bne.w	800721c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007092:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007096:	2b20      	cmp	r3, #32
 8007098:	dc48      	bgt.n	800712c <UART_SetConfig+0x848>
 800709a:	2b00      	cmp	r3, #0
 800709c:	db7b      	blt.n	8007196 <UART_SetConfig+0x8b2>
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d879      	bhi.n	8007196 <UART_SetConfig+0x8b2>
 80070a2:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <UART_SetConfig+0x7c4>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	08007133 	.word	0x08007133
 80070ac:	0800713b 	.word	0x0800713b
 80070b0:	08007197 	.word	0x08007197
 80070b4:	08007197 	.word	0x08007197
 80070b8:	08007143 	.word	0x08007143
 80070bc:	08007197 	.word	0x08007197
 80070c0:	08007197 	.word	0x08007197
 80070c4:	08007197 	.word	0x08007197
 80070c8:	08007153 	.word	0x08007153
 80070cc:	08007197 	.word	0x08007197
 80070d0:	08007197 	.word	0x08007197
 80070d4:	08007197 	.word	0x08007197
 80070d8:	08007197 	.word	0x08007197
 80070dc:	08007197 	.word	0x08007197
 80070e0:	08007197 	.word	0x08007197
 80070e4:	08007197 	.word	0x08007197
 80070e8:	08007163 	.word	0x08007163
 80070ec:	08007197 	.word	0x08007197
 80070f0:	08007197 	.word	0x08007197
 80070f4:	08007197 	.word	0x08007197
 80070f8:	08007197 	.word	0x08007197
 80070fc:	08007197 	.word	0x08007197
 8007100:	08007197 	.word	0x08007197
 8007104:	08007197 	.word	0x08007197
 8007108:	08007197 	.word	0x08007197
 800710c:	08007197 	.word	0x08007197
 8007110:	08007197 	.word	0x08007197
 8007114:	08007197 	.word	0x08007197
 8007118:	08007197 	.word	0x08007197
 800711c:	08007197 	.word	0x08007197
 8007120:	08007197 	.word	0x08007197
 8007124:	08007197 	.word	0x08007197
 8007128:	08007189 	.word	0x08007189
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d02e      	beq.n	800718e <UART_SetConfig+0x8aa>
 8007130:	e031      	b.n	8007196 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007132:	f7fc fcd9 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8007136:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007138:	e033      	b.n	80071a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800713a:	f7fc fceb 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 800713e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007140:	e02f      	b.n	80071a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007146:	4618      	mov	r0, r3
 8007148:	f7fd ff5c 	bl	8005004 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007150:	e027      	b.n	80071a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007152:	f107 0318 	add.w	r3, r7, #24
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe f8a8 	bl	80052ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007160:	e01f      	b.n	80071a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007162:	4b2d      	ldr	r3, [pc, #180]	; (8007218 <UART_SetConfig+0x934>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800716e:	4b2a      	ldr	r3, [pc, #168]	; (8007218 <UART_SetConfig+0x934>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	08db      	lsrs	r3, r3, #3
 8007174:	f003 0303 	and.w	r3, r3, #3
 8007178:	4a24      	ldr	r2, [pc, #144]	; (800720c <UART_SetConfig+0x928>)
 800717a:	fa22 f303 	lsr.w	r3, r2, r3
 800717e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007180:	e00f      	b.n	80071a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007182:	4b22      	ldr	r3, [pc, #136]	; (800720c <UART_SetConfig+0x928>)
 8007184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007186:	e00c      	b.n	80071a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007188:	4b21      	ldr	r3, [pc, #132]	; (8007210 <UART_SetConfig+0x92c>)
 800718a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800718c:	e009      	b.n	80071a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800718e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007194:	e005      	b.n	80071a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 80e7 	beq.w	8007378 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	4a19      	ldr	r2, [pc, #100]	; (8007214 <UART_SetConfig+0x930>)
 80071b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071b4:	461a      	mov	r2, r3
 80071b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80071bc:	005a      	lsls	r2, r3, #1
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	085b      	lsrs	r3, r3, #1
 80071c4:	441a      	add	r2, r3
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d2:	2b0f      	cmp	r3, #15
 80071d4:	d916      	bls.n	8007204 <UART_SetConfig+0x920>
 80071d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071dc:	d212      	bcs.n	8007204 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f023 030f 	bic.w	r3, r3, #15
 80071e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	085b      	lsrs	r3, r3, #1
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071f6:	4313      	orrs	r3, r2
 80071f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007200:	60da      	str	r2, [r3, #12]
 8007202:	e0b9      	b.n	8007378 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800720a:	e0b5      	b.n	8007378 <UART_SetConfig+0xa94>
 800720c:	03d09000 	.word	0x03d09000
 8007210:	003d0900 	.word	0x003d0900
 8007214:	080098dc 	.word	0x080098dc
 8007218:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800721c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007220:	2b20      	cmp	r3, #32
 8007222:	dc49      	bgt.n	80072b8 <UART_SetConfig+0x9d4>
 8007224:	2b00      	cmp	r3, #0
 8007226:	db7c      	blt.n	8007322 <UART_SetConfig+0xa3e>
 8007228:	2b20      	cmp	r3, #32
 800722a:	d87a      	bhi.n	8007322 <UART_SetConfig+0xa3e>
 800722c:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <UART_SetConfig+0x950>)
 800722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007232:	bf00      	nop
 8007234:	080072bf 	.word	0x080072bf
 8007238:	080072c7 	.word	0x080072c7
 800723c:	08007323 	.word	0x08007323
 8007240:	08007323 	.word	0x08007323
 8007244:	080072cf 	.word	0x080072cf
 8007248:	08007323 	.word	0x08007323
 800724c:	08007323 	.word	0x08007323
 8007250:	08007323 	.word	0x08007323
 8007254:	080072df 	.word	0x080072df
 8007258:	08007323 	.word	0x08007323
 800725c:	08007323 	.word	0x08007323
 8007260:	08007323 	.word	0x08007323
 8007264:	08007323 	.word	0x08007323
 8007268:	08007323 	.word	0x08007323
 800726c:	08007323 	.word	0x08007323
 8007270:	08007323 	.word	0x08007323
 8007274:	080072ef 	.word	0x080072ef
 8007278:	08007323 	.word	0x08007323
 800727c:	08007323 	.word	0x08007323
 8007280:	08007323 	.word	0x08007323
 8007284:	08007323 	.word	0x08007323
 8007288:	08007323 	.word	0x08007323
 800728c:	08007323 	.word	0x08007323
 8007290:	08007323 	.word	0x08007323
 8007294:	08007323 	.word	0x08007323
 8007298:	08007323 	.word	0x08007323
 800729c:	08007323 	.word	0x08007323
 80072a0:	08007323 	.word	0x08007323
 80072a4:	08007323 	.word	0x08007323
 80072a8:	08007323 	.word	0x08007323
 80072ac:	08007323 	.word	0x08007323
 80072b0:	08007323 	.word	0x08007323
 80072b4:	08007315 	.word	0x08007315
 80072b8:	2b40      	cmp	r3, #64	; 0x40
 80072ba:	d02e      	beq.n	800731a <UART_SetConfig+0xa36>
 80072bc:	e031      	b.n	8007322 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072be:	f7fc fc13 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 80072c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072c4:	e033      	b.n	800732e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072c6:	f7fc fc25 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 80072ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072cc:	e02f      	b.n	800732e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fd fe96 	bl	8005004 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072dc:	e027      	b.n	800732e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072de:	f107 0318 	add.w	r3, r7, #24
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fd ffe2 	bl	80052ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ec:	e01f      	b.n	800732e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ee:	4b2d      	ldr	r3, [pc, #180]	; (80073a4 <UART_SetConfig+0xac0>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072fa:	4b2a      	ldr	r3, [pc, #168]	; (80073a4 <UART_SetConfig+0xac0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	08db      	lsrs	r3, r3, #3
 8007300:	f003 0303 	and.w	r3, r3, #3
 8007304:	4a28      	ldr	r2, [pc, #160]	; (80073a8 <UART_SetConfig+0xac4>)
 8007306:	fa22 f303 	lsr.w	r3, r2, r3
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800730c:	e00f      	b.n	800732e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800730e:	4b26      	ldr	r3, [pc, #152]	; (80073a8 <UART_SetConfig+0xac4>)
 8007310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007312:	e00c      	b.n	800732e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007314:	4b25      	ldr	r3, [pc, #148]	; (80073ac <UART_SetConfig+0xac8>)
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007318:	e009      	b.n	800732e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007320:	e005      	b.n	800732e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800732c:	bf00      	nop
    }

    if (pclk != 0U)
 800732e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d021      	beq.n	8007378 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	4a1d      	ldr	r2, [pc, #116]	; (80073b0 <UART_SetConfig+0xacc>)
 800733a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800733e:	461a      	mov	r2, r3
 8007340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007342:	fbb3 f2f2 	udiv	r2, r3, r2
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	441a      	add	r2, r3
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	fbb2 f3f3 	udiv	r3, r2, r3
 8007356:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735a:	2b0f      	cmp	r3, #15
 800735c:	d909      	bls.n	8007372 <UART_SetConfig+0xa8e>
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007364:	d205      	bcs.n	8007372 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	b29a      	uxth	r2, r3
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60da      	str	r2, [r3, #12]
 8007370:	e002      	b.n	8007378 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2201      	movs	r2, #1
 800737c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2201      	movs	r2, #1
 8007384:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2200      	movs	r2, #0
 800738c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2200      	movs	r2, #0
 8007392:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007394:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007398:	4618      	mov	r0, r3
 800739a:	3748      	adds	r7, #72	; 0x48
 800739c:	46bd      	mov	sp, r7
 800739e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a2:	bf00      	nop
 80073a4:	58024400 	.word	0x58024400
 80073a8:	03d09000 	.word	0x03d09000
 80073ac:	003d0900 	.word	0x003d0900
 80073b0:	080098dc 	.word	0x080098dc

080073b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d01a      	beq.n	80074ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074b2:	d10a      	bne.n	80074ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	605a      	str	r2, [r3, #4]
  }
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b098      	sub	sp, #96	; 0x60
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007508:	f7fa fa72 	bl	80019f0 <HAL_GetTick>
 800750c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b08      	cmp	r3, #8
 800751a:	d12f      	bne.n	800757c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800751c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007524:	2200      	movs	r2, #0
 8007526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f88e 	bl	800764c <UART_WaitOnFlagUntilTimeout>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d022      	beq.n	800757c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800754a:	653b      	str	r3, [r7, #80]	; 0x50
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007554:	647b      	str	r3, [r7, #68]	; 0x44
 8007556:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800755a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e6      	bne.n	8007536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2220      	movs	r2, #32
 800756c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e063      	b.n	8007644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0304 	and.w	r3, r3, #4
 8007586:	2b04      	cmp	r3, #4
 8007588:	d149      	bne.n	800761e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800758a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007592:	2200      	movs	r2, #0
 8007594:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f857 	bl	800764c <UART_WaitOnFlagUntilTimeout>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d03c      	beq.n	800761e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	623b      	str	r3, [r7, #32]
   return(result);
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c2:	633b      	str	r3, [r7, #48]	; 0x30
 80075c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e6      	bne.n	80075a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3308      	adds	r3, #8
 80075dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f023 0301 	bic.w	r3, r3, #1
 80075ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3308      	adds	r3, #8
 80075f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075f6:	61fa      	str	r2, [r7, #28]
 80075f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	69b9      	ldr	r1, [r7, #24]
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	617b      	str	r3, [r7, #20]
   return(result);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e5      	bne.n	80075d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e012      	b.n	8007644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3758      	adds	r7, #88	; 0x58
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800765c:	e04f      	b.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007664:	d04b      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007666:	f7fa f9c3 	bl	80019f0 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	429a      	cmp	r2, r3
 8007674:	d302      	bcc.n	800767c <UART_WaitOnFlagUntilTimeout+0x30>
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e04e      	b.n	800771e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b00      	cmp	r3, #0
 800768c:	d037      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b80      	cmp	r3, #128	; 0x80
 8007692:	d034      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b40      	cmp	r3, #64	; 0x40
 8007698:	d031      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d110      	bne.n	80076ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2208      	movs	r2, #8
 80076ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 f839 	bl	8007728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2208      	movs	r2, #8
 80076ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e029      	b.n	800771e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d8:	d111      	bne.n	80076fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f81f 	bl	8007728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e00f      	b.n	800771e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69da      	ldr	r2, [r3, #28]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4013      	ands	r3, r2
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	429a      	cmp	r2, r3
 800770c:	bf0c      	ite	eq
 800770e:	2301      	moveq	r3, #1
 8007710:	2300      	movne	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	461a      	mov	r2, r3
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	429a      	cmp	r2, r3
 800771a:	d0a0      	beq.n	800765e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b095      	sub	sp, #84	; 0x54
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007744:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800774e:	643b      	str	r3, [r7, #64]	; 0x40
 8007750:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e6      	bne.n	8007730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3308      	adds	r3, #8
 8007768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	61fb      	str	r3, [r7, #28]
   return(result);
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	4b1e      	ldr	r3, [pc, #120]	; (80077f0 <UART_EndRxTransfer+0xc8>)
 8007776:	4013      	ands	r3, r2
 8007778:	64bb      	str	r3, [r7, #72]	; 0x48
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3308      	adds	r3, #8
 8007780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007784:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e5      	bne.n	8007762 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d118      	bne.n	80077d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f023 0310 	bic.w	r3, r3, #16
 80077b2:	647b      	str	r3, [r7, #68]	; 0x44
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6979      	ldr	r1, [r7, #20]
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	613b      	str	r3, [r7, #16]
   return(result);
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e6      	bne.n	800779e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80077e4:	bf00      	nop
 80077e6:	3754      	adds	r7, #84	; 0x54
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	effffffe 	.word	0xeffffffe

080077f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007802:	2b01      	cmp	r3, #1
 8007804:	d101      	bne.n	800780a <HAL_UARTEx_DisableFifoMode+0x16>
 8007806:	2302      	movs	r3, #2
 8007808:	e027      	b.n	800785a <HAL_UARTEx_DisableFifoMode+0x66>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2224      	movs	r2, #36	; 0x24
 8007816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0201 	bic.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007838:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800787a:	2302      	movs	r3, #2
 800787c:	e02d      	b.n	80078da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2224      	movs	r2, #36	; 0x24
 800788a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0201 	bic.w	r2, r2, #1
 80078a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f850 	bl	8007960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078f6:	2302      	movs	r3, #2
 80078f8:	e02d      	b.n	8007956 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2224      	movs	r2, #36	; 0x24
 8007906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0201 	bic.w	r2, r2, #1
 8007920:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f812 	bl	8007960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2220      	movs	r2, #32
 8007948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800796c:	2b00      	cmp	r3, #0
 800796e:	d108      	bne.n	8007982 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007980:	e031      	b.n	80079e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007982:	2310      	movs	r3, #16
 8007984:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007986:	2310      	movs	r3, #16
 8007988:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	0e5b      	lsrs	r3, r3, #25
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	0f5b      	lsrs	r3, r3, #29
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	7b3a      	ldrb	r2, [r7, #12]
 80079ae:	4911      	ldr	r1, [pc, #68]	; (80079f4 <UARTEx_SetNbDataToProcess+0x94>)
 80079b0:	5c8a      	ldrb	r2, [r1, r2]
 80079b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079b6:	7b3a      	ldrb	r2, [r7, #12]
 80079b8:	490f      	ldr	r1, [pc, #60]	; (80079f8 <UARTEx_SetNbDataToProcess+0x98>)
 80079ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	7b7a      	ldrb	r2, [r7, #13]
 80079cc:	4909      	ldr	r1, [pc, #36]	; (80079f4 <UARTEx_SetNbDataToProcess+0x94>)
 80079ce:	5c8a      	ldrb	r2, [r1, r2]
 80079d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80079d4:	7b7a      	ldrb	r2, [r7, #13]
 80079d6:	4908      	ldr	r1, [pc, #32]	; (80079f8 <UARTEx_SetNbDataToProcess+0x98>)
 80079d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079da:	fb93 f3f2 	sdiv	r3, r3, r2
 80079de:	b29a      	uxth	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80079e6:	bf00      	nop
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	080098f4 	.word	0x080098f4
 80079f8:	080098fc 	.word	0x080098fc

080079fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079fc:	b084      	sub	sp, #16
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	f107 001c 	add.w	r0, r7, #28
 8007a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a0e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d121      	bne.n	8007a5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	4b2c      	ldr	r3, [pc, #176]	; (8007ad8 <USB_CoreInit+0xdc>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d105      	bne.n	8007a4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 faaa 	bl	8007fa8 <USB_CoreReset>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73fb      	strb	r3, [r7, #15]
 8007a58:	e01b      	b.n	8007a92 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa9e 	bl	8007fa8 <USB_CoreReset>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d106      	bne.n	8007a86 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
 8007a84:	e005      	b.n	8007a92 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a92:	7fbb      	ldrb	r3, [r7, #30]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d116      	bne.n	8007ac6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007aa6:	4b0d      	ldr	r3, [pc, #52]	; (8007adc <USB_CoreInit+0xe0>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f043 0206 	orr.w	r2, r3, #6
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f043 0220 	orr.w	r2, r3, #32
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ad2:	b004      	add	sp, #16
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	ffbdffbf 	.word	0xffbdffbf
 8007adc:	03ee0000 	.word	0x03ee0000

08007ae0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f023 0201 	bic.w	r2, r3, #1
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d115      	bne.n	8007b50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b30:	200a      	movs	r0, #10
 8007b32:	f7f9 ff69 	bl	8001a08 <HAL_Delay>
      ms += 10U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	330a      	adds	r3, #10
 8007b3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fa25 	bl	8007f8c <USB_GetMode>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d01e      	beq.n	8007b86 <USB_SetCurrentMode+0x84>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2bc7      	cmp	r3, #199	; 0xc7
 8007b4c:	d9f0      	bls.n	8007b30 <USB_SetCurrentMode+0x2e>
 8007b4e:	e01a      	b.n	8007b86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d115      	bne.n	8007b82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b62:	200a      	movs	r0, #10
 8007b64:	f7f9 ff50 	bl	8001a08 <HAL_Delay>
      ms += 10U;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	330a      	adds	r3, #10
 8007b6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa0c 	bl	8007f8c <USB_GetMode>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <USB_SetCurrentMode+0x84>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2bc7      	cmp	r3, #199	; 0xc7
 8007b7e:	d9f0      	bls.n	8007b62 <USB_SetCurrentMode+0x60>
 8007b80:	e001      	b.n	8007b86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e005      	b.n	8007b92 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2bc8      	cmp	r3, #200	; 0xc8
 8007b8a:	d101      	bne.n	8007b90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e000      	b.n	8007b92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b086      	sub	sp, #24
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	e009      	b.n	8007bd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	3340      	adds	r3, #64	; 0x40
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	2b0e      	cmp	r3, #14
 8007bd4:	d9f2      	bls.n	8007bbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bd6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d11c      	bne.n	8007c18 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bec:	f043 0302 	orr.w	r3, r3, #2
 8007bf0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	e005      	b.n	8007c24 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c30:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d10d      	bne.n	8007c54 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d104      	bne.n	8007c4a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c40:	2100      	movs	r1, #0
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f968 	bl	8007f18 <USB_SetDevSpeed>
 8007c48:	e008      	b.n	8007c5c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f963 	bl	8007f18 <USB_SetDevSpeed>
 8007c52:	e003      	b.n	8007c5c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c54:	2103      	movs	r1, #3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f95e 	bl	8007f18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c5c:	2110      	movs	r1, #16
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f8fa 	bl	8007e58 <USB_FlushTxFifo>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f924 	bl	8007ebc <USB_FlushRxFifo>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c84:	461a      	mov	r2, r3
 8007c86:	2300      	movs	r3, #0
 8007c88:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c90:	461a      	mov	r2, r3
 8007c92:	2300      	movs	r3, #0
 8007c94:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	e043      	b.n	8007d30 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cbe:	d118      	bne.n	8007cf2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	e013      	b.n	8007d04 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	e008      	b.n	8007d04 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfe:	461a      	mov	r2, r3
 8007d00:	2300      	movs	r3, #0
 8007d02:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d10:	461a      	mov	r2, r3
 8007d12:	2300      	movs	r3, #0
 8007d14:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d22:	461a      	mov	r2, r3
 8007d24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d34:	461a      	mov	r2, r3
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d3b5      	bcc.n	8007ca8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	613b      	str	r3, [r7, #16]
 8007d40:	e043      	b.n	8007dca <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d58:	d118      	bne.n	8007d8c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10a      	bne.n	8007d76 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	e013      	b.n	8007d9e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d82:	461a      	mov	r2, r3
 8007d84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	e008      	b.n	8007d9e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d98:	461a      	mov	r2, r3
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007daa:	461a      	mov	r2, r3
 8007dac:	2300      	movs	r3, #0
 8007dae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	613b      	str	r3, [r7, #16]
 8007dca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007dce:	461a      	mov	r2, r3
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d3b5      	bcc.n	8007d42 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007df6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007df8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d105      	bne.n	8007e0c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	f043 0210 	orr.w	r2, r3, #16
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699a      	ldr	r2, [r3, #24]
 8007e10:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <USB_DevInit+0x2b4>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	f043 0208 	orr.w	r2, r3, #8
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d105      	bne.n	8007e40 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699a      	ldr	r2, [r3, #24]
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <USB_DevInit+0x2b8>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e4c:	b004      	add	sp, #16
 8007e4e:	4770      	bx	lr
 8007e50:	803c3800 	.word	0x803c3800
 8007e54:	40000004 	.word	0x40000004

08007e58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007e72:	d901      	bls.n	8007e78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e01b      	b.n	8007eb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	daf2      	bge.n	8007e66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	019b      	lsls	r3, r3, #6
 8007e88:	f043 0220 	orr.w	r2, r3, #32
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3301      	adds	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007e9c:	d901      	bls.n	8007ea2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e006      	b.n	8007eb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	d0f0      	beq.n	8007e90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007ed4:	d901      	bls.n	8007eda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e018      	b.n	8007f0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	daf2      	bge.n	8007ec8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2210      	movs	r2, #16
 8007eea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007ef8:	d901      	bls.n	8007efe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e006      	b.n	8007f0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f003 0310 	and.w	r3, r3, #16
 8007f06:	2b10      	cmp	r3, #16
 8007f08:	d0f0      	beq.n	8007eec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	68f9      	ldr	r1, [r7, #12]
 8007f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b085      	sub	sp, #20
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f64:	f023 0303 	bic.w	r3, r3, #3
 8007f68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f78:	f043 0302 	orr.w	r3, r3, #2
 8007f7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	f003 0301 	and.w	r3, r3, #1
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007fc0:	d901      	bls.n	8007fc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e01b      	b.n	8007ffe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	daf2      	bge.n	8007fb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f043 0201 	orr.w	r2, r3, #1
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007fea:	d901      	bls.n	8007ff0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e006      	b.n	8007ffe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d0f0      	beq.n	8007fde <USB_CoreReset+0x36>

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800800a:	b480      	push	{r7}
 800800c:	b085      	sub	sp, #20
 800800e:	af00      	add	r7, sp, #0
 8008010:	4603      	mov	r3, r0
 8008012:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800801c:	2b84      	cmp	r3, #132	; 0x84
 800801e:	d005      	beq.n	800802c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008020:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	3303      	adds	r3, #3
 800802a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800802c:	68fb      	ldr	r3, [r7, #12]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800803e:	f000 faf5 	bl	800862c <vTaskStartScheduler>
  
  return osOK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	bd80      	pop	{r7, pc}

08008048 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800804a:	b089      	sub	sp, #36	; 0x24
 800804c:	af04      	add	r7, sp, #16
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d020      	beq.n	800809c <osThreadCreate+0x54>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d01c      	beq.n	800809c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685c      	ldr	r4, [r3, #4]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691e      	ldr	r6, [r3, #16]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff ffc8 	bl	800800a <makeFreeRtosPriority>
 800807a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008084:	9202      	str	r2, [sp, #8]
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	9100      	str	r1, [sp, #0]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	4632      	mov	r2, r6
 800808e:	4629      	mov	r1, r5
 8008090:	4620      	mov	r0, r4
 8008092:	f000 f8ed 	bl	8008270 <xTaskCreateStatic>
 8008096:	4603      	mov	r3, r0
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	e01c      	b.n	80080d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685c      	ldr	r4, [r3, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080a8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff ffaa 	bl	800800a <makeFreeRtosPriority>
 80080b6:	4602      	mov	r2, r0
 80080b8:	f107 030c 	add.w	r3, r7, #12
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	9200      	str	r2, [sp, #0]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	4632      	mov	r2, r6
 80080c4:	4629      	mov	r1, r5
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 f92f 	bl	800832a <xTaskCreate>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d001      	beq.n	80080d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	e000      	b.n	80080d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80080d6:	68fb      	ldr	r3, [r7, #12]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <osDelay+0x16>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	e000      	b.n	80080f8 <osDelay+0x18>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 fa63 	bl	80085c4 <vTaskDelay>
  
  return osOK;
 80080fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f103 0208 	add.w	r2, r3, #8
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f04f 32ff 	mov.w	r2, #4294967295
 8008120:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f103 0208 	add.w	r2, r3, #8
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f103 0208 	add.w	r2, r3, #8
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008162:	b480      	push	{r7}
 8008164:	b085      	sub	sp, #20
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
}
 800819e:	bf00      	nop
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d103      	bne.n	80081ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	e00c      	b.n	80081e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3308      	adds	r3, #8
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	e002      	b.n	80081d8 <vListInsert+0x2e>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d2f6      	bcs.n	80081d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	601a      	str	r2, [r3, #0]
}
 8008210:	bf00      	nop
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6892      	ldr	r2, [r2, #8]
 8008232:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6852      	ldr	r2, [r2, #4]
 800823c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	429a      	cmp	r2, r3
 8008246:	d103      	bne.n	8008250 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	1e5a      	subs	r2, r3, #1
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08e      	sub	sp, #56	; 0x38
 8008274:	af04      	add	r7, sp, #16
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800827e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10a      	bne.n	800829a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	61fb      	str	r3, [r7, #28]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082b6:	23a0      	movs	r3, #160	; 0xa0
 80082b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2ba0      	cmp	r3, #160	; 0xa0
 80082be:	d00a      	beq.n	80082d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	61bb      	str	r3, [r7, #24]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d01e      	beq.n	800831c <xTaskCreateStatic+0xac>
 80082de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01b      	beq.n	800831c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	2202      	movs	r2, #2
 80082f2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082f6:	2300      	movs	r3, #0
 80082f8:	9303      	str	r3, [sp, #12]
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	9302      	str	r3, [sp, #8]
 80082fe:	f107 0314 	add.w	r3, r7, #20
 8008302:	9301      	str	r3, [sp, #4]
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	68b9      	ldr	r1, [r7, #8]
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 f850 	bl	80083b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008316:	f000 f8eb 	bl	80084f0 <prvAddNewTaskToReadyList>
 800831a:	e001      	b.n	8008320 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008320:	697b      	ldr	r3, [r7, #20]
	}
 8008322:	4618      	mov	r0, r3
 8008324:	3728      	adds	r7, #40	; 0x28
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800832a:	b580      	push	{r7, lr}
 800832c:	b08c      	sub	sp, #48	; 0x30
 800832e:	af04      	add	r7, sp, #16
 8008330:	60f8      	str	r0, [r7, #12]
 8008332:	60b9      	str	r1, [r7, #8]
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	4613      	mov	r3, r2
 8008338:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800833a:	88fb      	ldrh	r3, [r7, #6]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fef2 	bl	8009128 <pvPortMalloc>
 8008344:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00e      	beq.n	800836a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800834c:	20a0      	movs	r0, #160	; 0xa0
 800834e:	f000 feeb 	bl	8009128 <pvPortMalloc>
 8008352:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	631a      	str	r2, [r3, #48]	; 0x30
 8008360:	e005      	b.n	800836e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008362:	6978      	ldr	r0, [r7, #20]
 8008364:	f000 ffac 	bl	80092c0 <vPortFree>
 8008368:	e001      	b.n	800836e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d017      	beq.n	80083a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800837c:	88fa      	ldrh	r2, [r7, #6]
 800837e:	2300      	movs	r3, #0
 8008380:	9303      	str	r3, [sp, #12]
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	9302      	str	r3, [sp, #8]
 8008386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68b9      	ldr	r1, [r7, #8]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 f80e 	bl	80083b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008398:	69f8      	ldr	r0, [r7, #28]
 800839a:	f000 f8a9 	bl	80084f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800839e:	2301      	movs	r3, #1
 80083a0:	61bb      	str	r3, [r7, #24]
 80083a2:	e002      	b.n	80083aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083a4:	f04f 33ff 	mov.w	r3, #4294967295
 80083a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083aa:	69bb      	ldr	r3, [r7, #24]
	}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3720      	adds	r7, #32
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c6:	6879      	ldr	r1, [r7, #4]
 80083c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80083cc:	440b      	add	r3, r1
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	f023 0307 	bic.w	r3, r3, #7
 80083da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	f003 0307 	and.w	r3, r3, #7
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <prvInitialiseNewTask+0x48>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	617b      	str	r3, [r7, #20]
}
 80083f8:	bf00      	nop
 80083fa:	e7fe      	b.n	80083fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d01f      	beq.n	8008442 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008402:	2300      	movs	r3, #0
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	e012      	b.n	800842e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	7819      	ldrb	r1, [r3, #0]
 8008410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	4413      	add	r3, r2
 8008416:	3334      	adds	r3, #52	; 0x34
 8008418:	460a      	mov	r2, r1
 800841a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	4413      	add	r3, r2
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d006      	beq.n	8008436 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	3301      	adds	r3, #1
 800842c:	61fb      	str	r3, [r7, #28]
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	2b0f      	cmp	r3, #15
 8008432:	d9e9      	bls.n	8008408 <prvInitialiseNewTask+0x54>
 8008434:	e000      	b.n	8008438 <prvInitialiseNewTask+0x84>
			{
				break;
 8008436:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008440:	e003      	b.n	800844a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	2b06      	cmp	r3, #6
 800844e:	d901      	bls.n	8008454 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008450:	2306      	movs	r3, #6
 8008452:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008458:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800845e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	2200      	movs	r2, #0
 8008464:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	3304      	adds	r3, #4
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff fe6c 	bl	8008148 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	3318      	adds	r3, #24
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff fe67 	bl	8008148 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800847e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	f1c3 0207 	rsb	r2, r3, #7
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800848e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	2200      	movs	r2, #0
 800849c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	334c      	adds	r3, #76	; 0x4c
 80084a4:	224c      	movs	r2, #76	; 0x4c
 80084a6:	2100      	movs	r1, #0
 80084a8:	4618      	mov	r0, r3
 80084aa:	f001 f8f1 	bl	8009690 <memset>
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	4a0c      	ldr	r2, [pc, #48]	; (80084e4 <prvInitialiseNewTask+0x130>)
 80084b2:	651a      	str	r2, [r3, #80]	; 0x50
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	4a0c      	ldr	r2, [pc, #48]	; (80084e8 <prvInitialiseNewTask+0x134>)
 80084b8:	655a      	str	r2, [r3, #84]	; 0x54
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	4a0b      	ldr	r2, [pc, #44]	; (80084ec <prvInitialiseNewTask+0x138>)
 80084be:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	69b8      	ldr	r0, [r7, #24]
 80084c6:	f000 fc1f 	bl	8008d08 <pxPortInitialiseStack>
 80084ca:	4602      	mov	r2, r0
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084dc:	bf00      	nop
 80084de:	3720      	adds	r7, #32
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	24004a88 	.word	0x24004a88
 80084e8:	24004af0 	.word	0x24004af0
 80084ec:	24004b58 	.word	0x24004b58

080084f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084f8:	f000 fd34 	bl	8008f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084fc:	4b2a      	ldr	r3, [pc, #168]	; (80085a8 <prvAddNewTaskToReadyList+0xb8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3301      	adds	r3, #1
 8008502:	4a29      	ldr	r2, [pc, #164]	; (80085a8 <prvAddNewTaskToReadyList+0xb8>)
 8008504:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008506:	4b29      	ldr	r3, [pc, #164]	; (80085ac <prvAddNewTaskToReadyList+0xbc>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800850e:	4a27      	ldr	r2, [pc, #156]	; (80085ac <prvAddNewTaskToReadyList+0xbc>)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008514:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <prvAddNewTaskToReadyList+0xb8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d110      	bne.n	800853e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800851c:	f000 facc 	bl	8008ab8 <prvInitialiseTaskLists>
 8008520:	e00d      	b.n	800853e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008522:	4b23      	ldr	r3, [pc, #140]	; (80085b0 <prvAddNewTaskToReadyList+0xc0>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800852a:	4b20      	ldr	r3, [pc, #128]	; (80085ac <prvAddNewTaskToReadyList+0xbc>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	429a      	cmp	r2, r3
 8008536:	d802      	bhi.n	800853e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008538:	4a1c      	ldr	r2, [pc, #112]	; (80085ac <prvAddNewTaskToReadyList+0xbc>)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800853e:	4b1d      	ldr	r3, [pc, #116]	; (80085b4 <prvAddNewTaskToReadyList+0xc4>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3301      	adds	r3, #1
 8008544:	4a1b      	ldr	r2, [pc, #108]	; (80085b4 <prvAddNewTaskToReadyList+0xc4>)
 8008546:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	2201      	movs	r2, #1
 800854e:	409a      	lsls	r2, r3
 8008550:	4b19      	ldr	r3, [pc, #100]	; (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4313      	orrs	r3, r2
 8008556:	4a18      	ldr	r2, [pc, #96]	; (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4a15      	ldr	r2, [pc, #84]	; (80085bc <prvAddNewTaskToReadyList+0xcc>)
 8008568:	441a      	add	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3304      	adds	r3, #4
 800856e:	4619      	mov	r1, r3
 8008570:	4610      	mov	r0, r2
 8008572:	f7ff fdf6 	bl	8008162 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008576:	f000 fd25 	bl	8008fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800857a:	4b0d      	ldr	r3, [pc, #52]	; (80085b0 <prvAddNewTaskToReadyList+0xc0>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00e      	beq.n	80085a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008582:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <prvAddNewTaskToReadyList+0xbc>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	429a      	cmp	r2, r3
 800858e:	d207      	bcs.n	80085a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008590:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <prvAddNewTaskToReadyList+0xd0>)
 8008592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	24000e2c 	.word	0x24000e2c
 80085ac:	24000d2c 	.word	0x24000d2c
 80085b0:	24000e38 	.word	0x24000e38
 80085b4:	24000e48 	.word	0x24000e48
 80085b8:	24000e34 	.word	0x24000e34
 80085bc:	24000d30 	.word	0x24000d30
 80085c0:	e000ed04 	.word	0xe000ed04

080085c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d017      	beq.n	8008606 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085d6:	4b13      	ldr	r3, [pc, #76]	; (8008624 <vTaskDelay+0x60>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <vTaskDelay+0x30>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	60bb      	str	r3, [r7, #8]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80085f4:	f000 f884 	bl	8008700 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085f8:	2100      	movs	r1, #0
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fb1e 	bl	8008c3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008600:	f000 f88c 	bl	800871c <xTaskResumeAll>
 8008604:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d107      	bne.n	800861c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800860c:	4b06      	ldr	r3, [pc, #24]	; (8008628 <vTaskDelay+0x64>)
 800860e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800861c:	bf00      	nop
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	24000e54 	.word	0x24000e54
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08a      	sub	sp, #40	; 0x28
 8008630:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008632:	2300      	movs	r3, #0
 8008634:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008636:	2300      	movs	r3, #0
 8008638:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800863a:	463a      	mov	r2, r7
 800863c:	1d39      	adds	r1, r7, #4
 800863e:	f107 0308 	add.w	r3, r7, #8
 8008642:	4618      	mov	r0, r3
 8008644:	f7f8 f86c 	bl	8000720 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	9202      	str	r2, [sp, #8]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	2300      	movs	r3, #0
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	2300      	movs	r3, #0
 8008658:	460a      	mov	r2, r1
 800865a:	4921      	ldr	r1, [pc, #132]	; (80086e0 <vTaskStartScheduler+0xb4>)
 800865c:	4821      	ldr	r0, [pc, #132]	; (80086e4 <vTaskStartScheduler+0xb8>)
 800865e:	f7ff fe07 	bl	8008270 <xTaskCreateStatic>
 8008662:	4603      	mov	r3, r0
 8008664:	4a20      	ldr	r2, [pc, #128]	; (80086e8 <vTaskStartScheduler+0xbc>)
 8008666:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008668:	4b1f      	ldr	r3, [pc, #124]	; (80086e8 <vTaskStartScheduler+0xbc>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008670:	2301      	movs	r3, #1
 8008672:	617b      	str	r3, [r7, #20]
 8008674:	e001      	b.n	800867a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d11b      	bne.n	80086b8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	613b      	str	r3, [r7, #16]
}
 8008692:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008694:	4b15      	ldr	r3, [pc, #84]	; (80086ec <vTaskStartScheduler+0xc0>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	334c      	adds	r3, #76	; 0x4c
 800869a:	4a15      	ldr	r2, [pc, #84]	; (80086f0 <vTaskStartScheduler+0xc4>)
 800869c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800869e:	4b15      	ldr	r3, [pc, #84]	; (80086f4 <vTaskStartScheduler+0xc8>)
 80086a0:	f04f 32ff 	mov.w	r2, #4294967295
 80086a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <vTaskStartScheduler+0xcc>)
 80086a8:	2201      	movs	r2, #1
 80086aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086ac:	4b13      	ldr	r3, [pc, #76]	; (80086fc <vTaskStartScheduler+0xd0>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086b2:	f000 fbb5 	bl	8008e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086b6:	e00e      	b.n	80086d6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086be:	d10a      	bne.n	80086d6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	60fb      	str	r3, [r7, #12]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <vTaskStartScheduler+0xa8>
}
 80086d6:	bf00      	nop
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	080098c4 	.word	0x080098c4
 80086e4:	08008a89 	.word	0x08008a89
 80086e8:	24000e50 	.word	0x24000e50
 80086ec:	24000d2c 	.word	0x24000d2c
 80086f0:	24000060 	.word	0x24000060
 80086f4:	24000e4c 	.word	0x24000e4c
 80086f8:	24000e38 	.word	0x24000e38
 80086fc:	24000e30 	.word	0x24000e30

08008700 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008704:	4b04      	ldr	r3, [pc, #16]	; (8008718 <vTaskSuspendAll+0x18>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3301      	adds	r3, #1
 800870a:	4a03      	ldr	r2, [pc, #12]	; (8008718 <vTaskSuspendAll+0x18>)
 800870c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800870e:	bf00      	nop
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	24000e54 	.word	0x24000e54

0800871c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008722:	2300      	movs	r3, #0
 8008724:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008726:	2300      	movs	r3, #0
 8008728:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800872a:	4b41      	ldr	r3, [pc, #260]	; (8008830 <xTaskResumeAll+0x114>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10a      	bne.n	8008748 <xTaskResumeAll+0x2c>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	603b      	str	r3, [r7, #0]
}
 8008744:	bf00      	nop
 8008746:	e7fe      	b.n	8008746 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008748:	f000 fc0c 	bl	8008f64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800874c:	4b38      	ldr	r3, [pc, #224]	; (8008830 <xTaskResumeAll+0x114>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3b01      	subs	r3, #1
 8008752:	4a37      	ldr	r2, [pc, #220]	; (8008830 <xTaskResumeAll+0x114>)
 8008754:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008756:	4b36      	ldr	r3, [pc, #216]	; (8008830 <xTaskResumeAll+0x114>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d161      	bne.n	8008822 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800875e:	4b35      	ldr	r3, [pc, #212]	; (8008834 <xTaskResumeAll+0x118>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d05d      	beq.n	8008822 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008766:	e02e      	b.n	80087c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008768:	4b33      	ldr	r3, [pc, #204]	; (8008838 <xTaskResumeAll+0x11c>)
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3318      	adds	r3, #24
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff fd51 	bl	800821c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3304      	adds	r3, #4
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff fd4c 	bl	800821c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008788:	2201      	movs	r2, #1
 800878a:	409a      	lsls	r2, r3
 800878c:	4b2b      	ldr	r3, [pc, #172]	; (800883c <xTaskResumeAll+0x120>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4313      	orrs	r3, r2
 8008792:	4a2a      	ldr	r2, [pc, #168]	; (800883c <xTaskResumeAll+0x120>)
 8008794:	6013      	str	r3, [r2, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4a27      	ldr	r2, [pc, #156]	; (8008840 <xTaskResumeAll+0x124>)
 80087a4:	441a      	add	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3304      	adds	r3, #4
 80087aa:	4619      	mov	r1, r3
 80087ac:	4610      	mov	r0, r2
 80087ae:	f7ff fcd8 	bl	8008162 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b6:	4b23      	ldr	r3, [pc, #140]	; (8008844 <xTaskResumeAll+0x128>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087bc:	429a      	cmp	r2, r3
 80087be:	d302      	bcc.n	80087c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80087c0:	4b21      	ldr	r3, [pc, #132]	; (8008848 <xTaskResumeAll+0x12c>)
 80087c2:	2201      	movs	r2, #1
 80087c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087c6:	4b1c      	ldr	r3, [pc, #112]	; (8008838 <xTaskResumeAll+0x11c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1cc      	bne.n	8008768 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087d4:	f000 fa12 	bl	8008bfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087d8:	4b1c      	ldr	r3, [pc, #112]	; (800884c <xTaskResumeAll+0x130>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d010      	beq.n	8008806 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087e4:	f000 f836 	bl	8008854 <xTaskIncrementTick>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80087ee:	4b16      	ldr	r3, [pc, #88]	; (8008848 <xTaskResumeAll+0x12c>)
 80087f0:	2201      	movs	r2, #1
 80087f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1f1      	bne.n	80087e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008800:	4b12      	ldr	r3, [pc, #72]	; (800884c <xTaskResumeAll+0x130>)
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008806:	4b10      	ldr	r3, [pc, #64]	; (8008848 <xTaskResumeAll+0x12c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d009      	beq.n	8008822 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800880e:	2301      	movs	r3, #1
 8008810:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008812:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <xTaskResumeAll+0x134>)
 8008814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008822:	f000 fbcf 	bl	8008fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8008826:	68bb      	ldr	r3, [r7, #8]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	24000e54 	.word	0x24000e54
 8008834:	24000e2c 	.word	0x24000e2c
 8008838:	24000dec 	.word	0x24000dec
 800883c:	24000e34 	.word	0x24000e34
 8008840:	24000d30 	.word	0x24000d30
 8008844:	24000d2c 	.word	0x24000d2c
 8008848:	24000e40 	.word	0x24000e40
 800884c:	24000e3c 	.word	0x24000e3c
 8008850:	e000ed04 	.word	0xe000ed04

08008854 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800885a:	2300      	movs	r3, #0
 800885c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800885e:	4b4e      	ldr	r3, [pc, #312]	; (8008998 <xTaskIncrementTick+0x144>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	f040 808e 	bne.w	8008984 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008868:	4b4c      	ldr	r3, [pc, #304]	; (800899c <xTaskIncrementTick+0x148>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3301      	adds	r3, #1
 800886e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008870:	4a4a      	ldr	r2, [pc, #296]	; (800899c <xTaskIncrementTick+0x148>)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d120      	bne.n	80088be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800887c:	4b48      	ldr	r3, [pc, #288]	; (80089a0 <xTaskIncrementTick+0x14c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <xTaskIncrementTick+0x48>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	603b      	str	r3, [r7, #0]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <xTaskIncrementTick+0x46>
 800889c:	4b40      	ldr	r3, [pc, #256]	; (80089a0 <xTaskIncrementTick+0x14c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	4b40      	ldr	r3, [pc, #256]	; (80089a4 <xTaskIncrementTick+0x150>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a3e      	ldr	r2, [pc, #248]	; (80089a0 <xTaskIncrementTick+0x14c>)
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	4a3e      	ldr	r2, [pc, #248]	; (80089a4 <xTaskIncrementTick+0x150>)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	4b3d      	ldr	r3, [pc, #244]	; (80089a8 <xTaskIncrementTick+0x154>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3301      	adds	r3, #1
 80088b6:	4a3c      	ldr	r2, [pc, #240]	; (80089a8 <xTaskIncrementTick+0x154>)
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	f000 f99f 	bl	8008bfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088be:	4b3b      	ldr	r3, [pc, #236]	; (80089ac <xTaskIncrementTick+0x158>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d348      	bcc.n	800895a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088c8:	4b35      	ldr	r3, [pc, #212]	; (80089a0 <xTaskIncrementTick+0x14c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d104      	bne.n	80088dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d2:	4b36      	ldr	r3, [pc, #216]	; (80089ac <xTaskIncrementTick+0x158>)
 80088d4:	f04f 32ff 	mov.w	r2, #4294967295
 80088d8:	601a      	str	r2, [r3, #0]
					break;
 80088da:	e03e      	b.n	800895a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088dc:	4b30      	ldr	r3, [pc, #192]	; (80089a0 <xTaskIncrementTick+0x14c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d203      	bcs.n	80088fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088f4:	4a2d      	ldr	r2, [pc, #180]	; (80089ac <xTaskIncrementTick+0x158>)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088fa:	e02e      	b.n	800895a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	3304      	adds	r3, #4
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff fc8b 	bl	800821c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890a:	2b00      	cmp	r3, #0
 800890c:	d004      	beq.n	8008918 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	3318      	adds	r3, #24
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fc82 	bl	800821c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	2201      	movs	r2, #1
 800891e:	409a      	lsls	r2, r3
 8008920:	4b23      	ldr	r3, [pc, #140]	; (80089b0 <xTaskIncrementTick+0x15c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4313      	orrs	r3, r2
 8008926:	4a22      	ldr	r2, [pc, #136]	; (80089b0 <xTaskIncrementTick+0x15c>)
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4a1f      	ldr	r2, [pc, #124]	; (80089b4 <xTaskIncrementTick+0x160>)
 8008938:	441a      	add	r2, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	3304      	adds	r3, #4
 800893e:	4619      	mov	r1, r3
 8008940:	4610      	mov	r0, r2
 8008942:	f7ff fc0e 	bl	8008162 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894a:	4b1b      	ldr	r3, [pc, #108]	; (80089b8 <xTaskIncrementTick+0x164>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	429a      	cmp	r2, r3
 8008952:	d3b9      	bcc.n	80088c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008954:	2301      	movs	r3, #1
 8008956:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008958:	e7b6      	b.n	80088c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800895a:	4b17      	ldr	r3, [pc, #92]	; (80089b8 <xTaskIncrementTick+0x164>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008960:	4914      	ldr	r1, [pc, #80]	; (80089b4 <xTaskIncrementTick+0x160>)
 8008962:	4613      	mov	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	440b      	add	r3, r1
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d901      	bls.n	8008976 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008972:	2301      	movs	r3, #1
 8008974:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008976:	4b11      	ldr	r3, [pc, #68]	; (80089bc <xTaskIncrementTick+0x168>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d007      	beq.n	800898e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800897e:	2301      	movs	r3, #1
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	e004      	b.n	800898e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008984:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <xTaskIncrementTick+0x16c>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3301      	adds	r3, #1
 800898a:	4a0d      	ldr	r2, [pc, #52]	; (80089c0 <xTaskIncrementTick+0x16c>)
 800898c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800898e:	697b      	ldr	r3, [r7, #20]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	24000e54 	.word	0x24000e54
 800899c:	24000e30 	.word	0x24000e30
 80089a0:	24000de4 	.word	0x24000de4
 80089a4:	24000de8 	.word	0x24000de8
 80089a8:	24000e44 	.word	0x24000e44
 80089ac:	24000e4c 	.word	0x24000e4c
 80089b0:	24000e34 	.word	0x24000e34
 80089b4:	24000d30 	.word	0x24000d30
 80089b8:	24000d2c 	.word	0x24000d2c
 80089bc:	24000e40 	.word	0x24000e40
 80089c0:	24000e3c 	.word	0x24000e3c

080089c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089c4:	b480      	push	{r7}
 80089c6:	b087      	sub	sp, #28
 80089c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089ca:	4b29      	ldr	r3, [pc, #164]	; (8008a70 <vTaskSwitchContext+0xac>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089d2:	4b28      	ldr	r3, [pc, #160]	; (8008a74 <vTaskSwitchContext+0xb0>)
 80089d4:	2201      	movs	r2, #1
 80089d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089d8:	e044      	b.n	8008a64 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80089da:	4b26      	ldr	r3, [pc, #152]	; (8008a74 <vTaskSwitchContext+0xb0>)
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e0:	4b25      	ldr	r3, [pc, #148]	; (8008a78 <vTaskSwitchContext+0xb4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	fab3 f383 	clz	r3, r3
 80089ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80089ee:	7afb      	ldrb	r3, [r7, #11]
 80089f0:	f1c3 031f 	rsb	r3, r3, #31
 80089f4:	617b      	str	r3, [r7, #20]
 80089f6:	4921      	ldr	r1, [pc, #132]	; (8008a7c <vTaskSwitchContext+0xb8>)
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4613      	mov	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	440b      	add	r3, r1
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10a      	bne.n	8008a20 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	607b      	str	r3, [r7, #4]
}
 8008a1c:	bf00      	nop
 8008a1e:	e7fe      	b.n	8008a1e <vTaskSwitchContext+0x5a>
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4a14      	ldr	r2, [pc, #80]	; (8008a7c <vTaskSwitchContext+0xb8>)
 8008a2c:	4413      	add	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	605a      	str	r2, [r3, #4]
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	3308      	adds	r3, #8
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d104      	bne.n	8008a50 <vTaskSwitchContext+0x8c>
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	605a      	str	r2, [r3, #4]
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	4a0a      	ldr	r2, [pc, #40]	; (8008a80 <vTaskSwitchContext+0xbc>)
 8008a58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a5a:	4b09      	ldr	r3, [pc, #36]	; (8008a80 <vTaskSwitchContext+0xbc>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	334c      	adds	r3, #76	; 0x4c
 8008a60:	4a08      	ldr	r2, [pc, #32]	; (8008a84 <vTaskSwitchContext+0xc0>)
 8008a62:	6013      	str	r3, [r2, #0]
}
 8008a64:	bf00      	nop
 8008a66:	371c      	adds	r7, #28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	24000e54 	.word	0x24000e54
 8008a74:	24000e40 	.word	0x24000e40
 8008a78:	24000e34 	.word	0x24000e34
 8008a7c:	24000d30 	.word	0x24000d30
 8008a80:	24000d2c 	.word	0x24000d2c
 8008a84:	24000060 	.word	0x24000060

08008a88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a90:	f000 f852 	bl	8008b38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a94:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <prvIdleTask+0x28>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d9f9      	bls.n	8008a90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a9c:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <prvIdleTask+0x2c>)
 8008a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008aac:	e7f0      	b.n	8008a90 <prvIdleTask+0x8>
 8008aae:	bf00      	nop
 8008ab0:	24000d30 	.word	0x24000d30
 8008ab4:	e000ed04 	.word	0xe000ed04

08008ab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008abe:	2300      	movs	r3, #0
 8008ac0:	607b      	str	r3, [r7, #4]
 8008ac2:	e00c      	b.n	8008ade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4a12      	ldr	r2, [pc, #72]	; (8008b18 <prvInitialiseTaskLists+0x60>)
 8008ad0:	4413      	add	r3, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff fb18 	bl	8008108 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3301      	adds	r3, #1
 8008adc:	607b      	str	r3, [r7, #4]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b06      	cmp	r3, #6
 8008ae2:	d9ef      	bls.n	8008ac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ae4:	480d      	ldr	r0, [pc, #52]	; (8008b1c <prvInitialiseTaskLists+0x64>)
 8008ae6:	f7ff fb0f 	bl	8008108 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008aea:	480d      	ldr	r0, [pc, #52]	; (8008b20 <prvInitialiseTaskLists+0x68>)
 8008aec:	f7ff fb0c 	bl	8008108 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008af0:	480c      	ldr	r0, [pc, #48]	; (8008b24 <prvInitialiseTaskLists+0x6c>)
 8008af2:	f7ff fb09 	bl	8008108 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008af6:	480c      	ldr	r0, [pc, #48]	; (8008b28 <prvInitialiseTaskLists+0x70>)
 8008af8:	f7ff fb06 	bl	8008108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008afc:	480b      	ldr	r0, [pc, #44]	; (8008b2c <prvInitialiseTaskLists+0x74>)
 8008afe:	f7ff fb03 	bl	8008108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b02:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <prvInitialiseTaskLists+0x78>)
 8008b04:	4a05      	ldr	r2, [pc, #20]	; (8008b1c <prvInitialiseTaskLists+0x64>)
 8008b06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b08:	4b0a      	ldr	r3, [pc, #40]	; (8008b34 <prvInitialiseTaskLists+0x7c>)
 8008b0a:	4a05      	ldr	r2, [pc, #20]	; (8008b20 <prvInitialiseTaskLists+0x68>)
 8008b0c:	601a      	str	r2, [r3, #0]
}
 8008b0e:	bf00      	nop
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	24000d30 	.word	0x24000d30
 8008b1c:	24000dbc 	.word	0x24000dbc
 8008b20:	24000dd0 	.word	0x24000dd0
 8008b24:	24000dec 	.word	0x24000dec
 8008b28:	24000e00 	.word	0x24000e00
 8008b2c:	24000e18 	.word	0x24000e18
 8008b30:	24000de4 	.word	0x24000de4
 8008b34:	24000de8 	.word	0x24000de8

08008b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b3e:	e019      	b.n	8008b74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b40:	f000 fa10 	bl	8008f64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b44:	4b10      	ldr	r3, [pc, #64]	; (8008b88 <prvCheckTasksWaitingTermination+0x50>)
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff fb63 	bl	800821c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b56:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <prvCheckTasksWaitingTermination+0x54>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	4a0b      	ldr	r2, [pc, #44]	; (8008b8c <prvCheckTasksWaitingTermination+0x54>)
 8008b5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b60:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <prvCheckTasksWaitingTermination+0x58>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	4a0a      	ldr	r2, [pc, #40]	; (8008b90 <prvCheckTasksWaitingTermination+0x58>)
 8008b68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b6a:	f000 fa2b 	bl	8008fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f810 	bl	8008b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b74:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <prvCheckTasksWaitingTermination+0x58>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e1      	bne.n	8008b40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b7c:	bf00      	nop
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	24000e00 	.word	0x24000e00
 8008b8c:	24000e2c 	.word	0x24000e2c
 8008b90:	24000e14 	.word	0x24000e14

08008b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	334c      	adds	r3, #76	; 0x4c
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 fd7d 	bl	80096a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d108      	bne.n	8008bc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 fb83 	bl	80092c0 <vPortFree>
				vPortFree( pxTCB );
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fb80 	bl	80092c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008bc0:	e018      	b.n	8008bf4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d103      	bne.n	8008bd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fb77 	bl	80092c0 <vPortFree>
	}
 8008bd2:	e00f      	b.n	8008bf4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d00a      	beq.n	8008bf4 <prvDeleteTCB+0x60>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	60fb      	str	r3, [r7, #12]
}
 8008bf0:	bf00      	nop
 8008bf2:	e7fe      	b.n	8008bf2 <prvDeleteTCB+0x5e>
	}
 8008bf4:	bf00      	nop
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c02:	4b0c      	ldr	r3, [pc, #48]	; (8008c34 <prvResetNextTaskUnblockTime+0x38>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d104      	bne.n	8008c16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c0c:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <prvResetNextTaskUnblockTime+0x3c>)
 8008c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c14:	e008      	b.n	8008c28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c16:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <prvResetNextTaskUnblockTime+0x38>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	4a04      	ldr	r2, [pc, #16]	; (8008c38 <prvResetNextTaskUnblockTime+0x3c>)
 8008c26:	6013      	str	r3, [r2, #0]
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	24000de4 	.word	0x24000de4
 8008c38:	24000e4c 	.word	0x24000e4c

08008c3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c46:	4b29      	ldr	r3, [pc, #164]	; (8008cec <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c4c:	4b28      	ldr	r3, [pc, #160]	; (8008cf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3304      	adds	r3, #4
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff fae2 	bl	800821c <uxListRemove>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10b      	bne.n	8008c76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c5e:	4b24      	ldr	r3, [pc, #144]	; (8008cf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	2201      	movs	r2, #1
 8008c66:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6a:	43da      	mvns	r2, r3
 8008c6c:	4b21      	ldr	r3, [pc, #132]	; (8008cf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4013      	ands	r3, r2
 8008c72:	4a20      	ldr	r2, [pc, #128]	; (8008cf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7c:	d10a      	bne.n	8008c94 <prvAddCurrentTaskToDelayedList+0x58>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d007      	beq.n	8008c94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c84:	4b1a      	ldr	r3, [pc, #104]	; (8008cf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3304      	adds	r3, #4
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	481a      	ldr	r0, [pc, #104]	; (8008cf8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c8e:	f7ff fa68 	bl	8008162 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c92:	e026      	b.n	8008ce2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4413      	add	r3, r2
 8008c9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c9c:	4b14      	ldr	r3, [pc, #80]	; (8008cf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d209      	bcs.n	8008cc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cac:	4b13      	ldr	r3, [pc, #76]	; (8008cfc <prvAddCurrentTaskToDelayedList+0xc0>)
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4610      	mov	r0, r2
 8008cba:	f7ff fa76 	bl	80081aa <vListInsert>
}
 8008cbe:	e010      	b.n	8008ce2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cc0:	4b0f      	ldr	r3, [pc, #60]	; (8008d00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	4b0a      	ldr	r3, [pc, #40]	; (8008cf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	4619      	mov	r1, r3
 8008ccc:	4610      	mov	r0, r2
 8008cce:	f7ff fa6c 	bl	80081aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d202      	bcs.n	8008ce2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008cdc:	4a09      	ldr	r2, [pc, #36]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	6013      	str	r3, [r2, #0]
}
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	24000e30 	.word	0x24000e30
 8008cf0:	24000d2c 	.word	0x24000d2c
 8008cf4:	24000e34 	.word	0x24000e34
 8008cf8:	24000e18 	.word	0x24000e18
 8008cfc:	24000de8 	.word	0x24000de8
 8008d00:	24000de4 	.word	0x24000de4
 8008d04:	24000e4c 	.word	0x24000e4c

08008d08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3b04      	subs	r3, #4
 8008d18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3b04      	subs	r3, #4
 8008d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f023 0201 	bic.w	r2, r3, #1
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3b04      	subs	r3, #4
 8008d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d38:	4a0c      	ldr	r2, [pc, #48]	; (8008d6c <pxPortInitialiseStack+0x64>)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3b14      	subs	r3, #20
 8008d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3b04      	subs	r3, #4
 8008d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f06f 0202 	mvn.w	r2, #2
 8008d56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	3b20      	subs	r3, #32
 8008d5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	08008d71 	.word	0x08008d71

08008d70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d7a:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <prvTaskExitError+0x54>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d82:	d00a      	beq.n	8008d9a <prvTaskExitError+0x2a>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	60fb      	str	r3, [r7, #12]
}
 8008d96:	bf00      	nop
 8008d98:	e7fe      	b.n	8008d98 <prvTaskExitError+0x28>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	60bb      	str	r3, [r7, #8]
}
 8008dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008dae:	bf00      	nop
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0fc      	beq.n	8008db0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008db6:	bf00      	nop
 8008db8:	bf00      	nop
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	24000010 	.word	0x24000010
	...

08008dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <pxCurrentTCBConst2>)
 8008dd2:	6819      	ldr	r1, [r3, #0]
 8008dd4:	6808      	ldr	r0, [r1, #0]
 8008dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dda:	f380 8809 	msr	PSP, r0
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f04f 0000 	mov.w	r0, #0
 8008de6:	f380 8811 	msr	BASEPRI, r0
 8008dea:	4770      	bx	lr
 8008dec:	f3af 8000 	nop.w

08008df0 <pxCurrentTCBConst2>:
 8008df0:	24000d2c 	.word	0x24000d2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop

08008df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008df8:	4808      	ldr	r0, [pc, #32]	; (8008e1c <prvPortStartFirstTask+0x24>)
 8008dfa:	6800      	ldr	r0, [r0, #0]
 8008dfc:	6800      	ldr	r0, [r0, #0]
 8008dfe:	f380 8808 	msr	MSP, r0
 8008e02:	f04f 0000 	mov.w	r0, #0
 8008e06:	f380 8814 	msr	CONTROL, r0
 8008e0a:	b662      	cpsie	i
 8008e0c:	b661      	cpsie	f
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	df00      	svc	0
 8008e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e1a:	bf00      	nop
 8008e1c:	e000ed08 	.word	0xe000ed08

08008e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e26:	4b46      	ldr	r3, [pc, #280]	; (8008f40 <xPortStartScheduler+0x120>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a46      	ldr	r2, [pc, #280]	; (8008f44 <xPortStartScheduler+0x124>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d10a      	bne.n	8008e46 <xPortStartScheduler+0x26>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	613b      	str	r3, [r7, #16]
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e46:	4b3e      	ldr	r3, [pc, #248]	; (8008f40 <xPortStartScheduler+0x120>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a3f      	ldr	r2, [pc, #252]	; (8008f48 <xPortStartScheduler+0x128>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d10a      	bne.n	8008e66 <xPortStartScheduler+0x46>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	60fb      	str	r3, [r7, #12]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e66:	4b39      	ldr	r3, [pc, #228]	; (8008f4c <xPortStartScheduler+0x12c>)
 8008e68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	22ff      	movs	r2, #255	; 0xff
 8008e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	4b31      	ldr	r3, [pc, #196]	; (8008f50 <xPortStartScheduler+0x130>)
 8008e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e8e:	4b31      	ldr	r3, [pc, #196]	; (8008f54 <xPortStartScheduler+0x134>)
 8008e90:	2207      	movs	r2, #7
 8008e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e94:	e009      	b.n	8008eaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008e96:	4b2f      	ldr	r3, [pc, #188]	; (8008f54 <xPortStartScheduler+0x134>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	4a2d      	ldr	r2, [pc, #180]	; (8008f54 <xPortStartScheduler+0x134>)
 8008e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eaa:	78fb      	ldrb	r3, [r7, #3]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb2:	2b80      	cmp	r3, #128	; 0x80
 8008eb4:	d0ef      	beq.n	8008e96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008eb6:	4b27      	ldr	r3, [pc, #156]	; (8008f54 <xPortStartScheduler+0x134>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f1c3 0307 	rsb	r3, r3, #7
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d00a      	beq.n	8008ed8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	60bb      	str	r3, [r7, #8]
}
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ed8:	4b1e      	ldr	r3, [pc, #120]	; (8008f54 <xPortStartScheduler+0x134>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	021b      	lsls	r3, r3, #8
 8008ede:	4a1d      	ldr	r2, [pc, #116]	; (8008f54 <xPortStartScheduler+0x134>)
 8008ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ee2:	4b1c      	ldr	r3, [pc, #112]	; (8008f54 <xPortStartScheduler+0x134>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eea:	4a1a      	ldr	r2, [pc, #104]	; (8008f54 <xPortStartScheduler+0x134>)
 8008eec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ef6:	4b18      	ldr	r3, [pc, #96]	; (8008f58 <xPortStartScheduler+0x138>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a17      	ldr	r2, [pc, #92]	; (8008f58 <xPortStartScheduler+0x138>)
 8008efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f02:	4b15      	ldr	r3, [pc, #84]	; (8008f58 <xPortStartScheduler+0x138>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a14      	ldr	r2, [pc, #80]	; (8008f58 <xPortStartScheduler+0x138>)
 8008f08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f0e:	f000 f8dd 	bl	80090cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f12:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <xPortStartScheduler+0x13c>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f18:	f000 f8fc 	bl	8009114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f1c:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <xPortStartScheduler+0x140>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a0f      	ldr	r2, [pc, #60]	; (8008f60 <xPortStartScheduler+0x140>)
 8008f22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f28:	f7ff ff66 	bl	8008df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f2c:	f7ff fd4a 	bl	80089c4 <vTaskSwitchContext>
	prvTaskExitError();
 8008f30:	f7ff ff1e 	bl	8008d70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	e000ed00 	.word	0xe000ed00
 8008f44:	410fc271 	.word	0x410fc271
 8008f48:	410fc270 	.word	0x410fc270
 8008f4c:	e000e400 	.word	0xe000e400
 8008f50:	24000e58 	.word	0x24000e58
 8008f54:	24000e5c 	.word	0x24000e5c
 8008f58:	e000ed20 	.word	0xe000ed20
 8008f5c:	24000010 	.word	0x24000010
 8008f60:	e000ef34 	.word	0xe000ef34

08008f64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	607b      	str	r3, [r7, #4]
}
 8008f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f7e:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <vPortEnterCritical+0x58>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3301      	adds	r3, #1
 8008f84:	4a0d      	ldr	r2, [pc, #52]	; (8008fbc <vPortEnterCritical+0x58>)
 8008f86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f88:	4b0c      	ldr	r3, [pc, #48]	; (8008fbc <vPortEnterCritical+0x58>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d10f      	bne.n	8008fb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <vPortEnterCritical+0x5c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	603b      	str	r3, [r7, #0]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <vPortEnterCritical+0x4a>
	}
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	24000010 	.word	0x24000010
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008fca:	4b12      	ldr	r3, [pc, #72]	; (8009014 <vPortExitCritical+0x50>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10a      	bne.n	8008fe8 <vPortExitCritical+0x24>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	607b      	str	r3, [r7, #4]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <vPortExitCritical+0x50>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	4a09      	ldr	r2, [pc, #36]	; (8009014 <vPortExitCritical+0x50>)
 8008ff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ff2:	4b08      	ldr	r3, [pc, #32]	; (8009014 <vPortExitCritical+0x50>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d105      	bne.n	8009006 <vPortExitCritical+0x42>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	24000010 	.word	0x24000010
	...

08009020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009020:	f3ef 8009 	mrs	r0, PSP
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	4b15      	ldr	r3, [pc, #84]	; (8009080 <pxCurrentTCBConst>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	f01e 0f10 	tst.w	lr, #16
 8009030:	bf08      	it	eq
 8009032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903a:	6010      	str	r0, [r2, #0]
 800903c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009044:	f380 8811 	msr	BASEPRI, r0
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f7ff fcb8 	bl	80089c4 <vTaskSwitchContext>
 8009054:	f04f 0000 	mov.w	r0, #0
 8009058:	f380 8811 	msr	BASEPRI, r0
 800905c:	bc09      	pop	{r0, r3}
 800905e:	6819      	ldr	r1, [r3, #0]
 8009060:	6808      	ldr	r0, [r1, #0]
 8009062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009066:	f01e 0f10 	tst.w	lr, #16
 800906a:	bf08      	it	eq
 800906c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009070:	f380 8809 	msr	PSP, r0
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	f3af 8000 	nop.w

08009080 <pxCurrentTCBConst>:
 8009080:	24000d2c 	.word	0x24000d2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop

08009088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	607b      	str	r3, [r7, #4]
}
 80090a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090a2:	f7ff fbd7 	bl	8008854 <xTaskIncrementTick>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090ac:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <SysTick_Handler+0x40>)
 80090ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	2300      	movs	r3, #0
 80090b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	f383 8811 	msr	BASEPRI, r3
}
 80090be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80090c0:	bf00      	nop
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80090cc:	b480      	push	{r7}
 80090ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090d0:	4b0b      	ldr	r3, [pc, #44]	; (8009100 <vPortSetupTimerInterrupt+0x34>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090d6:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <vPortSetupTimerInterrupt+0x38>)
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090dc:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <vPortSetupTimerInterrupt+0x3c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a0a      	ldr	r2, [pc, #40]	; (800910c <vPortSetupTimerInterrupt+0x40>)
 80090e2:	fba2 2303 	umull	r2, r3, r2, r3
 80090e6:	099b      	lsrs	r3, r3, #6
 80090e8:	4a09      	ldr	r2, [pc, #36]	; (8009110 <vPortSetupTimerInterrupt+0x44>)
 80090ea:	3b01      	subs	r3, #1
 80090ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090ee:	4b04      	ldr	r3, [pc, #16]	; (8009100 <vPortSetupTimerInterrupt+0x34>)
 80090f0:	2207      	movs	r2, #7
 80090f2:	601a      	str	r2, [r3, #0]
}
 80090f4:	bf00      	nop
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	e000e010 	.word	0xe000e010
 8009104:	e000e018 	.word	0xe000e018
 8009108:	24000000 	.word	0x24000000
 800910c:	10624dd3 	.word	0x10624dd3
 8009110:	e000e014 	.word	0xe000e014

08009114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009124 <vPortEnableVFP+0x10>
 8009118:	6801      	ldr	r1, [r0, #0]
 800911a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800911e:	6001      	str	r1, [r0, #0]
 8009120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009122:	bf00      	nop
 8009124:	e000ed88 	.word	0xe000ed88

08009128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b08a      	sub	sp, #40	; 0x28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009130:	2300      	movs	r3, #0
 8009132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009134:	f7ff fae4 	bl	8008700 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009138:	4b5b      	ldr	r3, [pc, #364]	; (80092a8 <pvPortMalloc+0x180>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009140:	f000 f920 	bl	8009384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009144:	4b59      	ldr	r3, [pc, #356]	; (80092ac <pvPortMalloc+0x184>)
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4013      	ands	r3, r2
 800914c:	2b00      	cmp	r3, #0
 800914e:	f040 8093 	bne.w	8009278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01d      	beq.n	8009194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009158:	2208      	movs	r2, #8
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	2b00      	cmp	r3, #0
 8009168:	d014      	beq.n	8009194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f023 0307 	bic.w	r3, r3, #7
 8009170:	3308      	adds	r3, #8
 8009172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <pvPortMalloc+0x6c>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	617b      	str	r3, [r7, #20]
}
 8009190:	bf00      	nop
 8009192:	e7fe      	b.n	8009192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d06e      	beq.n	8009278 <pvPortMalloc+0x150>
 800919a:	4b45      	ldr	r3, [pc, #276]	; (80092b0 <pvPortMalloc+0x188>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d869      	bhi.n	8009278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091a4:	4b43      	ldr	r3, [pc, #268]	; (80092b4 <pvPortMalloc+0x18c>)
 80091a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091a8:	4b42      	ldr	r3, [pc, #264]	; (80092b4 <pvPortMalloc+0x18c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091ae:	e004      	b.n	80091ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d903      	bls.n	80091cc <pvPortMalloc+0xa4>
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1f1      	bne.n	80091b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091cc:	4b36      	ldr	r3, [pc, #216]	; (80092a8 <pvPortMalloc+0x180>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d050      	beq.n	8009278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2208      	movs	r2, #8
 80091dc:	4413      	add	r3, r2
 80091de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	1ad2      	subs	r2, r2, r3
 80091f0:	2308      	movs	r3, #8
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d91f      	bls.n	8009238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4413      	add	r3, r2
 80091fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	f003 0307 	and.w	r3, r3, #7
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <pvPortMalloc+0xf8>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	613b      	str	r3, [r7, #16]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	1ad2      	subs	r2, r2, r3
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009232:	69b8      	ldr	r0, [r7, #24]
 8009234:	f000 f908 	bl	8009448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009238:	4b1d      	ldr	r3, [pc, #116]	; (80092b0 <pvPortMalloc+0x188>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	4a1b      	ldr	r2, [pc, #108]	; (80092b0 <pvPortMalloc+0x188>)
 8009244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009246:	4b1a      	ldr	r3, [pc, #104]	; (80092b0 <pvPortMalloc+0x188>)
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	4b1b      	ldr	r3, [pc, #108]	; (80092b8 <pvPortMalloc+0x190>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	429a      	cmp	r2, r3
 8009250:	d203      	bcs.n	800925a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009252:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <pvPortMalloc+0x188>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a18      	ldr	r2, [pc, #96]	; (80092b8 <pvPortMalloc+0x190>)
 8009258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	4b13      	ldr	r3, [pc, #76]	; (80092ac <pvPortMalloc+0x184>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	431a      	orrs	r2, r3
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	2200      	movs	r2, #0
 800926c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800926e:	4b13      	ldr	r3, [pc, #76]	; (80092bc <pvPortMalloc+0x194>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3301      	adds	r3, #1
 8009274:	4a11      	ldr	r2, [pc, #68]	; (80092bc <pvPortMalloc+0x194>)
 8009276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009278:	f7ff fa50 	bl	800871c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	f003 0307 	and.w	r3, r3, #7
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <pvPortMalloc+0x174>
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	60fb      	str	r3, [r7, #12]
}
 8009298:	bf00      	nop
 800929a:	e7fe      	b.n	800929a <pvPortMalloc+0x172>
	return pvReturn;
 800929c:	69fb      	ldr	r3, [r7, #28]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3728      	adds	r7, #40	; 0x28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	24004a68 	.word	0x24004a68
 80092ac:	24004a7c 	.word	0x24004a7c
 80092b0:	24004a6c 	.word	0x24004a6c
 80092b4:	24004a60 	.word	0x24004a60
 80092b8:	24004a70 	.word	0x24004a70
 80092bc:	24004a74 	.word	0x24004a74

080092c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d04d      	beq.n	800936e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092d2:	2308      	movs	r3, #8
 80092d4:	425b      	negs	r3, r3
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4413      	add	r3, r2
 80092da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	4b24      	ldr	r3, [pc, #144]	; (8009378 <vPortFree+0xb8>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4013      	ands	r3, r2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10a      	bne.n	8009304 <vPortFree+0x44>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	60fb      	str	r3, [r7, #12]
}
 8009300:	bf00      	nop
 8009302:	e7fe      	b.n	8009302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <vPortFree+0x62>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	60bb      	str	r3, [r7, #8]
}
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	4b14      	ldr	r3, [pc, #80]	; (8009378 <vPortFree+0xb8>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4013      	ands	r3, r2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d01e      	beq.n	800936e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d11a      	bne.n	800936e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	4b0e      	ldr	r3, [pc, #56]	; (8009378 <vPortFree+0xb8>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	43db      	mvns	r3, r3
 8009342:	401a      	ands	r2, r3
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009348:	f7ff f9da 	bl	8008700 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	4b0a      	ldr	r3, [pc, #40]	; (800937c <vPortFree+0xbc>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4413      	add	r3, r2
 8009356:	4a09      	ldr	r2, [pc, #36]	; (800937c <vPortFree+0xbc>)
 8009358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800935a:	6938      	ldr	r0, [r7, #16]
 800935c:	f000 f874 	bl	8009448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009360:	4b07      	ldr	r3, [pc, #28]	; (8009380 <vPortFree+0xc0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3301      	adds	r3, #1
 8009366:	4a06      	ldr	r2, [pc, #24]	; (8009380 <vPortFree+0xc0>)
 8009368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800936a:	f7ff f9d7 	bl	800871c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800936e:	bf00      	nop
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	24004a7c 	.word	0x24004a7c
 800937c:	24004a6c 	.word	0x24004a6c
 8009380:	24004a78 	.word	0x24004a78

08009384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800938a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800938e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009390:	4b27      	ldr	r3, [pc, #156]	; (8009430 <prvHeapInit+0xac>)
 8009392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00c      	beq.n	80093b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3307      	adds	r3, #7
 80093a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0307 	bic.w	r3, r3, #7
 80093aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	4a1f      	ldr	r2, [pc, #124]	; (8009430 <prvHeapInit+0xac>)
 80093b4:	4413      	add	r3, r2
 80093b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093bc:	4a1d      	ldr	r2, [pc, #116]	; (8009434 <prvHeapInit+0xb0>)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093c2:	4b1c      	ldr	r3, [pc, #112]	; (8009434 <prvHeapInit+0xb0>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	4413      	add	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093d0:	2208      	movs	r2, #8
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	1a9b      	subs	r3, r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 0307 	bic.w	r3, r3, #7
 80093de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4a15      	ldr	r2, [pc, #84]	; (8009438 <prvHeapInit+0xb4>)
 80093e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093e6:	4b14      	ldr	r3, [pc, #80]	; (8009438 <prvHeapInit+0xb4>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2200      	movs	r2, #0
 80093ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093ee:	4b12      	ldr	r3, [pc, #72]	; (8009438 <prvHeapInit+0xb4>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	1ad2      	subs	r2, r2, r3
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009404:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <prvHeapInit+0xb4>)
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	4a0a      	ldr	r2, [pc, #40]	; (800943c <prvHeapInit+0xb8>)
 8009412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	4a09      	ldr	r2, [pc, #36]	; (8009440 <prvHeapInit+0xbc>)
 800941a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800941c:	4b09      	ldr	r3, [pc, #36]	; (8009444 <prvHeapInit+0xc0>)
 800941e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009422:	601a      	str	r2, [r3, #0]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	24000e60 	.word	0x24000e60
 8009434:	24004a60 	.word	0x24004a60
 8009438:	24004a68 	.word	0x24004a68
 800943c:	24004a70 	.word	0x24004a70
 8009440:	24004a6c 	.word	0x24004a6c
 8009444:	24004a7c 	.word	0x24004a7c

08009448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009450:	4b28      	ldr	r3, [pc, #160]	; (80094f4 <prvInsertBlockIntoFreeList+0xac>)
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e002      	b.n	800945c <prvInsertBlockIntoFreeList+0x14>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	429a      	cmp	r2, r3
 8009464:	d8f7      	bhi.n	8009456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	4413      	add	r3, r2
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	429a      	cmp	r2, r3
 8009476:	d108      	bne.n	800948a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	441a      	add	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	441a      	add	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d118      	bne.n	80094d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	4b15      	ldr	r3, [pc, #84]	; (80094f8 <prvInsertBlockIntoFreeList+0xb0>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d00d      	beq.n	80094c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	441a      	add	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	e008      	b.n	80094d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094c6:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <prvInsertBlockIntoFreeList+0xb0>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	e003      	b.n	80094d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d002      	beq.n	80094e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094e6:	bf00      	nop
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	24004a60 	.word	0x24004a60
 80094f8:	24004a68 	.word	0x24004a68

080094fc <calloc>:
 80094fc:	4b02      	ldr	r3, [pc, #8]	; (8009508 <calloc+0xc>)
 80094fe:	460a      	mov	r2, r1
 8009500:	4601      	mov	r1, r0
 8009502:	6818      	ldr	r0, [r3, #0]
 8009504:	f000 b802 	b.w	800950c <_calloc_r>
 8009508:	24000060 	.word	0x24000060

0800950c <_calloc_r>:
 800950c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800950e:	fba1 2402 	umull	r2, r4, r1, r2
 8009512:	b94c      	cbnz	r4, 8009528 <_calloc_r+0x1c>
 8009514:	4611      	mov	r1, r2
 8009516:	9201      	str	r2, [sp, #4]
 8009518:	f000 f82e 	bl	8009578 <_malloc_r>
 800951c:	9a01      	ldr	r2, [sp, #4]
 800951e:	4605      	mov	r5, r0
 8009520:	b930      	cbnz	r0, 8009530 <_calloc_r+0x24>
 8009522:	4628      	mov	r0, r5
 8009524:	b003      	add	sp, #12
 8009526:	bd30      	pop	{r4, r5, pc}
 8009528:	220c      	movs	r2, #12
 800952a:	6002      	str	r2, [r0, #0]
 800952c:	2500      	movs	r5, #0
 800952e:	e7f8      	b.n	8009522 <_calloc_r+0x16>
 8009530:	4621      	mov	r1, r4
 8009532:	f000 f8ad 	bl	8009690 <memset>
 8009536:	e7f4      	b.n	8009522 <_calloc_r+0x16>

08009538 <sbrk_aligned>:
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	4e0e      	ldr	r6, [pc, #56]	; (8009574 <sbrk_aligned+0x3c>)
 800953c:	460c      	mov	r4, r1
 800953e:	6831      	ldr	r1, [r6, #0]
 8009540:	4605      	mov	r5, r0
 8009542:	b911      	cbnz	r1, 800954a <sbrk_aligned+0x12>
 8009544:	f000 f902 	bl	800974c <_sbrk_r>
 8009548:	6030      	str	r0, [r6, #0]
 800954a:	4621      	mov	r1, r4
 800954c:	4628      	mov	r0, r5
 800954e:	f000 f8fd 	bl	800974c <_sbrk_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d00a      	beq.n	800956c <sbrk_aligned+0x34>
 8009556:	1cc4      	adds	r4, r0, #3
 8009558:	f024 0403 	bic.w	r4, r4, #3
 800955c:	42a0      	cmp	r0, r4
 800955e:	d007      	beq.n	8009570 <sbrk_aligned+0x38>
 8009560:	1a21      	subs	r1, r4, r0
 8009562:	4628      	mov	r0, r5
 8009564:	f000 f8f2 	bl	800974c <_sbrk_r>
 8009568:	3001      	adds	r0, #1
 800956a:	d101      	bne.n	8009570 <sbrk_aligned+0x38>
 800956c:	f04f 34ff 	mov.w	r4, #4294967295
 8009570:	4620      	mov	r0, r4
 8009572:	bd70      	pop	{r4, r5, r6, pc}
 8009574:	24004a84 	.word	0x24004a84

08009578 <_malloc_r>:
 8009578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800957c:	1ccd      	adds	r5, r1, #3
 800957e:	f025 0503 	bic.w	r5, r5, #3
 8009582:	3508      	adds	r5, #8
 8009584:	2d0c      	cmp	r5, #12
 8009586:	bf38      	it	cc
 8009588:	250c      	movcc	r5, #12
 800958a:	2d00      	cmp	r5, #0
 800958c:	4607      	mov	r7, r0
 800958e:	db01      	blt.n	8009594 <_malloc_r+0x1c>
 8009590:	42a9      	cmp	r1, r5
 8009592:	d905      	bls.n	80095a0 <_malloc_r+0x28>
 8009594:	230c      	movs	r3, #12
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	2600      	movs	r6, #0
 800959a:	4630      	mov	r0, r6
 800959c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009674 <_malloc_r+0xfc>
 80095a4:	f000 f868 	bl	8009678 <__malloc_lock>
 80095a8:	f8d8 3000 	ldr.w	r3, [r8]
 80095ac:	461c      	mov	r4, r3
 80095ae:	bb5c      	cbnz	r4, 8009608 <_malloc_r+0x90>
 80095b0:	4629      	mov	r1, r5
 80095b2:	4638      	mov	r0, r7
 80095b4:	f7ff ffc0 	bl	8009538 <sbrk_aligned>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	4604      	mov	r4, r0
 80095bc:	d155      	bne.n	800966a <_malloc_r+0xf2>
 80095be:	f8d8 4000 	ldr.w	r4, [r8]
 80095c2:	4626      	mov	r6, r4
 80095c4:	2e00      	cmp	r6, #0
 80095c6:	d145      	bne.n	8009654 <_malloc_r+0xdc>
 80095c8:	2c00      	cmp	r4, #0
 80095ca:	d048      	beq.n	800965e <_malloc_r+0xe6>
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	4631      	mov	r1, r6
 80095d0:	4638      	mov	r0, r7
 80095d2:	eb04 0903 	add.w	r9, r4, r3
 80095d6:	f000 f8b9 	bl	800974c <_sbrk_r>
 80095da:	4581      	cmp	r9, r0
 80095dc:	d13f      	bne.n	800965e <_malloc_r+0xe6>
 80095de:	6821      	ldr	r1, [r4, #0]
 80095e0:	1a6d      	subs	r5, r5, r1
 80095e2:	4629      	mov	r1, r5
 80095e4:	4638      	mov	r0, r7
 80095e6:	f7ff ffa7 	bl	8009538 <sbrk_aligned>
 80095ea:	3001      	adds	r0, #1
 80095ec:	d037      	beq.n	800965e <_malloc_r+0xe6>
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	442b      	add	r3, r5
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	f8d8 3000 	ldr.w	r3, [r8]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d038      	beq.n	800966e <_malloc_r+0xf6>
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	42a2      	cmp	r2, r4
 8009600:	d12b      	bne.n	800965a <_malloc_r+0xe2>
 8009602:	2200      	movs	r2, #0
 8009604:	605a      	str	r2, [r3, #4]
 8009606:	e00f      	b.n	8009628 <_malloc_r+0xb0>
 8009608:	6822      	ldr	r2, [r4, #0]
 800960a:	1b52      	subs	r2, r2, r5
 800960c:	d41f      	bmi.n	800964e <_malloc_r+0xd6>
 800960e:	2a0b      	cmp	r2, #11
 8009610:	d917      	bls.n	8009642 <_malloc_r+0xca>
 8009612:	1961      	adds	r1, r4, r5
 8009614:	42a3      	cmp	r3, r4
 8009616:	6025      	str	r5, [r4, #0]
 8009618:	bf18      	it	ne
 800961a:	6059      	strne	r1, [r3, #4]
 800961c:	6863      	ldr	r3, [r4, #4]
 800961e:	bf08      	it	eq
 8009620:	f8c8 1000 	streq.w	r1, [r8]
 8009624:	5162      	str	r2, [r4, r5]
 8009626:	604b      	str	r3, [r1, #4]
 8009628:	4638      	mov	r0, r7
 800962a:	f104 060b 	add.w	r6, r4, #11
 800962e:	f000 f829 	bl	8009684 <__malloc_unlock>
 8009632:	f026 0607 	bic.w	r6, r6, #7
 8009636:	1d23      	adds	r3, r4, #4
 8009638:	1af2      	subs	r2, r6, r3
 800963a:	d0ae      	beq.n	800959a <_malloc_r+0x22>
 800963c:	1b9b      	subs	r3, r3, r6
 800963e:	50a3      	str	r3, [r4, r2]
 8009640:	e7ab      	b.n	800959a <_malloc_r+0x22>
 8009642:	42a3      	cmp	r3, r4
 8009644:	6862      	ldr	r2, [r4, #4]
 8009646:	d1dd      	bne.n	8009604 <_malloc_r+0x8c>
 8009648:	f8c8 2000 	str.w	r2, [r8]
 800964c:	e7ec      	b.n	8009628 <_malloc_r+0xb0>
 800964e:	4623      	mov	r3, r4
 8009650:	6864      	ldr	r4, [r4, #4]
 8009652:	e7ac      	b.n	80095ae <_malloc_r+0x36>
 8009654:	4634      	mov	r4, r6
 8009656:	6876      	ldr	r6, [r6, #4]
 8009658:	e7b4      	b.n	80095c4 <_malloc_r+0x4c>
 800965a:	4613      	mov	r3, r2
 800965c:	e7cc      	b.n	80095f8 <_malloc_r+0x80>
 800965e:	230c      	movs	r3, #12
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	4638      	mov	r0, r7
 8009664:	f000 f80e 	bl	8009684 <__malloc_unlock>
 8009668:	e797      	b.n	800959a <_malloc_r+0x22>
 800966a:	6025      	str	r5, [r4, #0]
 800966c:	e7dc      	b.n	8009628 <_malloc_r+0xb0>
 800966e:	605b      	str	r3, [r3, #4]
 8009670:	deff      	udf	#255	; 0xff
 8009672:	bf00      	nop
 8009674:	24004a80 	.word	0x24004a80

08009678 <__malloc_lock>:
 8009678:	4801      	ldr	r0, [pc, #4]	; (8009680 <__malloc_lock+0x8>)
 800967a:	f000 b8a1 	b.w	80097c0 <__retarget_lock_acquire_recursive>
 800967e:	bf00      	nop
 8009680:	24004bc4 	.word	0x24004bc4

08009684 <__malloc_unlock>:
 8009684:	4801      	ldr	r0, [pc, #4]	; (800968c <__malloc_unlock+0x8>)
 8009686:	f000 b89c 	b.w	80097c2 <__retarget_lock_release_recursive>
 800968a:	bf00      	nop
 800968c:	24004bc4 	.word	0x24004bc4

08009690 <memset>:
 8009690:	4402      	add	r2, r0
 8009692:	4603      	mov	r3, r0
 8009694:	4293      	cmp	r3, r2
 8009696:	d100      	bne.n	800969a <memset+0xa>
 8009698:	4770      	bx	lr
 800969a:	f803 1b01 	strb.w	r1, [r3], #1
 800969e:	e7f9      	b.n	8009694 <memset+0x4>

080096a0 <_reclaim_reent>:
 80096a0:	4b29      	ldr	r3, [pc, #164]	; (8009748 <_reclaim_reent+0xa8>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4283      	cmp	r3, r0
 80096a6:	b570      	push	{r4, r5, r6, lr}
 80096a8:	4604      	mov	r4, r0
 80096aa:	d04b      	beq.n	8009744 <_reclaim_reent+0xa4>
 80096ac:	69c3      	ldr	r3, [r0, #28]
 80096ae:	b143      	cbz	r3, 80096c2 <_reclaim_reent+0x22>
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d144      	bne.n	8009740 <_reclaim_reent+0xa0>
 80096b6:	69e3      	ldr	r3, [r4, #28]
 80096b8:	6819      	ldr	r1, [r3, #0]
 80096ba:	b111      	cbz	r1, 80096c2 <_reclaim_reent+0x22>
 80096bc:	4620      	mov	r0, r4
 80096be:	f000 f881 	bl	80097c4 <_free_r>
 80096c2:	6961      	ldr	r1, [r4, #20]
 80096c4:	b111      	cbz	r1, 80096cc <_reclaim_reent+0x2c>
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 f87c 	bl	80097c4 <_free_r>
 80096cc:	69e1      	ldr	r1, [r4, #28]
 80096ce:	b111      	cbz	r1, 80096d6 <_reclaim_reent+0x36>
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 f877 	bl	80097c4 <_free_r>
 80096d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80096d8:	b111      	cbz	r1, 80096e0 <_reclaim_reent+0x40>
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 f872 	bl	80097c4 <_free_r>
 80096e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096e2:	b111      	cbz	r1, 80096ea <_reclaim_reent+0x4a>
 80096e4:	4620      	mov	r0, r4
 80096e6:	f000 f86d 	bl	80097c4 <_free_r>
 80096ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80096ec:	b111      	cbz	r1, 80096f4 <_reclaim_reent+0x54>
 80096ee:	4620      	mov	r0, r4
 80096f0:	f000 f868 	bl	80097c4 <_free_r>
 80096f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80096f6:	b111      	cbz	r1, 80096fe <_reclaim_reent+0x5e>
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 f863 	bl	80097c4 <_free_r>
 80096fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009700:	b111      	cbz	r1, 8009708 <_reclaim_reent+0x68>
 8009702:	4620      	mov	r0, r4
 8009704:	f000 f85e 	bl	80097c4 <_free_r>
 8009708:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800970a:	b111      	cbz	r1, 8009712 <_reclaim_reent+0x72>
 800970c:	4620      	mov	r0, r4
 800970e:	f000 f859 	bl	80097c4 <_free_r>
 8009712:	6a23      	ldr	r3, [r4, #32]
 8009714:	b1b3      	cbz	r3, 8009744 <_reclaim_reent+0xa4>
 8009716:	4620      	mov	r0, r4
 8009718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800971c:	4718      	bx	r3
 800971e:	5949      	ldr	r1, [r1, r5]
 8009720:	b941      	cbnz	r1, 8009734 <_reclaim_reent+0x94>
 8009722:	3504      	adds	r5, #4
 8009724:	69e3      	ldr	r3, [r4, #28]
 8009726:	2d80      	cmp	r5, #128	; 0x80
 8009728:	68d9      	ldr	r1, [r3, #12]
 800972a:	d1f8      	bne.n	800971e <_reclaim_reent+0x7e>
 800972c:	4620      	mov	r0, r4
 800972e:	f000 f849 	bl	80097c4 <_free_r>
 8009732:	e7c0      	b.n	80096b6 <_reclaim_reent+0x16>
 8009734:	680e      	ldr	r6, [r1, #0]
 8009736:	4620      	mov	r0, r4
 8009738:	f000 f844 	bl	80097c4 <_free_r>
 800973c:	4631      	mov	r1, r6
 800973e:	e7ef      	b.n	8009720 <_reclaim_reent+0x80>
 8009740:	2500      	movs	r5, #0
 8009742:	e7ef      	b.n	8009724 <_reclaim_reent+0x84>
 8009744:	bd70      	pop	{r4, r5, r6, pc}
 8009746:	bf00      	nop
 8009748:	24000060 	.word	0x24000060

0800974c <_sbrk_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d06      	ldr	r5, [pc, #24]	; (8009768 <_sbrk_r+0x1c>)
 8009750:	2300      	movs	r3, #0
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	602b      	str	r3, [r5, #0]
 8009758:	f7f8 f812 	bl	8001780 <_sbrk>
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d102      	bne.n	8009766 <_sbrk_r+0x1a>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	b103      	cbz	r3, 8009766 <_sbrk_r+0x1a>
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	bd38      	pop	{r3, r4, r5, pc}
 8009768:	24004bc0 	.word	0x24004bc0

0800976c <__errno>:
 800976c:	4b01      	ldr	r3, [pc, #4]	; (8009774 <__errno+0x8>)
 800976e:	6818      	ldr	r0, [r3, #0]
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	24000060 	.word	0x24000060

08009778 <__libc_init_array>:
 8009778:	b570      	push	{r4, r5, r6, lr}
 800977a:	4d0d      	ldr	r5, [pc, #52]	; (80097b0 <__libc_init_array+0x38>)
 800977c:	4c0d      	ldr	r4, [pc, #52]	; (80097b4 <__libc_init_array+0x3c>)
 800977e:	1b64      	subs	r4, r4, r5
 8009780:	10a4      	asrs	r4, r4, #2
 8009782:	2600      	movs	r6, #0
 8009784:	42a6      	cmp	r6, r4
 8009786:	d109      	bne.n	800979c <__libc_init_array+0x24>
 8009788:	4d0b      	ldr	r5, [pc, #44]	; (80097b8 <__libc_init_array+0x40>)
 800978a:	4c0c      	ldr	r4, [pc, #48]	; (80097bc <__libc_init_array+0x44>)
 800978c:	f000 f866 	bl	800985c <_init>
 8009790:	1b64      	subs	r4, r4, r5
 8009792:	10a4      	asrs	r4, r4, #2
 8009794:	2600      	movs	r6, #0
 8009796:	42a6      	cmp	r6, r4
 8009798:	d105      	bne.n	80097a6 <__libc_init_array+0x2e>
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	f855 3b04 	ldr.w	r3, [r5], #4
 80097a0:	4798      	blx	r3
 80097a2:	3601      	adds	r6, #1
 80097a4:	e7ee      	b.n	8009784 <__libc_init_array+0xc>
 80097a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097aa:	4798      	blx	r3
 80097ac:	3601      	adds	r6, #1
 80097ae:	e7f2      	b.n	8009796 <__libc_init_array+0x1e>
 80097b0:	0800990c 	.word	0x0800990c
 80097b4:	0800990c 	.word	0x0800990c
 80097b8:	0800990c 	.word	0x0800990c
 80097bc:	08009910 	.word	0x08009910

080097c0 <__retarget_lock_acquire_recursive>:
 80097c0:	4770      	bx	lr

080097c2 <__retarget_lock_release_recursive>:
 80097c2:	4770      	bx	lr

080097c4 <_free_r>:
 80097c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097c6:	2900      	cmp	r1, #0
 80097c8:	d044      	beq.n	8009854 <_free_r+0x90>
 80097ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ce:	9001      	str	r0, [sp, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f1a1 0404 	sub.w	r4, r1, #4
 80097d6:	bfb8      	it	lt
 80097d8:	18e4      	addlt	r4, r4, r3
 80097da:	f7ff ff4d 	bl	8009678 <__malloc_lock>
 80097de:	4a1e      	ldr	r2, [pc, #120]	; (8009858 <_free_r+0x94>)
 80097e0:	9801      	ldr	r0, [sp, #4]
 80097e2:	6813      	ldr	r3, [r2, #0]
 80097e4:	b933      	cbnz	r3, 80097f4 <_free_r+0x30>
 80097e6:	6063      	str	r3, [r4, #4]
 80097e8:	6014      	str	r4, [r2, #0]
 80097ea:	b003      	add	sp, #12
 80097ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097f0:	f7ff bf48 	b.w	8009684 <__malloc_unlock>
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	d908      	bls.n	800980a <_free_r+0x46>
 80097f8:	6825      	ldr	r5, [r4, #0]
 80097fa:	1961      	adds	r1, r4, r5
 80097fc:	428b      	cmp	r3, r1
 80097fe:	bf01      	itttt	eq
 8009800:	6819      	ldreq	r1, [r3, #0]
 8009802:	685b      	ldreq	r3, [r3, #4]
 8009804:	1949      	addeq	r1, r1, r5
 8009806:	6021      	streq	r1, [r4, #0]
 8009808:	e7ed      	b.n	80097e6 <_free_r+0x22>
 800980a:	461a      	mov	r2, r3
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	b10b      	cbz	r3, 8009814 <_free_r+0x50>
 8009810:	42a3      	cmp	r3, r4
 8009812:	d9fa      	bls.n	800980a <_free_r+0x46>
 8009814:	6811      	ldr	r1, [r2, #0]
 8009816:	1855      	adds	r5, r2, r1
 8009818:	42a5      	cmp	r5, r4
 800981a:	d10b      	bne.n	8009834 <_free_r+0x70>
 800981c:	6824      	ldr	r4, [r4, #0]
 800981e:	4421      	add	r1, r4
 8009820:	1854      	adds	r4, r2, r1
 8009822:	42a3      	cmp	r3, r4
 8009824:	6011      	str	r1, [r2, #0]
 8009826:	d1e0      	bne.n	80097ea <_free_r+0x26>
 8009828:	681c      	ldr	r4, [r3, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	6053      	str	r3, [r2, #4]
 800982e:	440c      	add	r4, r1
 8009830:	6014      	str	r4, [r2, #0]
 8009832:	e7da      	b.n	80097ea <_free_r+0x26>
 8009834:	d902      	bls.n	800983c <_free_r+0x78>
 8009836:	230c      	movs	r3, #12
 8009838:	6003      	str	r3, [r0, #0]
 800983a:	e7d6      	b.n	80097ea <_free_r+0x26>
 800983c:	6825      	ldr	r5, [r4, #0]
 800983e:	1961      	adds	r1, r4, r5
 8009840:	428b      	cmp	r3, r1
 8009842:	bf04      	itt	eq
 8009844:	6819      	ldreq	r1, [r3, #0]
 8009846:	685b      	ldreq	r3, [r3, #4]
 8009848:	6063      	str	r3, [r4, #4]
 800984a:	bf04      	itt	eq
 800984c:	1949      	addeq	r1, r1, r5
 800984e:	6021      	streq	r1, [r4, #0]
 8009850:	6054      	str	r4, [r2, #4]
 8009852:	e7ca      	b.n	80097ea <_free_r+0x26>
 8009854:	b003      	add	sp, #12
 8009856:	bd30      	pop	{r4, r5, pc}
 8009858:	24004a80 	.word	0x24004a80

0800985c <_init>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr

08009868 <_fini>:
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986a:	bf00      	nop
 800986c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986e:	bc08      	pop	{r3}
 8009870:	469e      	mov	lr, r3
 8009872:	4770      	bx	lr
